=== env ===
Python 3.10.12
pytest 8.4.1

=== repo tree (top level) ===
.
├── .coverage
├── .coveragerc
├── .editorconfig
├── .env.example
├── .env.smtp.example
├── .git
│   ├── COMMIT_EDITMSG
│   ├── FETCH_HEAD
│   ├── HEAD
│   ├── ORIG_HEAD
│   ├── branches
│   ├── config
│   ├── description
│   ├── filter-repo
│   ├── hooks
│   ├── index
│   ├── info
│   ├── logs
│   ├── objects
│   ├── packed-refs
│   └── refs
├── .gitattributes
├── .github
│   ├── CODEOWNERS
│   ├── ISSUE_TEMPLATE
│   ├── PULL_REQUEST_TEMPLATE
│   ├── dependabot.yml
│   ├── release-drafter.yml
│   └── workflows
├── .gitignore
├── .local-logs
│   ├── test_action_result_contracts.py.log
│   └── test_actions_matrix_ext.py.log
├── .mypy_cache
│   ├── .gitignore
│   ├── 3.10
│   └── CACHEDIR.TAG
├── .pre-commit-config.yaml
├── .pre-commit-config.yaml.bak.20250818T032817
├── .pytest_cache
│   ├── .gitignore
│   ├── CACHEDIR.TAG
│   ├── README.md
│   └── v
├── .review_cursor
├── .ruff.toml
├── .ruff.toml.bak.20250818T105514
├── .ruff_cache
│   ├── .gitignore
│   ├── 0.12.10
│   ├── 0.12.9
│   ├── 0.4.10
│   └── CACHEDIR.TAG
├── .ruffignore
├── CONTRIBUTING.md
├── LICENSE
├── Makefile
├── Q.txt
├── README.md
├── SECURITY.md
├── __pycache__
│   ├── init_db.cpython-310.pyc
│   ├── policy_engine.cpython-310.pyc
│   └── send_with_attachment.cpython-310.pyc
├── _audit
│   ├── all_sources.txt
│   ├── git_files.txt
│   ├── python_files.txt
│   ├── restored_from_base.txt
│   ├── snapshot.txt
│   └── support_bundle.txt
├── apply_full_suite_fixes.sh
├── apply_quotation_and_cli_fixes.sh
├── archive
│   └── legacy_modules_20250822T112711
├── assert
├── assets
│   ├── badges
│   └── fonts
├── badges
│   └── coverage.svg
├── bin
│   ├── fmt
│   ├── lint
│   ├── run_ai_rpa
│   ├── sma-housekeeping
│   └── smarun
├── cli.py
├── collector_out.txt
├── compat_shims_and_retry.sh
├── configs
│   ├── ai_rpa_config.yaml
│   ├── default.yml
│   └── samples
├── continue_sma.sh
├── coverage.xml
├── data
│   ├── attachments
│   ├── complaints
│   ├── db
│   ├── input
│   ├── leads
│   ├── logs
│   ├── output
│   ├── quote_log.db
│   ├── quotes.db
│   ├── sample_in.json
│   └── tmp
├── deleted_since_base.txt
├── dist
│   ├── code_dump
│   └── smart-mail-agent-20250822T203552Z-d64e8c7c
├── docs
│   ├── architecture.md
│   ├── ci
│   ├── cli.md
│   ├── guide
│   └── index.md
├── examples
│   └── legacy_lowcov
├── features
│   ├── __init__.py
│   └── quotation.py
├── finalize_sma.sh
├── fix_lint_and_test.sh
├── fix_lint_and_test_v2.sh
├── fix_lint_and_test_v3.sh
├── fix_lint_and_test_v4.sh
├── fix_lint_and_test_v5.sh
├── fix_modules_quotation_shim.sh
├── fix_sma.sh
├── fix_version_alias.sh
├── init_db.py
├── legacy_tests
│   ├── ai_rpa
│   └── internal_smoke
├── mkdocs.yml
├── modules
│   ├── __init__.py
│   ├── __pycache__
│   ├── apply_diff.py
│   ├── features_sales_notifier.py
│   ├── inference_classifier.py
│   ├── intent_classifier.py
│   ├── log_writer_db.py
│   ├── quotation.py
│   ├── quote_logger.py
│   └── sales_notifier.py
├── mypy.ini
├── online_check_shadow_root.py
├── out
│   ├── .gitkeep
│   ├── nested
│   ├── quote.pdf
│   ├── test_dummy.pdf
│   └── users.db
├── outputs
│   └── quote_acme.txt
├── patches
│   ├── __init__.py
│   ├── handle_router_patch.py
│   └── handle_safe_patch.py
├── policy_engine.py
├── pyproject.toml
├── pyproject.toml.bak
├── pytest.ini
├── pytest.ini.bak
├── quotation
├── quotation.py
├── quotation.py.bak.20250823T161547
├── quote.pdf
├── quote_pdf.pdf
├── quotes
│   ├── Alice_Co_Ltd.pdf
│   ├── a_b_com.pdf
│   ├── buyer2_example_com.pdf
│   ├── client@example_com.pdf
│   ├── client_at_example_com.pdf
│   ├── client_example_com.pdf
│   ├── u_x.pdf
│   ├── user_example_com.pdf
│   ├── 客戶.pdf
│   └── 測試客戶.pdf
├── refactor_plan.json
├── repo_counts.txt
├── repo_dump_20250822T120655.md
├── repo_dump_20250822T121821.md
├── repo_files_after_clean.txt
├── repo_snapshot_20250822T171419Z.txt
├── repo_snapshot_20250822T171813Z.txt
├── repo_tree.txt
├── report_parts_support_bundle_20250823_132926_20250823_140612
│   └── manifest.json
├── report_top10_support_bundle_20250823_132926_20250823_140915
│   ├── manifest.json
│   ├── part-001.txt
│   ├── part-002.txt
│   ├── part-003.txt
│   ├── part-004.txt
│   ├── part-005.txt
│   ├── part-006.txt
│   ├── part-007.txt
│   ├── part-008.txt
│   ├── part-009.txt
│   └── part-010.txt
├── reports
│   └── .gitkeep
├── requirements.txt
├── ruff.toml
├── run_action_handler.py
├── scripts
│   ├── __init__.py
│   ├── __pycache__
│   ├── ci_local.sh
│   ├── ci_status.sh
│   ├── cov_focus_modules.py
│   ├── demo_offline.sh
│   ├── gen_coverage_badge.sh
│   ├── housekeeping.sh
│   ├── online_check.py
│   ├── oss_snapshot.sh
│   ├── run_pipeline.sh
│   ├── setup_env.sh
│   └── update_readme_badges.sh
├── send_with_attachment.py
├── send_with_attachment_shim.py
├── share
│   ├── CLEAN_TREE.txt
│   ├── dump_parts
│   ├── dump_parts_upload.tar.gz
│   ├── dump_parts_upload.zip
│   ├── export
│   ├── git_files.txt
│   ├── git_untracked.txt
│   ├── output
│   ├── tree_depth2.txt
│   ├── tree_depth3.txt
│   └── tree_full.txt
├── site
│   └── .gitkeep
├── spam
├── spam_filter.py
├── src
│   ├── __init__.py
│   ├── __pycache__
│   ├── action_handler.py
│   ├── ai_rpa
│   ├── classifier.py
│   ├── cli.py
│   ├── cli_spamcheck.py
│   ├── email_processor.py
│   ├── features
│   ├── inference_classifier.py
│   ├── init_db.py
│   ├── log_writer_db.py
│   ├── modules
│   ├── patches
│   ├── policy_engine
│   ├── policy_engine.py
│   ├── quotation.py
│   ├── run_action_handler.py
│   ├── scripts
│   ├── send_with_attachment.py
│   ├── send_with_attachment_shim.py
│   ├── sitecustomize.py
│   ├── sma
│   ├── smart_mail_agent
│   ├── smart_mail_agent.egg-info
│   ├── spam
│   ├── spam_filter.py
│   ├── stats_collector.py
│   └── utils
├── stats.db
├── support_bundle_20250823_132926
│   ├── repo-snapshot.tar.gz
│   ├── report.txt
│   └── tar_filelist.txt
├── support_tickets.db
├── tests
│   ├── .keep
│   ├── __init__.py
│   ├── __pycache__
│   ├── _ai_min_suite
│   ├── conftest.py
│   ├── contracts
│   ├── e2e
│   ├── integration
│   ├── mock_users.db-shm
│   ├── online
│   ├── policy
│   ├── portfolio
│   ├── sma
│   ├── smoke
│   ├── spam
│   ├── test_action_handler.py
│   ├── test_apply_diff.py
│   ├── test_classifier.py
│   ├── test_cli_spamcheck.py
│   ├── test_cli_version.py
│   ├── test_init_db.py
│   ├── test_init_emails_log_db.py
│   ├── test_init_processed_mails_db.py
│   ├── test_init_tickets_db.py
│   ├── test_mailer.py
│   ├── test_mailer_online.py
│   ├── test_quotation.py
│   ├── test_quote_logger.py
│   ├── test_sales_notifier.py
│   ├── test_send_with_attachment.py
│   ├── test_spam_filter.py
│   ├── test_stats_collector.py
│   └── unit
├── tmp_attachments
│   └── quote.txt
├── tmp_stats.db
├── tools
│   ├── dump_repo_into_10parts.py
│   ├── run_actions_matrix.py
│   └── safe_refactor.py
├── tox.ini
├── unshadow_and_fix.sh
├── update_quotation_shim_v2.sh
└── utils
    ├── __init__.py
    ├── __pycache__
    ├── mailer.py
    └── pdf_safe.py

103 directories, 224 files

=== test files list ===
tests/__init__.py
tests/_ai_min_suite/test_apply_diff_and_action_handler.py
tests/_ai_min_suite/test_inference_classifier.py
tests/_ai_min_suite/test_pdf_safe.py
tests/_ai_min_suite/test_run_action_handler_cli.py
tests/_ai_min_suite/test_send_with_attachment_shim.py
tests/_ai_min_suite/test_spam_cli.py
tests/conftest.py
tests/contracts/conftest.py
tests/contracts/test_action_result_contracts.py
tests/e2e/conftest.py
tests/e2e/test_actions_matrix_ext.py
tests/e2e/test_cli_flags.py
tests/e2e/test_cli_scripts.py
tests/e2e/test_complaint_policy.py
tests/e2e/test_label_routing_offline.py
tests/e2e/test_new_intents.py
tests/e2e/test_offline_suite.py
tests/e2e/test_policy_expansion.py
tests/e2e/test_runner.py
tests/e2e/test_sales_and_complaint.py
tests/e2e/test_sales_inquiry_needs_summary.py
tests/e2e/test_send_quote_degrade.py
tests/e2e/test_spam_pipeline.py
tests/integration/test_email_end_to_end_offline.py
tests/integration/test_online_send_paths.py
tests/online/test_smtp_send.py
tests/policy/test_attachment_risks_extra.py
tests/policy/test_attachment_risks_matrix.py
tests/portfolio/__init__.py
tests/portfolio/test_email_processor_utils.py
tests/portfolio/test_inference_classifier_fallback.py
tests/portfolio/test_log_writer.py
tests/portfolio/test_patches_router.py
tests/portfolio/test_pdf_safe.py
tests/portfolio/test_policy_engine_smoke.py
tests/portfolio/test_quotation_module.py
tests/portfolio/test_run_action_handler_cli_offline.py
tests/portfolio/test_send_with_attachment_shim.py
tests/portfolio/test_spam_cli_help.py
tests/portfolio/test_spam_orchestrator_smoke.py
tests/portfolio/test_spam_rules_scoring.py
tests/portfolio/test_support_ticket.py
tests/sma/test_features_apply_diff.py
tests/sma/test_features_quote_logger.py
tests/sma/test_features_sales_notifier.py
tests/sma/test_features_sales_quotation.py
tests/sma/test_inference_classifier.py
tests/sma/test_observability_log_writer.py
tests/sma/test_observability_stats_collector.py
tests/sma/test_observability_tracing.py
tests/sma/test_routing_action_handler.py
tests/sma/test_routing_run_action_handler.py
tests/sma/test_send_with_attachment_reexport.py
tests/sma/test_spam_filter_orchestrator.py
tests/sma/test_utils_jsonlog.py
tests/sma/test_utils_pdf_safe.py
tests/smoke/test_cli_help.py
tests/smoke/test_log_writer_import.py
tests/spam/test_offline_orchestrator_contracts.py
tests/spam/test_offline_orchestrator_e2e.py
tests/spam/test_offline_orchestrator_model_variants.py
tests/spam/test_offline_orchestrator_model_variants_extra.py
tests/spam/test_offline_orchestrator_paths.py
tests/spam/test_rule_model_tiebreak_offline.py
tests/spam/test_rules.py
tests/spam/test_rules_offline_behaviors.py
tests/test_action_handler.py
tests/test_apply_diff.py
tests/test_classifier.py
tests/test_cli_spamcheck.py
tests/test_cli_version.py
tests/test_init_db.py
tests/test_init_emails_log_db.py
tests/test_init_processed_mails_db.py
tests/test_init_tickets_db.py
tests/test_mailer.py
tests/test_mailer_online.py
tests/test_quotation.py
tests/test_quote_logger.py
tests/test_sales_notifier.py
tests/test_send_with_attachment.py
tests/test_spam_filter.py
tests/test_stats_collector.py
tests/unit/__init__.py
tests/unit/test_ai_rpa_min.py
tests/unit/test_classifier_rules_extra.py
tests/unit/test_classifier_shapes_and_rules.py
tests/unit/test_cli_orchestrator_offline.py
tests/unit/test_cli_sma_version.py
tests/unit/test_contracts.py
tests/unit/test_cov_anchor_modules.py
tests/unit/test_email_processor_order_extra.py
tests/unit/test_email_processor_smoke.py
tests/unit/test_handle_safe_patch_min.py
tests/unit/test_html_link_ratio_edges_new.py
tests/unit/test_html_link_ratio_more_edges.py
tests/unit/test_i18n_keywords_nfkc.py
tests/unit/test_i18n_nfkc_edges.py
tests/unit/test_inference_classifier_errors.py
tests/unit/test_legacy_imports.py
tests/unit/test_log_writer_db_smoke.py
tests/unit/test_logger_utils_smoke.py
tests/unit/test_modules_smoke_imports.py
tests/unit/test_pdf_generator_smoke.py
tests/unit/test_pdf_safe_extra.py
tests/unit/test_pdf_safe_more_ascii.py
tests/unit/test_pdf_safe_security_more.py
tests/unit/test_policy_engine.py
tests/unit/test_policy_minimal.py
tests/unit/test_quotation_big_attachment_edges.py
tests/unit/test_quotation_branch_matrix.py
tests/unit/test_quotation_branches.py
tests/unit/test_quotation_branches_extra.py
tests/unit/test_quotation_cli.py
tests/unit/test_quotation_cli_only.py
tests/unit/test_quotation_core.py
tests/unit/test_quotation_cov_extra.py
tests/unit/test_quotation_cov_extra2.py
tests/unit/test_quotation_full_coverage.py
tests/unit/test_quotation_more_edges.py
tests/unit/test_quotation_needs_manual_more.py
tests/unit/test_quotation_pdf_paths.py
tests/unit/test_quotation_pdf_smoke.py
tests/unit/test_rules_conf_suffix_reasons.py
tests/unit/test_run_action_handler_core.py
tests/unit/test_send_with_attachment_shim.py
tests/unit/test_send_with_attachment_shim_unit.py
tests/unit/test_send_with_attachment_smoke.py
tests/unit/test_sma_types_normalize_extra.py
tests/unit/test_spam_pipeline_smoke.py
tests/unit/test_spam_rules_min.py
tests/unit/test_spam_stack.py
tests/unit/test_tasks_minimal.py
tests/unit/test_templater_smoke.py
tests/unit/test_utils_pdf_safe_top.py

=== tests content (key files if present) ===
--- tests/e2e/test_cli_flags.py ---
from __future__ import annotations

import json
import os
import subprocess
import sys


def _run_cli(inp, outp, *extra):
    env = os.environ.copy()
    env.setdefault("OFFLINE", "1")
    cmd = [
        sys.executable,
        "-m",
        "src.run_action_handler",
        "--input",
        str(inp),
        "--output",
        str(outp),
        *extra,
    ]
    subprocess.run(cmd, check=True, env=env)


def test_dry_run_flag(tmp_path):
    i = tmp_path / "in.json"
    o = tmp_path / "out.json"
    i.write_text(
        json.dumps(
            {
                "subject": "請問服務內容？",
                "from": "a@b.c",
                "body": "想要了解細節",
                "predicted_label": "reply_faq",
                "confidence": 0.9,
                "attachments": [],
            },
            ensure_ascii=False,
        ),
        encoding="utf-8",
    )
    _run_cli(i, o, "--dry-run")
    d = json.loads(o.read_text(encoding="utf-8"))
    assert d.get("action_name") == "reply_faq"
    assert d.get("dry_run") is True


def test_simulate_pdf_failure(tmp_path):
    i = tmp_path / "in.json"
    o = tmp_path / "out.json"
    i.write_text(
        json.dumps(
            {
                "subject": "請報價",
                "from": "a@b.c",
                "body": "我要報價",
                "predicted_label": "send_quote",
                "confidence": 0.9,
                "attachments": [],
            },
            ensure_ascii=False,
        ),
        encoding="utf-8",
    )
    _run_cli(i, o, "--simulate-failure", "pdf")
    d = json.loads(o.read_text(encoding="utf-8"))
    assert d.get("action_name") == "send_quote"
    assert (
        "simulated_pdf_failure" in "|".join(d.get("warnings", []))
        or d.get("meta", {}).get("simulate_failure") == "pdf"
    )

--- tests/e2e/test_offline_suite.py ---
import importlib
import json
import os
import pathlib
import subprocess
import sys

ROOT = pathlib.Path(__file__).resolve().parents[2]  # 專案根目錄
SRC_DIR = ROOT / "src"


def _exists(p):
    return pathlib.Path(p).exists()


def _nonempty(p):
    return _exists(p) and pathlib.Path(p).stat().st_size > 0


def test_generate_quote_pdf(tmp_path):
    """
    符合你目前的簽名：
      generate_pdf_quote(out_dir: Optional[path|str]=None, *, package: Optional[str]=None, client_name: Optional[str]=None) -> str
    reportlab 缺/字型缺時，允許 .txt 保底。
    """
    os.environ["OFFLINE"] = "1"
    # 確保能 import smart_mail_agent.*
    if str(SRC_DIR) not in sys.path:
        sys.path.insert(0, str(SRC_DIR))

    mod = importlib.import_module(
        "modules.quotation"
        if (SRC_DIR / "modules" / "quotation.py").exists()
        else "src.modules.quotation"
    )
    fn = getattr(mod, "generate_pdf_quote", None)
    assert fn, "generate_pdf_quote missing"

    # 優先使用具名參數（符合你簽名），若舊行為只吃 out_dir 也能兼容
    try:
        rv = fn(out_dir=str(tmp_path), package="基礎", client_name="test@example.com")
    except TypeError:
        rv = fn(str(tmp_path))

    out_path = (
        pathlib.Path(rv)
        if isinstance(rv, (str | pathlib.Path))
        else tmp_path / "quote.pdf"
    )
    assert _nonempty(out_path), f"no output generated at {out_path}"
    assert out_path.suffix in {".pdf", ".txt"}, f"unexpected suffix: {out_path.suffix}"


def test_cli_smoke(tmp_path):
    """
    以 CLI 跑一趟 action handler（離線，不碰 API 金鑰）。
    run_action_handler 內部用 'python -m action_handler'，
    我們設定 PYTHONPATH=src，讓子程序找得到 action_handler。
    """
    env = os.environ.copy()
    env["OFFLINE"] = "1"
    # 讓子進程（python -m action_handler）找得到 src/*
    env["PYTHONPATH"] = str(SRC_DIR)

    in_json = tmp_path / "in.json"
    out_json = tmp_path / "out.json"

    # 提供最小可用 payload（action_handler 會自行決定動作）
    payload = {
        "subject": "請提供報價",
        "from": "alice@example.com",
        "body": "需要 quotation，請回覆細節與檔案",
    }
    in_json.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")

    # 用目前測試環境的 python 啟動 CLI（確保使用到 venv）
    cmd = [
        sys.executable,
        "-m",
        "src.run_action_handler",
        "--input",
        str(in_json),
        "--output",
        str(out_json),
    ]
    # 若你的包是以頂層 import（action_handler.py 在 src/），上面已設 PYTHONPATH，子程序會接手。
    subprocess.check_call(cmd, env=env)

    assert _nonempty(out_json), "CLI did not produce output JSON"
    # 能 parse 即可（內容格式依 action_handler 輸出，這裡不綁特定 schema）
    json.loads(out_json.read_text(encoding="utf-8"))

--- tests/e2e/test_policy_expansion.py ---
import json
import os
import pathlib
import subprocess
import sys

ROOT = pathlib.Path(__file__).resolve().parents[2]
PY = sys.executable


def run_cli(payload: dict, name: str) -> dict:
    in_p = ROOT / f"data/output/in_{name}.json"
    out_p = ROOT / f"data/output/out_{name}.json"
    in_p.parent.mkdir(parents=True, exist_ok=True)
    in_p.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")
    cmd = [
        PY,
        "-m",
        "src.run_action_handler",
        "--input",
        str(in_p),
        "--output",
        str(out_p),
    ]
    env = dict(os.environ)
    env["OFFLINE"] = "1"
    subprocess.run(cmd, cwd=str(ROOT), check=True, env=env)
    return json.loads(out_p.read_text(encoding="utf-8"))


def test_attachments_over_limit_requires_review():
    payload = {
        "subject": "一般詢問",
        "from": "user@somewhere.com",
        "body": "附件很多請協助查看。",
        "predicted_label": "reply_faq",
        "confidence": 0.9,
        "attachments": [{"filename": "a.bin", "size": 6 * 1024 * 1024}],
    }
    out = run_cli(payload, "overlimit")
    assert out["meta"].get("require_review") is True


def test_sender_domain_whitelist_flag():
    payload = {
        "subject": "一般詢問",
        "from": "alice@trusted.example",
        "body": "這是白名單寄件者。",
        "predicted_label": "reply_faq",
        "confidence": 0.9,
        "attachments": [],
    }
    out = run_cli(payload, "whitelist")
    assert out["meta"].get("whitelisted") is True

--- tests/e2e/test_new_intents.py ---
from __future__ import annotations

import json
import os
import pathlib
import subprocess
import sys


def _run_cli(inp, outp):
    env = os.environ.copy()
    env.setdefault("OFFLINE", "1")
    cmd = [
        sys.executable,
        "-m",
        "src.run_action_handler",
        "--input",
        str(inp),
        "--output",
        str(outp),
    ]
    subprocess.run(cmd, check=True, env=env)


def test_sales_inquiry(tmp_path):
    i = tmp_path / "in.json"
    o = tmp_path / "out.json"
    i.write_text(
        json.dumps(
            {
                "subject": "合作洽談",
                "from": "boss@example.com",
                "body": "想談合作與規格",
                "predicted_label": "sales_inquiry",
                "confidence": 0.9,
                "attachments": [],
            },
            ensure_ascii=False,
        ),
        encoding="utf-8",
    )
    _run_cli(i, o)
    d = json.loads(o.read_text(encoding="utf-8"))
    a = d.get("action_name") or d.get("action")
    assert a == "sales_inquiry"
    assert (d.get("subject") or "").startswith("[自動回覆]")
    assert pathlib.Path("data/leads/leads.csv").exists()


def test_complaint(tmp_path):
    i = tmp_path / "in.json"
    o = tmp_path / "out.json"
    i.write_text(
        json.dumps(
            {
                "subject": "我要投訴",
                "from": "user@example.com",
                "body": "服務很差！退貨退款！",
                "predicted_label": "complaint",
                "confidence": 0.95,
                "attachments": [],
            },
            ensure_ascii=False,
        ),
        encoding="utf-8",
    )
    _run_cli(i, o)
    d = json.loads(o.read_text(encoding="utf-8"))
    a = d.get("action_name") or d.get("action")
    assert a == "complaint"
    assert (d.get("subject") or "").startswith("[自動回覆]")
    assert pathlib.Path("data/complaints/log.csv").exists()

--- tests/e2e/test_sales_and_complaint.py ---
#!/usr/bin/env python3
from __future__ import annotations

import json
import os
import subprocess
import sys
from pathlib import Path

PY = sys.executable


def run_cli(inp: dict, workdir: Path) -> dict:
    in_p, out_p = workdir / "in.json", workdir / "out.json"
    in_p.write_text(json.dumps(inp, ensure_ascii=False), encoding="utf-8")
    env = os.environ.copy()
    env.setdefault("SMA_OFFLINE", "1")
    env.setdefault("SMA_DATA_DIR", str(workdir))
    cmd = [
        PY,
        "-m",
        "src.run_action_handler",
        "--input",
        str(in_p),
        "--output",
        str(out_p),
        "--dry-run",
    ]
    subprocess.run(cmd, check=True, env=env)
    return json.loads(out_p.read_text(encoding="utf-8"))


def test_e2e_sales_inquiry(tmp_path):
    res = run_cli(
        {
            "subject": "詢價",
            "from": "alice@partner.co",
            "body": "我們是XX股份有限公司，需要數量 50，預算 20000，期限 2025-09-01。",
            "predicted_label": "sales_inquiry",
            "confidence": 0.9,
        },
        tmp_path,
    )
    assert res["action_name"] == "sales_inquiry"
    assert res["subject"].startswith("[自動回覆] ")


def test_e2e_complaint_high(tmp_path):
    res = run_cli(
        {
            "subject": "嚴重投訴",
            "from": "bob@example.com",
            "body": "產品無法使用而且非常惡劣，要求退款，否則投訴到主管機關。",
            "predicted_label": "complaint",
            "confidence": 0.8,
        },
        tmp_path,
    )
    assert res["action_name"] == "complaint"
    assert res["meta"]["priority"] in {"P1", "P2", "P3"}

--- tests/e2e/test_sales_inquiry_needs_summary.py ---
import json
import os
import pathlib
import subprocess
import sys

ROOT = pathlib.Path(__file__).resolve().parents[2]
PY = sys.executable


def run_cli(payload: dict) -> dict:
    in_p = ROOT / "data/output/in_sales.json"
    out_p = ROOT / "data/output/out_sales.json"
    in_p.parent.mkdir(parents=True, exist_ok=True)
    in_p.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")
    cmd = [
        PY,
        "-m",
        "src.run_action_handler",
        "--input",
        str(in_p),
        "--output",
        str(out_p),
    ]
    env = dict(os.environ)
    env["OFFLINE"] = "1"
    subprocess.run(cmd, cwd=str(ROOT), check=True, env=env)
    return json.loads(out_p.read_text(encoding="utf-8"))


def test_sales_inquiry_generates_md_and_next_step():
    payload = {
        "subject": "合作報價與時程 2025-08-20",
        "from": "alice@biz.com",
        "body": "本公司偉大股份有限公司 需要 50 台 方案，預算 NTD 300,000，請於 2025/08/20 前回覆。",
        "predicted_label": "sales_inquiry",
        "confidence": 0.87,
        "attachments": [],
    }
    out = run_cli(payload)
    assert out["action_name"] == "sales_inquiry"
    names = [a["filename"] for a in out.get("attachments", [])]
    assert any(n.endswith(".md") and "needs_summary_" in n for n in names)
    assert out["meta"].get("next_step"), "meta.next_step 應存在"

--- tests/unit/test_send_with_attachment_shim_unit.py ---
import types, sys, importlib

def test_shim_delegates_to_impl(monkeypatch, tmp_path):
    sma = types.ModuleType("smart_mail_agent")
    ingestion = types.ModuleType("smart_mail_agent.ingestion")
    integrations = types.ModuleType("smart_mail_agent.ingestion.integrations")
    swa = types.ModuleType("smart_mail_agent.ingestion.integrations.send_with_attachment")

    calls = []
    def _impl(to, subject, body, file):
        calls.append((to, subject, body, file))
        return {"ok": True, "to": to, "file": file}

    swa.send_email_with_attachment = _impl
    integrations.send_with_attachment = swa

    monkeypatch.setitem(sys.modules, "smart_mail_agent", sma)
    monkeypatch.setitem(sys.modules, "smart_mail_agent.ingestion", ingestion)
    monkeypatch.setitem(sys.modules, "smart_mail_agent.ingestion.integrations", integrations)
    monkeypatch.setitem(sys.modules, "smart_mail_agent.ingestion.integrations.send_with_attachment", swa)

    shim = importlib.import_module("send_with_attachment")
    out = shim.send_email_with_attachment("x@y", "s", "b", str(tmp_path/"f.txt"))
    assert out["ok"] is True
    assert calls and calls[0][0] == "x@y"

--- tests/sma/test_routing_run_action_handler.py ---
import json, sys
from pathlib import Path
import importlib
run = importlib.import_module("smart_mail_agent.routing.run_action_handler")

def test_risk_helpers():
    # 副檔名與 MIME 檢查
    att = {"filename":"report.xlsm.exe", "mime":"application/pdf", "size":6*1024*1024}
    rs = run._attachment_risks(att)
    assert "attach:double_ext" in rs and "attach:too_large" in rs
    # MIME 不符
    att2 = {"filename":"a.pdf", "mime":"text/plain", "size":10}
    assert "attach:mime_mismatch" in run._attachment_risks(att2)

def test_cli_stdin_and_flags(tmp_path, monkeypatch, capsys):
    payload = {"predicted_label":"send_quote","subject":"x","body":"y","attachments":[{"filename":"a.pdf","mime":"application/pdf","size":10}]}
    # 走 stdin 讀取
    monkeypatch.setattr(sys, "stdin", type("S",(),{"read":lambda self=None: json.dumps(payload)})())
    argv = ["--dry-run","--simulate-failure","--out",str(tmp_path/"o.json")]
    rc = run.main(argv)
    assert rc==0
    outp = tmp_path/"o.json"
    assert outp.exists()
    data = json.loads(outp.read_text(encoding="utf-8"))
    assert data["meta"]["dry_run"] and data["meta"]["require_review"]

--- tests/sma/test_utils_pdf_safe.py ---
from pathlib import Path
import importlib
pdfs = importlib.import_module("smart_mail_agent.utils.pdf_safe")

def test_write_pdf_or_txt_pdf(tmp_path):
    p = pdfs.write_pdf_or_txt(["Hi","There"], tmp_path, "報價 單")
    assert Path(p).exists() and Path(p).suffix in (".pdf",".txt")

def test_write_pdf_or_txt_txt_fallback(tmp_path, monkeypatch):
    monkeypatch.setattr(pdfs, "_write_minimal_pdf", lambda lines, path: (_ for _ in ()).throw(RuntimeError("x")))
    p = pdfs.write_pdf_or_txt(["A"], tmp_path, "quote")
    assert Path(p).exists() and Path(p).suffix==".txt"

--- tests/sma/test_inference_classifier.py ---
import importlib
ic = importlib.import_module("smart_mail_agent.inference_classifier")

def test_smart_truncate():
    assert ic.smart_truncate("abc", 2).endswith("...")

def test_classify_intent_unknown_when_no_model():
    r = ic.classify_intent("x","y")
    assert r["label"] in ("unknown","other","sales_inquiry","complaint")

def test_classify_intent_with_keywords(monkeypatch):
    monkeypatch.setattr(ic, "load_model", lambda: object())
    r = ic.classify_intent("我要報價", "")
    assert r["label"]=="sales_inquiry"
    r2 = ic.classify_intent("退款", "")
    assert r2["label"]=="complaint"

--- tests/portfolio/test_run_action_handler_cli_offline.py ---
import json
import pathlib
import subprocess
import sys
import tempfile

ROOT = pathlib.Path(__file__).resolve().parents[2]


def _run_cli(payload: dict, *flags: str):
    with tempfile.TemporaryDirectory() as td:
        inp = pathlib.Path(td) / "in.json"
        out = pathlib.Path(td) / "out.json"
        inp.write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")
        cmd = [
            sys.executable,
            str(ROOT / "src" / "run_action_handler.py"),
            "--input",
            str(inp),
            "--output",
            str(out),
            *flags,
        ]
        r = subprocess.run(cmd, capture_output=True, text=True)
        assert r.returncode == 0, (r.stdout, r.stderr)
        return json.loads(out.read_text(encoding="utf-8"))


def test_send_quote_simulate_failure_and_require_review():
    payload = {
        "predicted_label": "send_quote",
        "from": "Alice <a@trusted.example>",
        "subject": "大檔案請協助",
        "body": "如題，附件很大",
        "attachments": [{"filename": "big.bin", "size": 6 * 1024 * 1024}],
    }
    out = _run_cli(payload, "--dry-run", "--simulate-failure")
    assert out["action_name"] == "send_quote"
    assert any(a["filename"].endswith(".txt") for a in out["attachments"])

    m = out["meta"]
    assert m.get("require_review") is True
    assert m.get("dry_run") is True
    # 有些路徑不填 whitelisted；允許 None/True，但需有 cc 安全副本
    assert m.get("whitelisted") in (True, None)
    assert "support@company.example" in m.get("cc", [])


def test_complaint_p1_path():
    payload = {
        "predicted_label": "complaint",
        "subject": "系統宕機",
        "body": "嚴重 無法使用",
    }
    out = _run_cli(payload, "--dry-run")
    assert out["action_name"] == "complaint"
    m = out["meta"]
    assert m.get("priority") in ("P1", "p1")
    assert m.get("SLA_eta") in ("4h", "4H", "4小時")

--- tests/test_cli_spamcheck.py ---
import json
import subprocess
import sys


def run(subject, content, sender):
    out = subprocess.check_output(
        [
            sys.executable,
            "-m",
            "src.smart_mail_agent.cli_spamcheck",
            "--subject",
            subject,
            "--content",
            content,
            "--sender",
            sender,
        ],
        text=True,
    )
    return json.loads(out)


def test_spam_sample():
    res = run(
        "FREE bonus!!! Limited offer",
        "Click https://bit.ly/abc now to claim $100 USD",
        "promo@example.com",
    )
    assert res["is_spam"] is True
    assert res["score"] >= 0.6  # 目前是 0.68，留一點彈性


def test_ham_sample():
    res = run(
        "會議紀要", "附件為今天會議紀要與行動項，請查收。", "colleague@yourcompany.com"
    )
    assert res["is_spam"] is False
    assert res["score"] < 0.5


# --- extra edge cases ---
def test_zh_keywords_with_shortlink_spam():
    res = run("限時優惠", "免費加碼，詳見 https://t.co/xyz", "promo@x.com")
    assert res["is_spam"] is True
    assert res["score"] >= 0.6


def test_mixed_case_spam_words():
    res = run("FREE ViAgRa deal", "see tinyurl.com/xxx", "spam@x.com")
    assert res["is_spam"] is True
    assert res["score"] >= 0.6


def test_empty_subject_or_content_is_ham():
    res = run("", "", "someone@x.com")
    assert res["is_spam"] is False
    assert res["score"] < 0.5


def test_benign_offer_word_only_is_ham():
    # 僅含單字「offer」但無連結/金額，應低分且非垃圾
    res = run(
        "We offer to help with docs",
        "Let's review the draft tomorrow.",
        "colleague@x.com",
    )
    assert res["is_spam"] is False
    assert res["score"] < 0.5


def test_threshold_flag_overrides_env():
    out = subprocess.check_output(
        [
            sys.executable,
            "-m",
            "src.smart_mail_agent.cli_spamcheck",
            "--subject",
            "FREE",
            "--content",
            "visit http://x",
            "--sender",
            "s@x.com",
            "--threshold",
            "0.99",
        ],
        text=True,
    )
    res = json.loads(out)
    # 0.99 幾乎一定比任何啟發式分數高，因此應為非垃圾
    assert res["is_spam"] is False


def test_explain_flag_includes_reasons():
    out = subprocess.check_output(
        [
            sys.executable,
            "-m",
            "src.smart_mail_agent.cli_spamcheck",
            "--subject",
            "FREE bonus",
            "--content",
            "see tinyurl.com/a",
            "--sender",
            "s@x.com",
            "--explain",
        ],
        text=True,
    )
    res = json.loads(out)
    assert isinstance(res.get("explain"), list) and len(res["explain"]) >= 1

--- tests/test_apply_diff.py ---
# tests/test_apply_diff.py
# 單元測試模組：apply_diff.py
# 測試目標：update_user_info() 函式，能正確比對使用者資料異動並更新 DB + diff_log

import sqlite3
from pathlib import Path

import pytest

from modules.apply_diff import update_user_info

TEST_DB = "tests/mock_users.db"


@pytest.fixture(scope="module", autouse=True)
def setup_mock_db():
    Path("tests").mkdir(exist_ok=True)
    conn = sqlite3.connect(TEST_DB)
    cursor = conn.cursor()

    # 建立使用者資料表與 diff_log
    cursor.executescript(
        """
        CREATE TABLE IF NOT EXISTS users (
            email TEXT PRIMARY KEY,
            phone TEXT,
            address TEXT
        );
        CREATE TABLE IF NOT EXISTS diff_log (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT,
            欄位 TEXT,
            原值 TEXT,
            新值 TEXT,
            created_at TEXT
        );
    """
    )

    cursor.execute(
        """
        INSERT OR REPLACE INTO users (email, phone, address)
        VALUES ('user@example.com', '0912345678', '台北市信義區')
    """
    )

    conn.commit()
    conn.close()
    yield
    Path(TEST_DB).unlink(missing_ok=True)


def test_update_with_changes():
    content = "電話: 0987654321\n地址: 新北市板橋區"
    result = update_user_info("user@example.com", content, db_path=TEST_DB)
    assert result["status"] == "updated"
    assert "phone" in result["changes"]
    assert "address" in result["changes"]


def test_update_with_no_change():
    content = "電話: 0987654321\n地址: 新北市板橋區"
    result = update_user_info("user@example.com", content, db_path=TEST_DB)
    assert result["status"] == "no_change"


def test_update_partial_change():
    # 僅變更地址
    content = "地址: 桃園市中壢區"
    result = update_user_info("user@example.com", content, db_path=TEST_DB)
    assert result["status"] == "updated"
    assert "address" in result["changes"]


def test_empty_content():
    result = update_user_info("user@example.com", "", db_path=TEST_DB)
    assert result["status"] == "no_change"


def test_user_not_found():
    content = "電話: 0911111111\n地址: 新北市中和區"
    result = update_user_info("notfound@example.com", content, db_path=TEST_DB)
    assert result["status"] == "not_found"

--- tests/test_action_handler.py ---
#!/usr/bin/env python3
# 檔案位置：tests/test_action_handler.py
# 測試用途：驗證六大分類動作決策、附件產出、離線不寄信。

from __future__ import annotations

import importlib
import os
from pathlib import Path

os.environ["OFFLINE"] = "1"
os.environ.setdefault("SMTP_FROM", "noreply@example.com")

ah = importlib.import_module("action_handler")

SAMPLE = {
    "subject": "測試主旨",
    "content": "測試內容",
    "sender": "user@example.com",
    "confidence": 0.9,
}


def _run(label: str):
    payload = dict(SAMPLE)
    payload["predicted_label"] = label
    return ah.handle(payload)


def test_support():
    r = _run("請求技術支援")
    assert r["ok"] is True and r["action_name"] == "reply_support"
    assert "[支援回覆]" in r["subject"]


def test_info_change():
    r = _run("申請修改資訊")
    assert r["ok"] is True and r["action_name"] == "apply_info_change"
    assert "[資料更新受理]" in r["subject"]


def test_faq():
    r = _run("詢問流程或規則")
    assert r["ok"] is True and r["action_name"] == "reply_faq"
    assert "[流程說明]" in r["subject"]


def test_apology():
    r = _run("投訴與抱怨")
    assert r["ok"] is True and r["action_name"] == "reply_apology"
    assert "[致歉回覆]" in r["subject"]


def test_quote_with_attachment():
    r = _run("業務接洽或報價")
    assert r["ok"] is True and r["action_name"] == "send_quote"
    assert "[報價]" in r["subject"]
    assert "attachments" in r and len(r["attachments"]) >= 1
    for p in r["attachments"]:
        assert Path(p).exists()


def test_other_fallback():
    r = _run("其他")
    assert r["ok"] is True and r["action_name"] == "reply_general"
    assert "[自動回覆]" in r["subject"]


def test_unknown_label_as_general():
    r = _run("未定義標籤")
    assert r["ok"] is True and r["action_name"] == "reply_general"

