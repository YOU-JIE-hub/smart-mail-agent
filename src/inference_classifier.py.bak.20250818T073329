#!/usr/bin/env python3
# 檔案位置: src/inference_classifier.py
# 模組用途: 提供離線安全且不依賴 torch 的意圖分類入口，供 ingestion/email_processor 等模組呼叫。
# 說明:
# - 舊版會從 smart_mail_agent.features.spam.inference_classifier 匯入並依賴 torch，於離線未裝 torch 時在 import 階段失敗。
# - 本模組提供相同介面 classify_intent(subject, content) 並以關鍵字啟發式分類，確保單元測試與合約測試在 OFFLINE=1 下穩定。
from __future__ import annotations

from dataclasses import dataclass
from typing import Dict, Tuple


__all__ = ["classify_intent"]

@dataclass(frozen=True)
class IntentResult:
    label: str
    confidence: float
    reason: str


# 六大類別對應的關鍵字集合（可依實際語料擴充）
_BUCKETS: Dict[str, Tuple[str, ...]] = {
    "technical_support": (
        "退款", "退貨", "瑕疵", "故障", "維修", "錯誤", "帳號", "登入", "密碼", "bug", "error", "無法",
    ),
    "information_modification": (
        "修改", "變更", "更換", "資料更新", "更正", "更新資料", "更改",
    ),
    "process_inquiry": (
        "流程", "規則", "辦理", "申請", "步驟", "方法", "怎麼", "如何", "期限", "辦法",
    ),
    "complaint": (
        "客訴", "抱怨", "不滿", "無法接受", "投訴", "申訴", "太慢", "差勁",
    ),
    "business_inquiry": (
        "報價", "詢問", "合作", "採購", "報價單", "試用", "PO", "商務", "合作邀約",
    ),
    "others": tuple(),
}


def _normalize_text(s: str) -> str:
    return (s or "").strip().lower()


def _score(subject: str, content: str) -> IntentResult:
    text = f"{_normalize_text(subject)}\n{_normalize_text(content)}"
    best_label = "others"
    best_hits = 0
    hit_reasons = []

    for label, kws in _BUCKETS.items():
        if not kws:
            continue
        hits = [kw for kw in kws if kw.lower() in text]
        if len(hits) > best_hits:
            best_label = label
            best_hits = len(hits)
            hit_reasons = hits

    if best_label == "others":
        # 無匹配：給中性低信心
        return IntentResult(label="others", confidence=0.34, reason="no strong keyword match")

    # 根據命中數給一個合理信心區間
    if best_hits >= 3:

bash -Eeuo pipefail <<'SH'
trap 'ec=$?; echo "[FAIL] line $LINENO exit $ec"; exit $ec' ERR

ROOT="${ROOT:-/home/youjie/projects/smart-mail-agent}"
cd "$ROOT"
[ -x .venv/bin/activate ] && . .venv/bin/activate || true
export PYTHONPATH="$ROOT/src:$ROOT"

# 1) 覆寫 src/inference_classifier.py 為純 Python、離線安全版本
install -d src
cat > src/inference_classifier.py <<'PY'
#!/usr/bin/env python3
# 檔案位置: src/inference_classifier.py
# 模組用途: 提供離線安全且不依賴 torch 的意圖分類入口，供 ingestion/email_processor 等模組呼叫。
# 說明:
# - 舊版會從 smart_mail_agent.features.spam.inference_classifier 匯入並依賴 torch，於離線未裝 torch 時在 import 階段失敗。
# - 本模組提供相同介面 classify_intent(subject, content) 並以關鍵字啟發式分類，確保單元測試與合約測試在 OFFLINE=1 下穩定。
from __future__ import annotations

from dataclasses import dataclass
from typing import Dict, Tuple


__all__ = ["classify_intent"]

@dataclass(frozen=True)
class IntentResult:
    label: str
    confidence: float
    reason: str


# 六大類別對應的關鍵字集合（可依實際語料擴充）
_BUCKETS: Dict[str, Tuple[str, ...]] = {
    "technical_support": (
        "退款", "退貨", "瑕疵", "故障", "維修", "錯誤", "帳號", "登入", "密碼", "bug", "error", "無法",
    ),
    "information_modification": (
        "修改", "變更", "更換", "資料更新", "更正", "更新資料", "更改",
    ),
    "process_inquiry": (
        "流程", "規則", "辦理", "申請", "步驟", "方法", "怎麼", "如何", "期限", "辦法",
    ),
    "complaint": (
        "客訴", "抱怨", "不滿", "無法接受", "投訴", "申訴", "太慢", "差勁",
    ),
    "business_inquiry": (
        "報價", "詢問", "合作", "採購", "報價單", "試用", "PO", "商務", "合作邀約",
    ),
    "others": tuple(),
}


def _normalize_text(s: str) -> str:
    return (s or "").strip().lower()


def _score(subject: str, content: str) -> IntentResult:
    text = f"{_normalize_text(subject)}\n{_normalize_text(content)}"
    best_label = "others"
    best_hits = 0
    hit_reasons = []

    for label, kws in _BUCKETS.items():
        if not kws:
            continue
        hits = [kw for kw in kws if kw.lower() in text]
        if len(hits) > best_hits:
            best_label = label
            best_hits = len(hits)
            hit_reasons = hits

    if best_label == "others":
        # 無匹配：給中性低信心
        return IntentResult(label="others", confidence=0.34, reason="no strong keyword match")

    # 根據命中數給一個合理信心區間
    if best_hits >= 3:
        conf = 0.92
    elif best_hits == 2:
        conf = 0.82
    else:
        conf = 0.7
    return IntentResult(label=best_label, confidence=conf, reason=f"keywords={','.join(hit_reasons)}")


def classify_intent(subject: str, content: str) -> dict:
    """
    依主旨與內文回傳分類結果。

    參數:
        subject: 郵件主旨
        content: 郵件內文（可含 HTML/純文字）

    回傳:
        dict，至少包含:
            - label: 六類之一（technical_support / information_modification / process_inquiry / complaint / business_inquiry / others）
            - confidence: 0~1 之間的信心值
            - reason: 簡單可解釋原因（如命中的關鍵字）

    例外:
        若 subject 與 content 皆空，拋出 ValueError（便於單元測試檢查錯誤分支）
    """
    if not (subject or content):
        raise ValueError("empty subject and content")

    res = _score(subject, content)
    return {"label": res.label, "confidence": float(res.confidence), "reason": res.reason}
