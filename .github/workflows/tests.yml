name: tests
on:
  push:
    branches: [ "main", "cleanup/**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install ruff & pre-commit (no fail on hooks)
        run: |
          python -m pip install -U pip
          python -m pip install ruff pre-commit
      - name: Ruff check
        run: ruff check .
      - name: Ruff format --check
        run: ruff format --check .

  unit_contracts_fast:
    name: unit & contracts (fast)
    runs-on: ubuntu-latest
    needs: [lint]
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install (editable + dev)
        run: |
          python -m pip install -U pip
          python -m pip install -e ".[dev]"
          # 若有 requirements.txt 就裝一下，沒有也不報錯
          python - <<'PY'
          import os, subprocess, sys
          if os.path.exists("requirements.txt"):
              sys.exit(subprocess.call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]))
          PY
      - name: Sanity dump
        run: |
          python -c "import sys, pathlib; print('PY:',sys.version); print('PYTHONPATH=',repr(str(pathlib.Path.cwd())))"
          python - <<'PY'
          import importlib, pkgutil
          import smart_mail_agent as s
          print("smart_mail_agent:", getattr(s,"__version__", "(n/a)"))
          print("has compat src.spam? ", bool(pkgutil.find_loader("src.spam")))
          PY
      - name: Run unit & contracts
        run: |
          pytest tests/unit tests/contracts -q

  offline_all:
    name: offline e2e+unit
    runs-on: ubuntu-latest
    needs: [unit_contracts_fast]
    env:
      PYTHONPATH: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install (editable + dev)
        run: |
          python -m pip install -U pip
          python -m pip install -e ".[dev]"
          python - <<'PY'
          import os, subprocess, sys
          if os.path.exists("requirements.txt"):
              sys.exit(subprocess.call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"]))
          PY
      - name: Run all offline tests
        run: |
          pytest tests -k "not online" -q
