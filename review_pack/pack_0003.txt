================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/cli_spamcheck.py  (1923 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import argparse
     4: import json
     5: 
     6: 
     7: def _heuristic_spam_score(text: str) -> float:
     8:     if not text:
     9:         return 0.0
    10:     lowers = text.lower()
    11:     kws = [
    12:         "free",
    13:         "winner",
    14:         "bitcoin",
    15:         "viagra",
    16:         "casino",
    17:         "loan",
    18:         "credit",
    19:         "limited time",
    20:         "act now",
    21:         "click here",
    22:         "http://",
    23:         "https://",
    24:         "獎",
    25:         "中獎",
    26:         "免費",
    27:         "限時",
    28:         "點擊",
    29:         "投資",
    30:         "加密",
    31:         "博彩",
    32:     ]
    33:     score = 0.0
    34:     for k in kws:
    35:         if k in lowers:
    36:             score += 0.08
    37:     if "http://" in lowers or "https://" in lowers:
    38:         score += 0.10
    39:     return min(score, 0.99)
    40: 
    41: 
    42: def _classify(subject: str, content: str, sender: str | None = None) -> dict:
    43:     text = f"{subject}\n{content}\n{sender or ''}"
    44:     score = _heuristic_spam_score(text)
    45:     return {
    46:         "subject": subject,
    47:         "sender": sender,
    48:         "score": round(score, 2),
    49:         "is_spam": score >= 0.5,
    50:         "engine": "heuristic-v0",
    51:     }
    52: 
    53: 
    54: def main(argv: list[str] | None = None) -> int:
    55:     ap = argparse.ArgumentParser(
    56:         prog="sma-spamcheck",
    57:         description="垃圾信偵測（輕量 CLI 包裝器，可替換為正式 orchestrator）",
    58:     )
    59:     ap.add_argument("--subject", required=True)
    60:     ap.add_argument("--content", required=True)
    61:     ap.add_argument("--sender")
    62:     ap.add_argument("--json", action="store_true", help="輸出 JSON（預設為人讀格式）")
    63:     args = ap.parse_args(argv)
    64: 
    65:     res = _classify(args.subject, args.content, args.sender)
    66:     if args.json:
    67:         print(json.dumps(res, ensure_ascii=False))
    68:     else:
    69:         print(f"subject={res['subject']!r} sender={res['sender']!r} " f"is_spam={res['is_spam']} score={res['score']} engine={res['engine']}")
    70:     return 0
    71: 
    72: 
    73: if __name__ == "__main__":
    74:     raise SystemExit(main())
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/cli_spamcheck.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/feature_extractor.py  (1218 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/spam/feature_extractor.py
     3: # 模組用途：從原始 Email 字串中擷取關鍵特徵，用於垃圾郵件判斷（供 ML 模型使用）
     4: 
     5: import re
     6: from email import message_from_string
     7: 
     8: 
     9: def extract_features(raw_email: str) -> dict[str, int]:
    10:     """
    11:     從原始 Email 內文中抽取特徵向量，用於垃圾郵件偵測模型。
    12: 
    13:     參數:
    14:         raw_email (str): 原始 email 字串（含標頭與主體）
    15: 
    16:     回傳:
    17:         dict: 包含以下欄位的特徵向量：
    18:             - subject_len (int): 主旨長度
    19:             - num_urls (int): URL 出現次數
    20:             - has_attachment (int): 是否含非純文字附件（1/0）
    21:             - num_recipients (int): 收件人數量（To + Cc）
    22:     """
    23:     msg = message_from_string(raw_email)
    24: 
    25:     subject = msg.get("Subject", "") or ""
    26:     to_list = msg.get_all("To", []) or []
    27:     cc_list = msg.get_all("Cc", []) or []
    28: 
    29:     features = {
    30:         "subject_len": len(subject),
    31:         "num_urls": len(re.findall(r"https?://", raw_email)),
    32:         "has_attachment": int(msg.get_content_maintype() not in ["text", "multipart"]),
    33:         "num_recipients": len(to_list + cc_list),
    34:     }
    35: 
    36:     return features
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/feature_extractor.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/ml_spam_classifier.py  (2529 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # mypy: ignore-errors
     3: # 檔案位置：src/spam/ml_spam_classifier.py
     4: # 模組用途：使用 fine-tuned BERT 模型進行垃圾郵件分類預測
     5: 
     6: import torch
     7: from transformers import (
     8:     AutoModelForSequenceClassification,
     9:     AutoTokenizer,
    10:     TextClassificationPipeline,
    11: )
    12: 
    13: from utils.logger import logger
    14: 
    15: 
    16: def smart_truncate(text: str, max_chars: int = 1000) -> str:
    17:     """
    18:     對長文本進行三段式裁切：保留前段、中段、尾段內容，確保語意不中斷。
    19: 
    20:     :param text: 原始文本
    21:     :param max_chars: 限制總長度
    22:     :return: 裁切後文本
    23:     """
    24:     if len(text) <= max_chars:
    25:         return text
    26:     head = text[: int(max_chars * 0.4)]
    27:     mid_start = int(len(text) / 2 - max_chars * 0.15)
    28:     mid_end = int(len(text) / 2 + max_chars * 0.15)
    29:     middle = text[mid_start:mid_end]
    30:     tail = text[-int(max_chars * 0.3) :]
    31:     return head + "\n...\n" + middle + "\n...\n" + tail
    32: 
    33: 
    34: class SpamBertClassifier:
    35:     """
    36:     使用 HuggingFace Transformers 微調模型進行 spam/ham 分類
    37:     """
    38: 
    39:     def __init__(self, model_path: str):
    40:         device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    41:         logger.info(f"[SpamBertClassifier] 載入 BERT 模型：{model_path}")
    42:         self.tokenizer = AutoTokenizer.from_pretrained(model_path)
    43:         self.model = AutoModelForSequenceClassification.from_pretrained(model_path).to(device)
    44:         self.pipeline = TextClassificationPipeline(
    45:             model=self.model,
    46:             tokenizer=self.tokenizer,
    47:             device=0 if device.type == "cuda" else -1,
    48:             top_k=None,
    49:         )
    50: 
    51:     def predict(self, subject: str, content: str) -> dict:
    52:         """
    53:         執行垃圾信預測分類
    54: 
    55:         :param subject: 信件主旨
    56:         :param content: 信件內容
    57:         :return: dict 包含 label 與 confidence
    58:         """
    59:         text = smart_truncate(f"{subject.strip()}\n{content.strip()}", max_chars=1000)
    60: 
    61:         try:
    62:             preds = self.pipeline(text)[0]
    63:             preds = sorted(preds, key=lambda x: x["score"], reverse=True)
    64:             pred_label = preds[0]["label"]
    65:             confidence = round(preds[0]["score"], 4)
    66:             logger.debug(f"[SpamBertClassifier] 預測結果：{pred_label} (信心值：{confidence})")
    67:             return {"label": pred_label, "confidence": confidence}
    68:         except Exception as e:
    69:             logger.error(f"[SpamBertClassifier] 預測失敗：{str(e)}")
    70:             return {"label": "unknown", "confidence": 0.0}
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/ml_spam_classifier.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/pipeline.py  (503 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: from typing import Any
     4: 
     5: from .rules import label_email
     6: 
     7: 
     8: def analyze(email: dict[str, Any]) -> dict[str, Any]:
     9:     sender = email.get("sender", "") or ""
    10:     subject = email.get("subject", "") or ""
    11:     content = email.get("content", "") or ""
    12:     attachments = email.get("attachments") or []
    13:     label, score, reasons = label_email(sender, subject, content, attachments)
    14:     return {"label": label, "score": int(score), "reasons": list(reasons), "subject": subject}
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/pipeline.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/rule_filter.py  (2643 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/spam/rule_filter.py
     3: # 模組用途：使用靜態規則（關鍵字、黑名單、樣式）偵測垃圾郵件內容
     4: 
     5: import re
     6: 
     7: from utils.logger import logger
     8: 
     9: 
    10: class RuleBasedSpamFilter:
    11:     """
    12:     規則式垃圾信過濾器：透過關鍵字、黑名單網域、常見連結樣式進行 spam 偵測。
    13:     """
    14: 
    15:     def __init__(self):
    16:         # 黑名單網域（若 email 內容包含此網址，視為 spam）
    17:         self.blacklist_domains = ["xxx.com", "freemoney.cn", "spamlink.net"]
    18: 
    19:         # 可疑 spam 關鍵字（不區分大小寫）
    20:         self.suspicious_keywords = [
    21:             "裸聊",
    22:             "中獎",
    23:             "限時優惠",
    24:             "點我加入",
    25:             "免費試用",
    26:             "現金回饋",
    27:             "賺錢",
    28:             "投資機會",
    29:             "line加好友",
    30:             "情色",
    31:             "財務自由",
    32:             "送你",
    33:             "簡單賺錢",
    34:         ]
    35: 
    36:         # 常見 spam 連結樣式（正規表達式）
    37:         self.patterns = [
    38:             re.compile(r"https?://[^\s]*\.xxx\.com", re.IGNORECASE),
    39:             re.compile(r"line\s*[:：]?\s*[\w\-]+", re.IGNORECASE),
    40:         ]
    41:         # [SMA] 強化高風險關鍵字
    42:         try:
    43:             self.keywords.extend(
    44:                 [
    45:                     "免費中獎",
    46:                     "中獎",
    47:                     "點此領獎",
    48:                     "領獎",
    49:                     "百萬",
    50:                     "點擊領取",
    51:                     "刷卡驗證",
    52:                     "帳號異常",
    53:                     "快速致富",
    54:                     "投資保證獲利",
    55:                 ]
    56:             )
    57:         except Exception:
    58:             pass
    59: 
    60:     def is_spam(self, text: str) -> bool:
    61:         """
    62:         判斷文字是否為垃圾信件內容。
    63: 
    64:         :param text: 信件主旨與內容合併後的純文字
    65:         :return: bool - 是否為 spam
    66:         """
    67:         text = text.lower()
    68:         logger.debug("[RuleBasedSpamFilter] 進行規則式 Spam 檢查")
    69: 
    70:         for kw in self.suspicious_keywords:
    71:             if kw in text:
    72:                 logger.info(f"[RuleBasedSpamFilter] 偵測關鍵字：{kw}")
    73:                 return True
    74: 
    75:         for domain in self.blacklist_domains:
    76:             if domain in text:
    77:                 logger.info(f"[RuleBasedSpamFilter] 偵測黑名單網址：{domain}")
    78:                 return True
    79: 
    80:         for pattern in self.patterns:
    81:             if pattern.search(text):
    82:                 logger.info(f"[RuleBasedSpamFilter] 偵測樣式：{pattern.pattern}")
    83:                 return True
    84: 
    85:         return False
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/rule_filter.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/rules.py  (4321 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: import re
     5: from pathlib import Path
     6: from typing import Any
     7: 
     8: try:
     9:     import yaml  # type: ignore
    10: except Exception:
    11:     yaml = None
    12: 
    13: CONF_PATH = Path(__file__).resolve().parents[2] / "configs" / "spam_rules.yaml"
    14: _CACHE = {"mtime": None, "rules": None}
    15: 
    16: _URL_RE = re.compile(r"https?://[^\s)>\]]+", re.I)
    17: 
    18: 
    19: def _default_rules() -> dict[str, Any]:
    20:     # 與預設 YAML 對齊
    21:     return {
    22:         "keywords": {
    23:             "GET RICH QUICK": 6,
    24:             "FREE": 2,
    25:             "GIVEAWAY": 3,
    26:             "CRYPTO": 2,
    27:             "PASSWORD RESET": 2,
    28:             "VERIFY YOUR ACCOUNT": 3,
    29:             "URGENT": 2,
    30:         },
    31:         "suspicious_domains": ["bit.ly", "tinyurl.com", "goo.gl", "is.gd", "t.co"],
    32:         "suspicious_tlds": ["tk", "gq", "ml", "cf", "ga", "top"],
    33:         "bad_extensions": [".js", ".vbs", ".exe", ".bat", ".cmd", ".scr"],
    34:         "whitelist_domains": ["yourcompany.com", "example.com"],
    35:         "weights": {
    36:             "url_suspicious": 4,
    37:             "tld_suspicious": 3,
    38:             "attachment_executable": 5,
    39:             "sender_black": 5,
    40:         },
    41:         "thresholds": {"suspect": 4, "spam": 8},
    42:     }
    43: 
    44: 
    45: def _load_yaml_or_json(text: str) -> dict[str, Any]:
    46:     if yaml is not None:
    47:         try:
    48:             return yaml.safe_load(text) or {}
    49:         except Exception:
    50:             pass
    51:     # JSON 兼容
    52:     return json.loads(text)
    53: 
    54: 
    55: def load_rules(force: bool = False) -> dict[str, Any]:
    56:     """熱重載：檔案 mtime 變動即重新載入。"""
    57:     try:
    58:         mtime = CONF_PATH.stat().st_mtime
    59:         if force or _CACHE["rules"] is None or _CACHE["mtime"] != mtime:
    60:             data = _load_yaml_or_json(CONF_PATH.read_text(encoding="utf-8"))
    61:             if not isinstance(data, dict) or not data:
    62:                 data = _default_rules()
    63:             _CACHE["rules"] = data
    64:             _CACHE["mtime"] = mtime
    65:     except FileNotFoundError:
    66:         _CACHE["rules"] = _default_rules()
    67:         _CACHE["mtime"] = None
    68:     return _CACHE["rules"]  # type: ignore[return-value]
    69: 
    70: 
    71: def score_email(sender: str, subject: str, content: str, attachments: list[str]) -> tuple[int, list[str]]:
    72:     r = load_rules()
    73:     score = 0
    74:     reasons: list[str] = []
    75: 
    76:     sender = (sender or "").strip().lower()
    77:     subject_u = (subject or "").upper()
    78:     content_u = (content or "").upper()
    79: 
    80:     # 1) 白名單網域
    81:     domain = sender.split("@")[-1] if "@" in sender else sender
    82:     domain = (domain or "").lower()
    83:     if domain and any(domain.endswith(w) for w in r.get("whitelist_domains", [])):
    84:         # 白名單不直接歸 legit，仍然保留下方檢查（避免白名單被濫用）
    85:         pass
    86: 
    87:     # 2) 關鍵詞
    88:     kw = r.get("keywords", {})
    89:     for k, s in kw.items():
    90:         if k in subject_u or k in content_u:
    91:             score += int(s)
    92:             reasons.append(f"keyword:{k}")
    93: 
    94:     # 3) URL 可疑（網域、TLD）
    95:     w = r.get("weights", {})
    96:     u = _URL_RE.findall(content or "")
    97:     susp_domains = {d.lower() for d in r.get("suspicious_domains", [])}
    98:     susp_tlds = {t.lower() for t in r.get("suspicious_tlds", [])}
    99:     for url in u:
   100:         host = url.split("://", 1)[-1].split("/", 1)[0].lower()
   101:         if any(host == d or host.endswith("." + d) for d in susp_domains):
   102:             score += int(w.get("url_suspicious", 0))
   103:             reasons.append(f"url:{host}")
   104:         tld = host.rsplit(".", 1)[-1]
   105:         if tld in susp_tlds:
   106:             score += int(w.get("tld_suspicious", 0))
   107:             reasons.append(f"tld:.{tld}")
   108: 
   109:     # 4) 附件可執行
   110:     bad_exts = [e.lower() for e in r.get("bad_extensions", [])]
   111:     for a in attachments or []:
   112:         ext = a.lower().rsplit(".", 1)
   113:         ext = "." + ext[-1] if len(ext) == 2 else ""
   114:         if ext in bad_exts:
   115:             score += int(w.get("attachment_executable", 0))
   116:             reasons.append(f"attachment:{ext}")
   117: 
   118:     return score, reasons
   119: 
   120: 
   121: def label_email(sender: str, subject: str, content: str, attachments: list[str]) -> tuple[str, int, list[str]]:
   122:     r = load_rules()
   123:     score, reasons = score_email(sender, subject, content, attachments)
   124:     th = r.get("thresholds", {"suspect": 4, "spam": 8})
   125:     label = "spam" if score >= int(th.get("spam", 8)) else ("suspect" if score >= int(th.get("suspect", 4)) else "legit")
   126:     return label, score, reasons
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/rules.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/spam_llm_filter.py  (2181 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: import os
     2: 
     3: #!/usr/bin/env python3
     4: # 檔案位置：src/spam/spam_llm_filter.py
     5: # 模組用途：使用 OpenAI GPT 模型判斷信件是否具詐騙/釣魚嫌疑（L2）
     6: from dotenv import load_dotenv
     7: from openai import OpenAI, OpenAIError
     8: 
     9: from utils.logger import logger
    10: 
    11: load_dotenv()
    12: 
    13: 
    14: class SpamLLMFilter:
    15:     """
    16:     使用 OpenAI GPT API 進行詐騙信判斷（L2 分層）
    17:     回傳是否可疑（bool）
    18:     """
    19: 
    20:     def __init__(self, model: str = "gpt-3.5-turbo", max_tokens: int = 256):
    21:         api_key = os.getenv("OPENAI_API_KEY")
    22:         if not api_key:
    23:             raise ValueError("[SpamLLMFilter] 缺少必要環境變數 OPENAI_API_KEY")
    24:         self.client = OpenAI(api_key=api_key)
    25:         self.model = model
    26:         self.max_tokens = max_tokens
    27: 
    28:     def is_suspicious(self, subject: str, content: str) -> bool:
    29:         """
    30:         呼叫 OpenAI 判斷是否為詐騙信件。
    31: 
    32:         :param subject: 信件主旨
    33:         :param content: 信件內容
    34:         :return: bool - 是否具可疑詐騙嫌疑
    35:         """
    36:         try:
    37:             full_text = f"主旨：{subject}\n內容：{content}".strip()
    38:             prompt = f"判斷以下郵件是否為詐騙信或社交工程釣魚信。\n如果你判斷為【正常信件】，請回：OK\n如果你判斷為【可能詐騙或釣魚】，請回：SUSPICIOUS\n\n{full_text}"
    39: 
    40:             response = self.client.chat.completions.create(
    41:                 model=self.model,
    42:                 messages=[
    43:                     {"role": "system", "content": "你是資安專家，負責分析詐騙信件。"},
    44:                     {"role": "user", "content": prompt},
    45:                 ],
    46:                 max_tokens=self.max_tokens,
    47:                 temperature=0.0,
    48:             )
    49: 
    50:             answer = response.choices[0].message.content.strip().upper()
    51:             logger.debug(f"[SpamLLMFilter] 判斷結果：{answer}")
    52:             return "SUSPICIOUS" in answer
    53: 
    54:         except OpenAIError as e:
    55:             logger.error(f"[SpamLLMFilter] OpenAI API 錯誤：{e}")
    56:         except Exception as e:
    57:             logger.error(f"[SpamLLMFilter] LLM 判斷失敗：{e}")
    58: 
    59:         return False  # fallback 預設為非可疑
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/spam/spam_llm_filter.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/config.py  (516 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import os
     4: from dataclasses import dataclass
     5: 
     6: 
     7: @dataclass
     8: class Settings:
     9:     offline: bool = bool(int(os.getenv("OFFLINE", "1") in ("1", "true", "True")))
    10:     smtp_host: str = os.getenv("SMTP_HOST", "localhost")
    11:     smtp_port: int = int(os.getenv("SMTP_PORT", "25"))
    12:     imap_host: str = os.getenv("IMAP_HOST", "localhost")
    13:     request_timeout_s: int = int(os.getenv("REQUEST_TIMEOUT_S", "30"))
    14:     demo_language: str = os.getenv("DEMO_LANGUAGE", "zh-TW")
    15: 
    16: 
    17: SETTINGS = Settings()
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/config.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/db_tools.py  (2319 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/utils/db_tools.py
     3: # 模組用途：用於查詢 SQLite 使用者資料表（get by email / get all）
     4: 
     5: import sqlite3
     6: 
     7: from utils.logger import logger
     8: 
     9: 
    10: def get_user_by_email(db_path: str, email: str) -> dict | None:
    11:     """
    12:     根據 email 查詢單一使用者資料
    13: 
    14:     :param db_path: 資料庫檔案路徑
    15:     :param email: 欲查詢的 Email
    16:     :return: dict 或 None，查無資料時回傳 None
    17:     """
    18:     try:
    19:         conn = sqlite3.connect(db_path)
    20:         cursor = conn.cursor()
    21:         cursor.execute(
    22:             """
    23:             SELECT id, email, name, phone, address
    24:             FROM users
    25:             WHERE email = ?
    26:         """,
    27:             (email,),
    28:         )
    29:         row = cursor.fetchone()
    30:         conn.close()
    31: 
    32:         if row:
    33:             logger.info(f"[DB] 查詢成功：{email}")
    34:             return {
    35:                 "id": row[0],
    36:                 "email": row[1],
    37:                 "name": row[2],
    38:                 "phone": row[3],
    39:                 "address": row[4],
    40:             }
    41:         else:
    42:             logger.warning(f"[DB] 查無資料：{email}")
    43:             return None
    44: 
    45:     except Exception as e:
    46:         logger.error(f"[DB] 查詢使用者失敗：{e}")
    47:         return None
    48: 
    49: 
    50: def get_all_users(db_path: str) -> list[dict]:
    51:     """
    52:     查詢所有使用者資料
    53: 
    54:     :param db_path: 資料庫檔案路徑
    55:     :return: list of dicts，包含所有使用者欄位
    56:     """
    57:     try:
    58:         conn = sqlite3.connect(db_path)
    59:         cursor = conn.cursor()
    60:         cursor.execute("SELECT id, email, name, phone, address FROM users")
    61:         rows = cursor.fetchall()
    62:         conn.close()
    63: 
    64:         logger.info(f"[DB] 成功查詢所有使用者，共 {len(rows)} 筆")
    65:         return [{"id": row[0], "email": row[1], "name": row[2], "phone": row[3], "address": row[4]} for row in rows]
    66:     except Exception as e:
    67:         logger.error(f"[DB] 查詢所有使用者失敗：{e}")
    68:         return []
    69: 
    70: 
    71: # CLI 測試入口
    72: if __name__ == "__main__":
    73:     db_path = "data/users.db"
    74: 
    75:     print("【查詢全部使用者】")
    76:     all_users = get_all_users(db_path)
    77:     for user in all_users:
    78:         print(user)
    79: 
    80:     print("\n【查詢單一使用者】")
    81:     user = get_user_by_email(db_path, "test@example.com")
    82:     print(user or "找不到對應使用者")
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/db_tools.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/env.py  (358 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import os
     4: 
     5: # -*- coding: utf-8 -*-
     6: 
     7: 
     8: def get_bool(keys, default=False):
     9:     if isinstance(keys, str):
    10:         keys = [keys]
    11:     for k in keys:
    12:         v = os.environ.get(k)
    13:         if v is None:
    14:             continue
    15:         s = str(v).strip().lower()
    16:         return s in ("1", "true", "yes", "y", "on")
    17:     return default
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/env.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/errors.py  (311 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: 
     4: class UserInputError(Exception):
     5:     """Raised for invalid user input."""
     6: 
     7:     pass
     8: 
     9: 
    10: class ExternalServiceError(Exception):
    11:     """Raised when external services fail."""
    12: 
    13:     pass
    14: 
    15: 
    16: class InternalError(Exception):
    17:     """Raised for unexpected internal errors."""
    18: 
    19:     pass
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/errors.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/font_check.py  (626 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import os
     4: 
     5: #!/usr/bin/env python3
     6: from pathlib import Path
     7: 
     8: 
     9: def get_font_path(env_key: str = "FONT_PATH") -> str | None:
    10:     p = os.getenv(env_key, "").strip()
    11:     if not p:
    12:         return None
    13:     path = Path(p)
    14:     return str(path) if path.is_file() else None
    15: 
    16: 
    17: def ensure_font_available(logger=None) -> str | None:
    18:     fp = get_font_path()
    19:     if fp is None:
    20:         msg = "未找到中文字型 FONT_PATH，PDF 中文輸出可能失敗；請放置 assets/fonts/NotoSansTC-Regular.ttf 並更新 .env"
    21:         (logger.warning if logger else print)(msg)
    22:         return None
    23:     return fp
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/font_check.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/fonts.py  (521 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: from __future__ import annotations
     3: 
     4: import os
     5: 
     6: # 檔案位置: src/smart_mail_agent/utils/fonts.py
     7: from pathlib import Path
     8: 
     9: PREFERRED = ("NotoSansTC-Regular.ttf",)
    10: 
    11: 
    12: def find_font(root: str | Path = ".") -> str | None:
    13:     env_font = os.getenv("FONT_PATH")
    14:     if env_font and Path(env_font).is_file():
    15:         return env_font
    16:     root = Path(root).resolve()
    17:     for name in PREFERRED:
    18:         p = root / "assets" / "fonts" / name
    19:         if p.is_file():
    20:             return str(p)
    21:     return None
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/fonts.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/imap_folder_detector.py  (2435 bytes)
TAGS: legacy_candidate=yes | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/utils/imap_utils.py
     3: # 模組用途：偵測 Gmail 的 All Mail 資料夾名稱，支援不同語系與 IMAP 編碼
     4: import imaplib
     5: import os
     6: 
     7: 
     8: def _decode_imap_bytes(v: bytes | tuple[bytes, ...] | bytearray) -> str:
     9:     """統一處理 IMAP 回傳：可能為 bytes 或 (bytes, ...)。
    10:     盡力解碼，失敗則回傳 str(v)。"""
    11:     try:
    12:         if isinstance(v, (bytes, bytearray)):
    13:             return _decode_imap_bytes(v)
    14:         if isinstance(v, tuple) and v:
    15:             # 常見格式 (b'OK', [b'INBOX']) / (b'...', b'...')
    16:             first = v[0]
    17:             if isinstance(first, (bytes, bytearray)):
    18:                 return _decode_imap_bytes(first)
    19:         return str(v)
    20:     except Exception:
    21:         return str(v)
    22: 
    23: 
    24: import re
    25: 
    26: from dotenv import load_dotenv
    27: 
    28: from utils.logger import logger
    29: 
    30: load_dotenv()
    31: 
    32: 
    33: def detect_all_mail_folder() -> str:
    34:     """
    35:     自動偵測 Gmail 中的 All Mail 資料夾名稱，支援中英文、UTF7 編碼格式。
    36: 
    37:     若找不到，預設回傳 'INBOX' 作為 fallback。
    38: 
    39:     回傳:
    40:         str: Gmail 中的 All Mail 資料夾名稱（或 INBOX）
    41:     """
    42:     imap_host = os.getenv("IMAP_HOST")
    43:     imap_user = os.getenv("IMAP_USER")
    44:     imap_pass = os.getenv("IMAP_PASS")
    45: 
    46:     if not imap_host or not imap_user or not imap_pass:
    47:         logger.warning("[IMAP] 無法建立連線，環境變數缺漏，使用預設 INBOX")
    48:         return "INBOX"
    49: 
    50:     try:
    51:         with imaplib.IMAP4_SSL(imap_host) as imap:
    52:             imap.login(imap_user, imap_pass)
    53:             status, mailboxes = imap.list()
    54:             if status != "OK":
    55:                 logger.warning("[IMAP] 無法列出 Gmail 資料夾，使用預設 INBOX")
    56:                 return "INBOX"
    57: 
    58:             for line in mailboxes:
    59:                 parts = _decode_imap_bytes(line).split(' "/" ')
    60:                 if len(parts) != 2:
    61:                     continue
    62:                 _, name = parts
    63:                 if re.search(r"All Mail|所有郵件|&UWiQ6JD1TvY-", name, re.IGNORECASE):
    64:                     folder = name.strip().strip('"')
    65:                     logger.info(f"[IMAP] 偵測到 All Mail 資料夾：{folder}")
    66:                     return folder
    67: 
    68:             logger.warning("[IMAP] 找不到 All Mail，使用預設 INBOX")
    69:             return "INBOX"
    70: 
    71:     except Exception as e:
    72:         logger.warning(f"[IMAP] 連線失敗（fallback INBOX）：{e}")
    73:         return "INBOX"
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/imap_folder_detector.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/imap_login.py  (670 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import imaplib
     4: import os
     5: 
     6: from dotenv import load_dotenv
     7: 
     8: 
     9: def get_imap():
    10:     load_dotenv(dotenv_path=".env", override=True)
    11:     host = os.getenv("IMAP_HOST", "imap.gmail.com").strip()
    12:     user = os.getenv("IMAP_USER", "").strip()
    13:     pwd = os.getenv("IMAP_PASS", "").strip()
    14: 
    15:     if not user or not pwd:
    16:         raise RuntimeError(f"IMAP_USER/IMAP_PASS 缺失（user={bool(user)}, pass_len={len(pwd)})")
    17: 
    18:     # 開啟 debug 方便看到 LOGIN 是否為兩個參數
    19:     imaplib.Debug = int(os.getenv("IMAP_DEBUG", "0"))
    20:     imap = imaplib.IMAP4_SSL(host, 993)
    21:     imap.login(user, pwd)  # 這裡一定是兩個參數
    22:     return imap
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/imap_login.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/jsonlog.py  (2691 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import datetime as dt
     4: import json
     5: import os
     6: 
     7: #!/usr/bin/env python3
     8: from pathlib import Path
     9: from typing import Any
    10: 
    11: 
    12: def _log_dir() -> Path:
    13:     d = Path(os.getenv("SMA_LOG_DIR", "logs"))
    14:     d.mkdir(parents=True, exist_ok=True)
    15:     return d
    16: 
    17: 
    18: def _jsonable(x: Any):
    19:     try:
    20:         json.dumps(x)
    21:         return x
    22:     except Exception:
    23:         try:
    24:             return str(x)
    25:         except Exception:
    26:             return "<unserializable>"
    27: 
    28: 
    29: def _to_dict(obj: Any) -> dict[str, Any]:
    30:     if isinstance(obj, dict):
    31:         return obj
    32:     for attr in ("model_dump", "dict"):
    33:         fn = getattr(obj, attr, None)
    34:         if callable(fn):
    35:             try:
    36:                 return fn(by_alias=True) if attr == "model_dump" else fn()
    37:             except Exception:
    38:                 pass
    39:     return {"repr": repr(obj)}
    40: 
    41: 
    42: def log_event(result: Any, request: dict[str, Any] | None = None) -> str:
    43:     """Never-throw JSONL logger. Also sets result['logged_path'] when possible."""
    44:     try:
    45:         p = _log_dir() / f"sma-{dt.datetime.now():%Y%m%d}.jsonl"
    46:         rd = _to_dict(result)
    47:         row = {
    48:             "ts": dt.datetime.now().isoformat(timespec="seconds"),
    49:             "level": "INFO",
    50:             "action_name": rd.get("action_name"),
    51:             "ok": bool(rd.get("ok", True)),
    52:             "code": rd.get("code", "OK"),
    53:             "request_id": rd.get("request_id"),
    54:             "intent": rd.get("intent"),
    55:             "confidence": rd.get("confidence"),
    56:             "duration_ms": rd.get("duration_ms") or rd.get("spent_ms"),
    57:             "dry_run": rd.get("dry_run"),
    58:             "warnings": rd.get("warnings") or [],
    59:         }
    60:         if isinstance(request, dict):
    61:             row["req_subject"] = request.get("subject")
    62:             row["req_from"] = request.get("from")
    63:         with p.open("a", encoding="utf-8") as f:
    64:             f.write(json.dumps({k: _jsonable(v) for k, v in row.items()}, ensure_ascii=False) + "\n")
    65:         try:
    66:             if isinstance(result, dict):
    67:                 result["logged_path"] = str(p)
    68:         except Exception:
    69:             pass
    70:         return str(p)
    71:     except Exception as e:
    72:         try:
    73:             dbg = _log_dir() / "log_event_error.txt"
    74:             dbg.write_text(
    75:                 (dbg.read_text(encoding="utf-8") if dbg.exists() else "") + f"[{dt.datetime.now().isoformat(timespec='seconds')}] {type(e).__name__}: {e}\n",
    76:                 encoding="utf-8",
    77:             )
    78:         except Exception:
    79:             pass
    80:         try:
    81:             if isinstance(result, dict):
    82:                 result.setdefault("warnings", []).append("log_write_failed")
    83:         except Exception:
    84:             pass
    85:         return ""
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/jsonlog.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/log_writer.py  (254 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: #!/usr/bin/env python3
     4: # 檔案位置：src/utils/log_writer.py
     5: # 模組用途：向後相容封裝（統一轉用 src.log_writer.log_to_db）
     6: from src.log_writer import log_to_db  # re-export
     7: 
     8: __all__ = ["log_to_db"]
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/log_writer.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/logging_setup.py  (1326 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: import logging
     5: import os
     6: import sys
     7: import time
     8: 
     9: 
    10: class JsonFormatter(logging.Formatter):
    11:     def format(self, record: logging.LogRecord) -> str:
    12:         base = {
    13:             "level": record.levelname,
    14:             "name": record.name,
    15:             "msg": record.getMessage(),
    16:             "time": int(time.time() * 1000),
    17:         }
    18:         # 附加 extra
    19:         for k, v in getattr(record, "__dict__", {}).items():
    20:             if k not in base and k not in (
    21:                 "args",
    22:                 "exc_info",
    23:                 "exc_text",
    24:                 "stack_info",
    25:                 "msg",
    26:                 "message",
    27:             ):
    28:                 try:
    29:                     json.dumps({k: v})
    30:                     base[k] = v
    31:                 except Exception:
    32:                     pass
    33:         if record.exc_info:
    34:             base["exc_type"] = str(record.exc_info[0].__name__)
    35:         return json.dumps(base, ensure_ascii=False)
    36: 
    37: 
    38: def setup_logging(level: str | int = None) -> logging.Logger:
    39:     lvl = level or os.environ.get("LOG_LEVEL", "INFO")
    40:     logger = logging.getLogger("sma")
    41:     if not logger.handlers:
    42:         h = logging.StreamHandler(stream=sys.stdout)
    43:         h.setFormatter(JsonFormatter())
    44:         logger.addHandler(h)
    45:     logger.setLevel(lvl)
    46:     return logger
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/logging_setup.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/pdf_generator.py  (2702 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: import os
     2: 
     3: #!/usr/bin/env python3
     4: # 檔案位置：src/utils/pdf_generator.py
     5: # 模組用途：產出異動紀錄 PDF，支援中文顯示與系統字型錯誤備援處理
     6: from datetime import datetime
     7: from pathlib import Path
     8: 
     9: from dotenv import load_dotenv
    10: from reportlab.lib.pagesizes import A4
    11: from reportlab.pdfbase import pdfmetrics
    12: from reportlab.pdfbase.ttfonts import TTFont
    13: from reportlab.pdfgen import canvas
    14: 
    15: from utils.logger import logger
    16: 
    17: load_dotenv()
    18: 
    19: # 讀取字型路徑
    20: FONT_PATH = os.getenv("QUOTE_FONT_PATH", "/usr/share/fonts/truetype/noto/NotoSansTC-Regular.otf")
    21: 
    22: try:
    23:     if not os.path.exists(FONT_PATH):
    24:         raise FileNotFoundError(f"找不到字型檔案：{FONT_PATH}")
    25:     pdfmetrics.registerFont(TTFont("NotoSansTC", FONT_PATH))
    26:     FONT_NAME = "NotoSansTC"
    27:     logger.info("[PDFGenerator] 載入字型成功：%s", FONT_PATH)
    28: except Exception as e:
    29:     FONT_NAME = "Helvetica"
    30:     logger.warning("[PDFGenerator] 使用預設字型 Helvetica，原因：%s", str(e))
    31: 
    32: 
    33: def generate_info_change_pdf(info_dict: dict, save_path: str):
    34:     """
    35:     根據使用者異動資訊產出正式 PDF 檔案
    36: 
    37:     :param info_dict: 異動欄位與新值的 dict
    38:     :param save_path: 儲存的 PDF 完整路徑
    39:     """
    40:     try:
    41:         Path(save_path).parent.mkdir(parents=True, exist_ok=True)
    42:         c = canvas.Canvas(save_path, pagesize=A4)
    43:         width, height = A4
    44: 
    45:         margin = 50
    46:         line_height = 24
    47:         y = height - margin
    48: 
    49:         # 標題
    50:         c.setFont(FONT_NAME, 18)
    51:         c.drawString(margin, y, "客戶資料異動紀錄")
    52:         y -= line_height * 2
    53: 
    54:         # 系統說明
    55:         c.setFont(FONT_NAME, 12)
    56:         c.drawString(margin, y, "以下為客戶主動申請之資料異動內容，已由 Smart-Mail-Agent 系統自動紀錄：")
    57:         y -= line_height * 2
    58: 
    59:         # 異動欄位列出
    60:         for key, value in info_dict.items():
    61:             if value.strip():
    62:                 c.drawString(margin, y, f"■ {key.strip()}：{value.strip()}")
    63:                 y -= line_height
    64: 
    65:         y -= line_height
    66: 
    67:         # 系統資訊
    68:         c.setFont(FONT_NAME, 11)
    69:         c.drawString(margin, y, f"異動提交時間：{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    70:         y -= line_height
    71:         c.drawString(margin, y, "系統產出：Smart-Mail-Agent")
    72:         y -= line_height * 2
    73: 
    74:         # 備註
    75:         c.setFont(FONT_NAME, 10)
    76:         c.drawString(margin, y, "※ 此紀錄由系統自動產生，若資訊有誤請回覆本信通知更正。")
    77: 
    78:         c.save()
    79:         logger.info("[PDFGenerator] PDF 已產出：%s", save_path)
    80: 
    81:     except Exception as e:
    82:         logger.error("[PDFGenerator] PDF 產出失敗：%s", str(e))
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/pdf_generator.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/pdf_safe.py  (4863 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import datetime as dt
     4: from collections.abc import Sequence
     5: 
     6: # -*- coding: utf-8 -*-
     7: from pathlib import Path
     8: 
     9: 
    10: def _find_font(candidates: Sequence[str]) -> Path | None:
    11:     extra = [
    12:         "/usr/share/fonts/opentype/noto/NotoSansCJKTC-Regular.otf",
    13:         "/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc",
    14:         "/System/Library/Fonts/PingFang.ttc",
    15:         "/Library/Fonts/Songti.ttc",
    16:     ]
    17:     for c in list(candidates) + extra:
    18:         p = Path(c)
    19:         if p.exists():
    20:             return p
    21:     return None
    22: 
    23: 
    24: def _escape_pdf_text(s: str) -> str:
    25:     # 僅保證 PDF 語法合法；非 Latin-1 字元可能顯示成方框（不影響測試與檔案有效性）
    26:     s = s.replace("\\", "\\\\").replace("(", "\\(").replace(")", "\\)")
    27:     return "".join(ch if 32 <= ord(ch) <= 126 else "?" for ch in s)
    28: 
    29: 
    30: def _write_minimal_pdf(lines: list[str], out_path: Path) -> Path:
    31:     # 產生一份 *有效* 的極簡 PDF（1 頁，內建 Helvetica 字型）
    32:     # 版面：A4 (595 x 842 points)，字體 12pt，行距 14pt，自 (72, 800) 起逐行往下
    33:     header = b"%PDF-1.4\n%\xe2\xe3\xcf\xd3\n"
    34:     # 內容串
    35:     content_lines = ["BT", "/F1 12 Tf", "14 TL", "72 800 Td"]
    36:     for ln in lines:
    37:         content_lines.append(f"({_escape_pdf_text(ln)}) Tj")
    38:         content_lines.append("T*")
    39:     content_lines.append("ET")
    40:     content_str = "\n".join(content_lines) + "\n"
    41:     content_bytes = content_str.encode("latin-1")
    42: 
    43:     # 物件組裝
    44:     objs = []
    45: 
    46:     def add_obj(body: bytes) -> int:
    47:         offset = sum(len(x) for x in objs) + len(header)
    48:         objs.append(body)
    49:         return offset
    50: 
    51:     xref = []
    52:     # 1: Catalog
    53:     xref.append(add_obj(b"1 0 obj\n<< /Type /Catalog /Pages 2 0 R >>\nendobj\n"))
    54:     # 2: Pages
    55:     xref.append(add_obj(b"2 0 obj\n<< /Type /Pages /Kids [3 0 R] /Count 1 >>\nendobj\n"))
    56:     # 3: Page
    57:     xref.append(add_obj(b"3 0 obj\n<< /Type /Page /Parent 2 0 R /MediaBox [0 0 595 842] /Contents 4 0 R /Resources << /Font << /F1 5 0 R >> >> >>\nendobj\n"))
    58:     # 4: Contents (stream)
    59:     stream = b"4 0 obj\n<< /Length " + str(len(content_bytes)).encode("ascii") + b" >>\nstream\n" + content_bytes + b"endstream\nendobj\n"
    60:     xref.append(add_obj(stream))
    61:     # 5: Font
    62:     xref.append(add_obj(b"5 0 obj\n<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>\nendobj\n"))
    63: 
    64:     # xref & trailer
    65:     xref_start = len(header) + sum(len(x) for x in objs)
    66:     xref_table = [b"xref\n0 6\n", b"0000000000 65535 f \n"]
    67:     for off in xref:
    68:         xref_table.append((f"{off:010d} 00000 n \n").encode("ascii"))
    69:     xref_bytes = b"".join(xref_table)
    70:     trailer = b"trailer\n<< /Size 6 /Root 1 0 R >>\nstartxref\n" + str(xref_start).encode("ascii") + b"\n%%EOF\n"
    71: 
    72:     out_path.parent.mkdir(parents=True, exist_ok=True)
    73:     with out_path.open("wb") as f:
    74:         f.write(header)
    75:         for o in objs:
    76:             f.write(o)
    77:         f.write(xref_bytes)
    78:         f.write(trailer)
    79:     return out_path
    80: 
    81: 
    82: def write_pdf_or_txt(
    83:     lines: list[str],
    84:     out_dir: Path = Path("data/output"),
    85:     basename: str = "attachment",
    86:     font_candidates: Sequence[str] | None = None,
    87: ) -> Path:
    88:     out_dir.mkdir(parents=True, exist_ok=True)
    89:     ts = dt.datetime.now().strftime("%Y%m%d_%H%M%S")
    90:     font_candidates = font_candidates or [
    91:         "assets/fonts/SourceHanSansTC-Regular.otf",
    92:         "assets/fonts/NotoSansTC-Regular.ttf",
    93:     ]
    94:     font_path = _find_font(font_candidates)
    95:     try:
    96:         from reportlab.lib.pagesizes import A4
    97:         from reportlab.lib.units import mm
    98:         from reportlab.pdfbase import pdfmetrics
    99:         from reportlab.pdfbase.ttfonts import TTFont
   100:         from reportlab.pdfgen import canvas
   101: 
   102:         pdf_path = out_dir / f"{basename}_{ts}.pdf"
   103:         c = canvas.Canvas(str(pdf_path), pagesize=A4)
   104: 
   105:         font_name = "Helvetica"
   106:         if font_path and font_path.suffix.lower() in {".ttf", ".otf"}:
   107:             try:
   108:                 pdfmetrics.registerFont(TTFont("CJK", str(font_path)))
   109:                 font_name = "CJK"
   110:             except Exception:
   111:                 pass
   112: 
   113:         c.setFont(font_name, 12)
   114:         width, height = A4
   115:         x, y = 20 * mm, height - 20 * mm
   116:         for line in lines:
   117:             c.drawString(x, y, line)
   118:             y -= 8 * mm
   119:             if y < 20 * mm:
   120:                 c.showPage()
   121:                 c.setFont(font_name, 12)
   122:                 y = height - 20 * mm
   123:         c.save()
   124:         return pdf_path
   125:     except Exception:
   126:         # 無 reportlab：用極簡 PDF 生成器寫出 .pdf
   127:         pdf_path = out_dir / f"{basename}_{ts}.pdf"
   128:         try:
   129:             return _write_minimal_pdf(lines, pdf_path)
   130:         except Exception:
   131:             # 極端狀況才降級 .txt
   132:             txt_path = out_dir / f"{basename}_{ts}.txt"
   133:             txt_path.write_text("\\n".join(lines), encoding="utf-8")
   134:             return txt_path
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/pdf_safe.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/priority_evaluator.py  (2486 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/utils/priority_evaluator.py
     3: # 模組用途：根據主旨、內容、分類與信心分數，評估技術工單的優先等級
     4: 
     5: from typing import Literal
     6: 
     7: from utils.logger import logger
     8: 
     9: PriorityLevel = Literal["high", "medium", "low"]
    10: 
    11: # 高風險關鍵字（若命中則為 high 優先）
    12: HIGH_RISK_KEYWORDS = [
    13:     "系統故障",
    14:     "服務中斷",
    15:     "登入失敗",
    16:     "掛掉",
    17:     "嚴重錯誤",
    18:     "資料遺失",
    19:     "斷線",
    20:     "無法連線",
    21: ]
    22: 
    23: 
    24: def contains_critical_keywords(text: str) -> bool:
    25:     """
    26:     判斷文字中是否包含高風險關鍵字
    27: 
    28:     :param text: 主旨或內文組合文字（小寫）
    29:     :return: 是否命中關鍵字
    30:     """
    31:     return any(kw.lower() in text for kw in HIGH_RISK_KEYWORDS)
    32: 
    33: 
    34: def evaluate_priority(
    35:     subject: str,
    36:     content: str,
    37:     sender: str | None = None,
    38:     category: str | None = None,
    39:     confidence: float = 0.0,
    40: ) -> PriorityLevel:
    41:     """
    42:     根據分類與信心值評估工單優先順序
    43: 
    44:     規則：
    45:         - 命中高風險關鍵字 ➜ high
    46:         - 技術支援 + 信心 > 0.8 ➜ high
    47:         - 投訴與抱怨 ➜ medium
    48:         - 詢問流程 ➜ low
    49:         - 其他 ➜ 預設 medium
    50: 
    51:     :param subject: 信件主旨
    52:     :param content: 信件內文
    53:     :param sender: 寄件人（可選）
    54:     :param category: 分類標籤（可選）
    55:     :param confidence: 分類信心值（可選）
    56:     :return: 優先等級（high, medium, low）
    57:     """
    58:     try:
    59:         combined = f"{subject} {content}".lower()
    60: 
    61:         if contains_critical_keywords(combined):
    62:             logger.info("[priority_evaluator] 命中高風險詞 ➜ 優先等級：high")
    63:             return "high"
    64: 
    65:         if category == "請求技術支援" and confidence >= 0.8:
    66:             logger.info("[priority_evaluator] 技術支援 + 高信心 ➜ 優先等級：high")
    67:             return "high"
    68: 
    69:         if category == "投訴與抱怨":
    70:             logger.info("[priority_evaluator] 分類為投訴與抱怨 ➜ 優先等級：medium")
    71:             return "medium"
    72: 
    73:         if category == "詢問流程或規則":
    74:             logger.info("[priority_evaluator] 分類為詢問流程 ➜ 優先等級：low")
    75:             return "low"
    76: 
    77:         logger.info("[priority_evaluator] 未命中條件 ➜ 優先等級：medium")
    78:         return "medium"
    79: 
    80:     except Exception as e:
    81:         logger.error(f"[priority_evaluator] 優先順序判定失敗：{e}")
    82:         return "medium"
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/priority_evaluator.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/rag_reply.py  (2384 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: import os
     2: 
     3: #!/usr/bin/env python3
     4: # 檔案位置：src/utils/rag_reply.py
     5: # 模組用途：使用 GPT 模型 + FAQ 知識庫進行回應生成（中文 Retrieval-Augmented Generation）
     6: from dotenv import load_dotenv
     7: from openai import OpenAI, OpenAIError
     8: 
     9: from utils.logger import logger
    10: 
    11: load_dotenv()
    12: 
    13: 
    14: def load_faq_knowledge(faq_path: str) -> str:
    15:     """
    16:     讀取 FAQ 知識庫文字內容
    17: 
    18:     :param faq_path: FAQ 文字檔案路徑
    19:     :return: FAQ 資料字串
    20:     """
    21:     if not os.path.exists(faq_path):
    22:         logger.warning(f"[rag_reply] 找不到 FAQ 檔案：{faq_path}")
    23:         return ""
    24: 
    25:     try:
    26:         with open(faq_path, encoding="utf-8") as f:
    27:             return f.read()
    28:     except Exception as e:
    29:         logger.error(f"[rag_reply] FAQ 讀取錯誤：{e}")
    30:         return ""
    31: 
    32: 
    33: def generate_rag_reply(query: str, faq_path: str, model: str = "gpt-3.5-turbo") -> str:
    34:     """
    35:     根據 FAQ 資料與提問內容產生回覆內容
    36: 
    37:     :param query: 使用者提出的問題
    38:     :param faq_path: FAQ 資料檔案路徑
    39:     :param model: 使用之 GPT 模型名稱
    40:     :return: 回覆文字
    41:     """
    42:     try:
    43:         faq = load_faq_knowledge(faq_path)
    44:         if not faq:
    45:             return "很抱歉，目前無法提供對應資料。"
    46: 
    47:         prompt = f"你是客服助理，請根據以下 FAQ 資訊與提問內容，提供簡潔清楚的回覆：\n\n【FAQ】\n{faq}\n\n【提問】\n{query}\n\n請以繁體中文回答，回覆不可重複 FAQ 原文，請使用簡明語氣說明即可。"
    48: 
    49:         client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
    50:         response = client.chat.completions.create(
    51:             model=model,
    52:             messages=[
    53:                 {"role": "system", "content": "你是客服 AI 專員，回答使用者關於流程與規則的問題。"},
    54:                 {"role": "user", "content": prompt},
    55:             ],
    56:             max_tokens=400,
    57:             temperature=0.7,
    58:         )
    59: 
    60:         answer = response.choices[0].message.content.strip()
    61:         logger.info("[rag_reply] 回覆產生成功")
    62:         return answer
    63: 
    64:     except OpenAIError as e:
    65:         logger.error(f"[rag_reply] OpenAI 回應錯誤：{e}")
    66:         return "目前系統繁忙，請稍後再試。"
    67: 
    68:     except Exception as e:
    69:         logger.error(f"[rag_reply] 回覆產生異常：{e}")
    70:         return "處理過程發生錯誤，請稍後再試。"
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/rag_reply.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/templater.py  (1128 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: #!/usr/bin/env python3
     4: from pathlib import Path
     5: 
     6: from jinja2 import Environment, FileSystemLoader, StrictUndefined
     7: 
     8: 
     9: def _template_dirs() -> list[str]:
    10:     here = Path(__file__).resolve()
    11:     roots = [
    12:         here.parents[2],  # repo root
    13:         here.parents[1],  # src/
    14:         Path.cwd(),
    15:     ]
    16:     dirs = []
    17:     for r in roots:
    18:         for p in [r / "templates", r / "src" / "templates", r / "src" / "src" / "templates"]:
    19:             if p.exists():
    20:                 dirs.append(str(p))
    21:     seen, out = set(), []
    22:     for d in dirs:
    23:         if d not in seen:
    24:             out.append(d)
    25:             seen.add(d)
    26:     return out
    27: 
    28: 
    29: _env: Environment | None = None
    30: 
    31: 
    32: def get_env() -> Environment:
    33:     global _env
    34:     if _env is None:
    35:         _env = Environment(
    36:             loader=FileSystemLoader(_template_dirs()),
    37:             undefined=StrictUndefined,
    38:             autoescape=False,
    39:             trim_blocks=True,
    40:             lstrip_blocks=True,
    41:         )
    42:     return _env
    43: 
    44: 
    45: def render(template_name: str, context: dict) -> str:
    46:     return get_env().get_template(template_name).render(**context)
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/templater.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/tracing.py  (460 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: import time
     5: from pathlib import Path
     6: from typing import Any
     7: 
     8: 
     9: def trace_decision(root: Path, name: str, payload: dict[str, Any]) -> Path:
    10:     out_dir = root / "data" / "output" / "traces"
    11:     out_dir.mkdir(parents=True, exist_ok=True)
    12:     ts = time.strftime("%Y%m%d_%H%M%S")
    13:     p = out_dir / f"{ts}_{name}.json"
    14:     p.write_text(json.dumps(payload, ensure_ascii=False, indent=2), encoding="utf-8")
    15:     return p
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/tracing.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/validators.py  (1369 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import re
     4: from collections.abc import Iterable
     5: 
     6: try:
     7:     from email_validator import EmailNotValidError, validate_email  # provided by email-validator
     8: except Exception:
     9:     validate_email = None
    10:     EmailNotValidError = Exception
    11: 
    12: MAX_SUBJECT = 200
    13: MAX_CONTENT = 20000
    14: ATTACH_BAD_CHARS = re.compile(r'[<>:"/\\|?*\x00-\x1F]')
    15: 
    16: 
    17: def check_sender(sender: str) -> tuple[bool, str]:
    18:     if not sender or "@" not in sender:
    19:         return False, "sender_missing_or_invalid"
    20:     if validate_email:
    21:         try:
    22:             validate_email(sender, check_deliverability=False)
    23:         except EmailNotValidError:
    24:             return False, "sender_invalid_format"
    25:     return True, "OK"
    26: 
    27: 
    28: def check_subject(subject: str) -> tuple[bool, str]:
    29:     if not subject:
    30:         return False, "subject_missing"
    31:     if len(subject) > MAX_SUBJECT:
    32:         return False, "subject_too_long"
    33:     return True, "OK"
    34: 
    35: 
    36: def check_content(content: str) -> tuple[bool, str]:
    37:     if not content or not content.strip():
    38:         return False, "content_empty"
    39:     if len(content) > MAX_CONTENT:
    40:         return False, "content_too_long"
    41:     return True, "OK"
    42: 
    43: 
    44: def check_attachments(names: Iterable[str]) -> tuple[bool, str]:
    45:     for n in names or []:
    46:         if ATTACH_BAD_CHARS.search(n):
    47:             return False, "attachment_name_illegal_chars"
    48:     return True, "OK"
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/utils/validators.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/feature_extractor.py  (280 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Auto-generated compat proxy: src/spam/feature_extractor.py
     2: from importlib import import_module as _imp
     3: 
     4: _mod = _imp("smart_mail_agent.spam.feature_extractor")
     5: # re-export public names
     6: for _k in dir(_mod):
     7:     if not _k.startswith("_"):
     8:         globals()[_k] = getattr(_mod, _k)
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/feature_extractor.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/ml_spam_classifier.py  (282 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Auto-generated compat proxy: src/spam/ml_spam_classifier.py
     2: from importlib import import_module as _imp
     3: 
     4: _mod = _imp("smart_mail_agent.spam.ml_spam_classifier")
     5: # re-export public names
     6: for _k in dir(_mod):
     7:     if not _k.startswith("_"):
     8:         globals()[_k] = getattr(_mod, _k)
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/ml_spam_classifier.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/rule_filter.py  (268 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Auto-generated compat proxy: src/spam/rule_filter.py
     2: from importlib import import_module as _imp
     3: 
     4: _mod = _imp("smart_mail_agent.spam.rule_filter")
     5: # re-export public names
     6: for _k in dir(_mod):
     7:     if not _k.startswith("_"):
     8:         globals()[_k] = getattr(_mod, _k)
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/rule_filter.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/rules.py  (256 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Auto-generated compat proxy: src/spam/rules.py
     2: from importlib import import_module as _imp
     3: 
     4: _mod = _imp("smart_mail_agent.spam.rules")
     5: # re-export public names
     6: for _k in dir(_mod):
     7:     if not _k.startswith("_"):
     8:         globals()[_k] = getattr(_mod, _k)
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/spam/rules.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/support_ticket.py  (5699 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/support_ticket.py
     3: # 模組用途：技術支援工單管理（建立 / 查詢 / 更新），自動標定優先等級
     4: 
     5: import argparse
     6: import sqlite3
     7: from datetime import datetime
     8: from pathlib import Path
     9: 
    10: from utils.logger import logger
    11: 
    12: try:
    13:     from utils.priority_evaluator import evaluate_priority
    14: except ImportError:
    15: 
    16:     def evaluate_priority(*args, **kwargs):
    17:         logger.warning("未載入 priority_evaluator 模組，預設優先等級為 normal")
    18:         return "normal"
    19: 
    20: 
    21: DB_PATH = "data/tickets.db"
    22: TABLE = "support_tickets"
    23: 
    24: 
    25: def init_db():
    26:     Path("data").mkdir(parents=True, exist_ok=True)
    27:     with sqlite3.connect(DB_PATH) as conn:
    28:         conn.execute(
    29:             f"""
    30:             CREATE TABLE IF NOT EXISTS {TABLE} (
    31:                 id INTEGER PRIMARY KEY AUTOINCREMENT,
    32:                 subject TEXT NOT NULL,
    33:                 content TEXT NOT NULL,
    34:                 summary TEXT,
    35:                 sender TEXT,
    36:                 category TEXT,
    37:                 confidence REAL,
    38:                 created_at TEXT,
    39:                 updated_at TEXT,
    40:                 status TEXT,
    41:                 priority TEXT
    42:             )
    43:         """
    44:         )
    45:         conn.commit()
    46: 
    47: 
    48: def create_ticket(subject, content, summary="", sender=None, category=None, confidence=None):
    49:     init_db()
    50:     subject = subject or "(未填寫)"
    51:     content = content or ""
    52:     summary = summary or ""
    53:     sender = sender or "unknown"
    54:     category = category or "未分類"
    55:     confidence = float(confidence or 0)
    56: 
    57:     try:
    58:         priority = evaluate_priority(subject, content, sender, category, confidence)
    59:     except Exception as e:
    60:         logger.warning("evaluate_priority 失敗，預設為 normal：%s", e)
    61:         priority = "normal"
    62: 
    63:     now = datetime.utcnow().isoformat()
    64:     with sqlite3.connect(DB_PATH) as conn:
    65:         conn.execute(
    66:             f"""
    67:             INSERT INTO {TABLE}
    68:             (subject, content, summary, sender, category, confidence,
    69:              created_at, updated_at, status, priority)
    70:             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    71:         """,
    72:             (
    73:                 subject,
    74:                 content,
    75:                 summary,
    76:                 sender,
    77:                 category,
    78:                 confidence,
    79:                 now,
    80:                 now,
    81:                 "pending",
    82:                 priority,
    83:             ),
    84:         )
    85:         conn.commit()
    86:     logger.info("工單建立成功 [%s] 優先級：%s", subject, priority)
    87: 
    88: 
    89: def list_tickets():
    90:     init_db()
    91:     with sqlite3.connect(DB_PATH) as conn:
    92:         rows = conn.execute(
    93:             f"""
    94:             SELECT id, subject, status, priority, created_at
    95:             FROM {TABLE}
    96:             ORDER BY id DESC
    97:         """
    98:         ).fetchall()
    99: 
   100:     if not rows:
   101:         print("目前尚無工單紀錄")
   102:         return
   103: 
   104:     print("\n=== 最新工單列表 ===")
   105:     for row in rows:
   106:         print(f"[#{row[0]}] [{row[2]}] [{row[3]}] {row[1]} @ {row[4]}")
   107: 
   108: 
   109: def show_ticket(ticket_id: int):
   110:     init_db()
   111:     with sqlite3.connect(DB_PATH) as conn:
   112:         row = conn.execute(f"SELECT * FROM {TABLE} WHERE id=?", (ticket_id,)).fetchone()
   113: 
   114:     if not row:
   115:         print(f"查無工單 ID={ticket_id}")
   116:         return
   117: 
   118:     print(
   119:         f"""
   120: --- 工單詳細內容 ---
   121: ID         : {row[0]}
   122: 主旨       : {row[1]}
   123: 內容       : {row[2]}
   124: 摘要       : {row[3]}
   125: 寄件者     : {row[4]}
   126: 分類       : {row[5]}
   127: 信心分數   : {row[6]:.2f}
   128: 建立時間   : {row[7]}
   129: 更新時間   : {row[8]}
   130: 狀態       : {row[9]}
   131: 優先順序   : {row[10]}
   132: """
   133:     )
   134: 
   135: 
   136: def update_ticket(ticket_id: int, status=None, summary=None):
   137:     updated_fields = []
   138:     now = datetime.utcnow().isoformat()
   139: 
   140:     with sqlite3.connect(DB_PATH) as conn:
   141:         if status:
   142:             conn.execute(f"UPDATE {TABLE} SET status=?, updated_at=? WHERE id=?", (status, now, ticket_id))
   143:             updated_fields.append("狀態")
   144:         if summary:
   145:             conn.execute(f"UPDATE {TABLE} SET summary=?, updated_at=? WHERE id=?", (summary, now, ticket_id))
   146:             updated_fields.append("摘要")
   147:         conn.commit()
   148: 
   149:     if updated_fields:
   150:         logger.info("工單 #%d 已更新欄位：%s", ticket_id, ", ".join(updated_fields))
   151:     else:
   152:         logger.warning("未指定更新欄位")
   153: 
   154: 
   155: def parse_args():
   156:     parser = argparse.ArgumentParser(description="技術支援工單管理 CLI 工具")
   157:     sub = parser.add_subparsers(dest="command", required=True)
   158: 
   159:     p_create = sub.add_parser("create", help="建立新工單")
   160:     p_create.add_argument("--subject", required=True)
   161:     p_create.add_argument("--content", required=True)
   162:     p_create.add_argument("--summary", default="")
   163:     p_create.add_argument("--sender")
   164:     p_create.add_argument("--category")
   165:     p_create.add_argument("--confidence", type=float)
   166: 
   167:     sub.add_parser("list", help="列出所有工單")
   168: 
   169:     p_show = sub.add_parser("show", help="查詢單一工單")
   170:     p_show.add_argument("--id", required=True, type=int)
   171: 
   172:     p_update = sub.add_parser("update", help="更新工單狀態 / 摘要")
   173:     p_update.add_argument("--id", required=True, type=int)
   174:     p_update.add_argument("--status", choices=["pending", "done"])
   175:     p_update.add_argument("--summary")
   176: 
   177:     return parser.parse_args()
   178: 
   179: 
   180: def main():
   181:     args = parse_args()
   182:     if args.command == "create":
   183:         create_ticket(args.subject, args.content, args.summary, args.sender, args.category, args.confidence)
   184:     elif args.command == "list":
   185:         list_tickets()
   186:     elif args.command == "show":
   187:         show_ticket(args.id)
   188:     elif args.command == "update":
   189:         update_ticket(args.id, args.status, args.summary)
   190: 
   191: 
   192: if __name__ == "__main__":
   193:     main()
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/support_ticket.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/train_classifier.py  (1823 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: import json
     2: 
     3: from datasets import Dataset
     4: from transformers import (
     5:     AutoModelForSequenceClassification,
     6:     AutoTokenizer,
     7:     Trainer,
     8:     TrainingArguments,
     9: )
    10: 
    11: # 類別對應（順序需與原標籤一致）
    12: LABELS = ["請求技術支援", "申請修改資訊", "詢問流程或規則", "投訴與抱怨", "業務接洽或報價", "其他"]
    13: label2id = {label: i for i, label in enumerate(LABELS)}
    14: id2label = {i: label for i, label in enumerate(LABELS)}
    15: 
    16: # 路徑設定
    17: DATA_PATH = "data/train/emails_train.json"
    18: MODEL_OUT = "model/roberta-zh-checkpoint"
    19: PRETRAINED_MODEL = "bert-base-chinese"
    20: 
    21: # 載入資料
    22: with open(DATA_PATH, encoding="utf-8") as f:
    23:     raw_data = json.load(f)
    24: for row in raw_data:
    25:     row["label"] = label2id[row["label"]]
    26: 
    27: # 建立 Dataset
    28: dataset = Dataset.from_list(raw_data)
    29: 
    30: # 分詞器
    31: tokenizer = AutoTokenizer.from_pretrained(PRETRAINED_MODEL)
    32: 
    33: 
    34: def tokenize(batch):
    35:     return tokenizer(
    36:         batch["subject"] + "\n" + batch["content"],
    37:         truncation=True,
    38:         padding="max_length",
    39:         max_length=256,
    40:     )
    41: 
    42: 
    43: encoded_dataset = dataset.map(tokenize)
    44: 
    45: # 模型初始化
    46: model = AutoModelForSequenceClassification.from_pretrained(PRETRAINED_MODEL, num_labels=len(LABELS), label2id=label2id, id2label=id2label)
    47: 
    48: # 訓練參數
    49: args = TrainingArguments(
    50:     output_dir=MODEL_OUT,
    51:     per_device_train_batch_size=8,
    52:     learning_rate=2e-5,
    53:     num_train_epochs=5,
    54:     logging_dir="./logs",
    55:     logging_steps=10,
    56:     save_strategy="epoch",
    57:     report_to="none",
    58: )
    59: 
    60: # Trainer
    61: trainer = Trainer(model=model, args=args, train_dataset=encoded_dataset, tokenizer=tokenizer)
    62: 
    63: # 開始訓練
    64: trainer.train()  # type: ignore[attr-defined]
    65: 
    66: # 儲存模型與 tokenizer
    67: model.save_pretrained(MODEL_OUT)
    68: tokenizer.save_pretrained(MODEL_OUT)
    69: 
    70: print(f"模型已儲存至：{MODEL_OUT}")
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/train_classifier.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/utils/jsonlog.py  (106 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: """Compatibility proxy to canonical implementation."""
     2: 
     3: from utils.jsonlog import log_event  # noqa: F401
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/utils/jsonlog.py
================================================================================
================================================================================
BEGIN FILE  configs/default.yml  (400 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # 專案預設設定（示例，可在 .env 覆寫）
     2: app_env: dev
     3: timezone: Asia/Taipei
     4: offline: true
     5: 
     6: smtp:
     7:   host: smtp.example.com
     8:   port: 587
     9:   user: user@example.com
    10:   pass: please-change
    11:   from: "Smart Mail Agent <noreply@example.com>"
    12: 
    13: paths:
    14:   model_dir: outputs/roberta-zh-checkpoint
    15:   output_dir: data/output
    16:   log_dir: logs
    17: 
    18: security:
    19:   allow_external_call: false
    20: 
    21: spam:
    22:   threshold: 0.5
--------------------------------------------------------------------------------
END FILE    configs/default.yml
================================================================================
================================================================================
BEGIN FILE  configs/samples/policy.yaml  (668 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: rules:
     2:   - name: faq_low_confidence_review
     3:     when:
     4:       label: reply_faq
     5:       max_confidence: 0.6
     6:     effect:
     7:       require_review: true
     8: 
     9:   - name: complaint_high_severity_escalation
    10:     when:
    11:       label: complaint
    12:       severity: high
    13:     effect:
    14:       cc: ["qa@company.example","ops@company.example"]
    15:       require_review: true
    16: 
    17:   - name: attachments_over_limit_review
    18:     when:
    19:       attachments_total_size_gt: 5242880  # 5 MiB
    20:     effect:
    21:       require_review: true
    22:       cc: ["support@company.example"]
    23: 
    24:   - name: sender_domain_whitelist
    25:     when:
    26:       from_domain_in: ["trusted.example","partner.biz"]
    27:     effect:
    28:       set_meta:
    29:         whitelisted: true
--------------------------------------------------------------------------------
END FILE    configs/samples/policy.yaml
================================================================================
================================================================================
BEGIN FILE  configs/samples/spam_rules.yaml  (688 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # 注意：此 YAML 同時可被 JSON loader 解析（僅使用字典/陣列/字串/數字）
     2: keywords:
     3:   # 關鍵詞與分數
     4:   "GET RICH QUICK": 6
     5:   "FREE": 2
     6:   "GIVEAWAY": 3
     7:   "CRYPTO": 2
     8:   "PASSWORD RESET": 2
     9:   "VERIFY YOUR ACCOUNT": 3
    10:   "URGENT": 2
    11: 
    12: suspicious_domains:
    13:   - "bit.ly"
    14:   - "tinyurl.com"
    15:   - "goo.gl"
    16:   - "is.gd"
    17:   - "t.co"
    18: 
    19: suspicious_tlds:
    20:   - "tk"
    21:   - "gq"
    22:   - "ml"
    23:   - "cf"
    24:   - "ga"
    25:   - "top"
    26: 
    27: bad_extensions:
    28:   - ".js"
    29:   - ".vbs"
    30:   - ".exe"
    31:   - ".bat"
    32:   - ".cmd"
    33:   - ".scr"
    34: 
    35: whitelist_domains:
    36:   - "yourcompany.com"
    37:   - "example.com"
    38: 
    39: weights:
    40:   url_suspicious: 4
    41:   tld_suspicious: 3
    42:   attachment_executable: 5
    43:   sender_black: 5
    44: 
    45: thresholds:
    46:   suspect: 4
    47:   spam: 8
--------------------------------------------------------------------------------
END FILE    configs/samples/spam_rules.yaml
================================================================================
================================================================================
BEGIN FILE  LOW_COVERAGE_FILES.txt  (1731 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: 000.0%  actions/__init__.py
     2: 000.0%  email_processor.py
     3: 000.0%  inference_classifier.py
     4: 000.0%  log_writer.py
     5: 000.0%  modules/leads_logger.py
     6: 000.0%  patches/handle_router_patch.py
     7: 000.0%  run_action_handler.py
     8: 000.0%  smart_mail_agent/__main__.py
     9: 000.0%  smart_mail_agent/actions/complaint.py
    10: 000.0%  smart_mail_agent/actions/sales_inquiry.py
    11: 000.0%  smart_mail_agent/cli_spamcheck.py
    12: 000.0%  smart_mail_agent/spam/feature_extractor.py
    13: 000.0%  smart_mail_agent/spam/ml_spam_classifier.py
    14: 000.0%  smart_mail_agent/spam/rule_filter.py
    15: 000.0%  smart_mail_agent/spam/spam_llm_filter.py
    16: 000.0%  smart_mail_agent/utils/config.py
    17: 000.0%  smart_mail_agent/utils/db_tools.py
    18: 000.0%  smart_mail_agent/utils/env.py
    19: 000.0%  smart_mail_agent/utils/errors.py
    20: 000.0%  smart_mail_agent/utils/font_check.py
    21: 000.0%  smart_mail_agent/utils/fonts.py
    22: 000.0%  smart_mail_agent/utils/imap_folder_detector.py
    23: 000.0%  smart_mail_agent/utils/imap_login.py
    24: 000.0%  smart_mail_agent/utils/jsonlog.py
    25: 000.0%  smart_mail_agent/utils/log_writer.py
    26: 000.0%  smart_mail_agent/utils/logging_setup.py
    27: 000.0%  smart_mail_agent/utils/pdf_generator.py
    28: 000.0%  smart_mail_agent/utils/pdf_safe.py
    29: 000.0%  smart_mail_agent/utils/priority_evaluator.py
    30: 000.0%  smart_mail_agent/utils/rag_reply.py
    31: 000.0%  smart_mail_agent/utils/templater.py
    32: 000.0%  smart_mail_agent/utils/tracing.py
    33: 000.0%  smart_mail_agent/utils/validators.py
    34: 000.0%  spam/feature_extractor.py
    35: 000.0%  spam/ml_spam_classifier.py
    36: 000.0%  spam/rule_filter.py
    37: 000.0%  spam/rules.py
    38: 000.0%  support_ticket.py
    39: 000.0%  train_classifier.py
    40: 000.0%  utils/jsonlog.py
    41: 019.5%  smart_mail_agent/spam/rules.py
    42: 037.5%  patches/handle_safe_patch.py
    43: 037.6%  send_with_attachment.py
    44: 040.0%  smart_mail_agent/spam/pipeline.py
--------------------------------------------------------------------------------
END FILE    LOW_COVERAGE_FILES.txt
================================================================================
================================================================================
BEGIN FILE  Makefile  (1438 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .PHONY: help lint test test-offline test-online cov-offline demo-send
     2: 
     3: help: ## 列出可用目標
     4: 	@grep -E '^[a-zA-Z_-]+:.*?##' Makefile | sed -E 's/:.*?##/: /' | sort
     5: 
     6: lint: ## ruff 稽核（使用 .ruff.toml）
     7: 	ruff check .
     8: 
     9: test: test-offline ## 等同 test-offline
    10: 
    11: test-offline: ## 跑整包離線測試（不會連網）；CI 預設跑這個
    12: 	OFFLINE=1 PYTHONPATH=".:src" pytest -q
    13: 
    14: cov-offline: ## 產 XML 覆蓋率（離線）
    15: 	OFFLINE=1 PYTHONPATH=".:src" pytest -q --cov=src --cov-config=.coveragerc --cov-report=term-missing:skip-covered --cov-report=xml:reports/coverage-offline.xml --cov-fail-under=60
    16: 
    17: test-online: ## 線上寄信冒煙（需先 export SMTP_* / REPLY_TO；OFFLINE=0）
    18: 	OFFLINE=0 PYTHONPATH=".:src" pytest -q -rs --online tests/test_mailer_online.py -k test_smtp_live_send_ok
    19: 
    20: demo-send: ## 直接寄一封測試信（不透過 pytest）
    21: 
    22: tests-spam-and-flows: ## 僅跑本批 SPAM/分類/動作/錯誤情境測試
    23: 	OFFLINE=1 PYTHONPATH=.:src pytest -q -k "spam or inference_classifier_errors or online_send_paths" -rs
    24: 	OFFLINE=0 PYTHONPATH=".:src" python scripts/online_check.py
    25: 
    26: 
    27: tests-spam-orchestrator: ## 只跑離線 Spam orchestrator 行為/錯誤測
    28: 	OFFLINE=1 PYTHONPATH=".:src" pytest -q -k "offline_orchestrator" -rs
    29: 
    30: tests-spam-and-flows: ## 跑本輪新增的 spam & flow 測試集合
    31: 	OFFLINE=1 PYTHONPATH=".:src" pytest -q -k "spam or inference_classifier_errors or online_send_paths" -rs
--------------------------------------------------------------------------------
END FILE    Makefile
================================================================================
================================================================================
BEGIN FILE  pyproject.toml  (445 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [tool.black]
     2: line-length = 100
     3: target-version = ["py310"]
     4: include = "\\.pyi?$"
     5: extend-exclude = "build|dist|.venv"
     6: 
     7: [tool.isort]
     8: profile = "black"
     9: line_length = 100
    10: src_paths = ["src", "tests"]
    11: 
    12: [tool.ruff]
    13: target-version = "py310"
    14: line-length = 100
    15: extend-select = ["E", "F", "I", "UP"]
    16: ignore = ["E501"]
    17: src = ["src", "tests"]
    18: 
    19: [tool.coverage.run]
    20: branch = true
    21: source = ["src"]
    22: 
    23: [tool.coverage.report]
    24: show_missing = true
    25: skip_covered = true
--------------------------------------------------------------------------------
END FILE    pyproject.toml
================================================================================
================================================================================
BEGIN FILE  pytest.ini  (76 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [pytest]
     2: markers =
     3:     online: tests requiring network or external services
--------------------------------------------------------------------------------
END FILE    pytest.ini
================================================================================
================================================================================
BEGIN FILE  README.md  (1791 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [![CI](https://github.com/YOU-JIE-hub/smart-mail-agent/actions/workflows/ci.yml/badge.svg)](https://github.com/YOU-JIE-hub/smart-mail-agent/actions/workflows/ci.yml)
     2: 
     3: <!-- BADGES START -->
     4: <!-- BADGES END -->
     5: 
     6: # Smart Mail Agent
     7: 
     8: 最小可演示的郵件自動化專案（離線可驗證）。已整理結構、提供 CLI 與離線測試，適合面試展示。
     9: 
    10: ## 結構
    11: - `src/smart_mail_agent/`：核心與功能模組（routing / features / observability / spam）
    12: - `src/`：向後相容 shims
    13: - `tests/`：單元與離線測試
    14: 
    15: ## 安裝與測試（離線）
    16: 1. 建立虛擬環境並安裝：
    17:    - `python -m venv .venv && . .venv/bin/activate`
    18:    - `python -m pip install -U pip`
    19:    - `pip install -e . || pip install -r requirements.txt`
    20: 2. 執行離線測試：
    21:    - `OFFLINE=1 PYTHONPATH=".:src" pytest -q tests -k "not online" --timeout=60 --timeout-method=thread`
    22: 
    23: ## CLI
    24: - 初始化統計資料庫（stdout: 資料庫初始化完成）  
    25:   `python src/stats_collector.py --init`
    26: - 新增統計（stdout: 已新增統計紀錄）  
    27:   `python src/stats_collector.py --label 投訴 --elapsed 0.56`
    28: 
    29: ## PDF 中文字型
    30: - 將 `NotoSansTC-Regular.ttf` 放在 `assets/fonts/`  
    31: - 或在 `.env` 設：`FONT_TTC_PATH=assets/fonts/NotoSansTC-Regular.ttf`
    32: 
    33: ## Online email demo
    34: 
    35: 1) 申請 SMTP 帳密（Gmail 請開啟 2FA 並建立 App Password）。  
    36: 2) 匯入環境變數（或複製 `.env.example` 自行填入再 `export`）：
    37: ```bash
    38: export OFFLINE=0
    39: export SMTP_USER="you@gmail.com"
    40: export SMTP_PASS="your-app-password"
    41: export SMTP_HOST="smtp.gmail.com"
    42: export SMTP_PORT="465"
    43: export REPLY_TO="you@gmail.com"
    44: 跑線上冒煙（會實際寄信）：
    45: 
    46: bash
    47: Copy
    48: Edit
    49: make test-online
    50: # 或：make demo-send
    51: Offline quick check
    52: bash
    53: Copy
    54: Edit
    55: make lint
    56: make test
    57: make cov-offline
--------------------------------------------------------------------------------
END FILE    README.md
================================================================================
================================================================================
BEGIN FILE  repo-inventory-20250816-084630.txt  (22752 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: ==== REPO INVENTORY ====
     2: Repo : /home/youjie/projects/smart-mail-agent
     3: Branch: showcase/portfolio-clean-20250816-054936
     4: 
     5: == Git status ==
     6: ?? data/
     7: ?? repo-inventory-20250816-084630.txt
     8: 
     9: == Top-level (ls -la) ==
    10: total 84
    11: drwxr-xr-x 15 youjie youjie 4096 Aug 16 08:46 .
    12: drwxr-xr-x  6 youjie youjie 4096 Aug 16 05:54 ..
    13: drwxr-xr-x  7 youjie youjie 4096 Aug 16 05:49 .archive
    14: drwxr-xr-x  8 youjie youjie 4096 Aug 16 08:46 .git
    15: -rw-r--r--  1 youjie youjie   33 Aug 16 05:54 .gitattributes
    16: drwxr-xr-x  5 youjie youjie 4096 Aug 15 22:54 .github
    17: -rw-r--r--  1 youjie youjie  148 Aug 16 05:54 .gitignore
    18: drwxr-xr-x  9 youjie youjie 4096 Aug 16 05:49 .portfolio_hidden
    19: drwxr-xr-x  3 youjie youjie 4096 Aug 15 05:33 .pytest_cache
    20: drwxr-xr-x  3 youjie youjie 4096 Aug 15 05:33 .ruff_cache
    21: drwxr-xr-x  7 youjie youjie 4096 Aug 15 05:00 .venv
    22: -rw-r--r--  1 youjie youjie 1064 Aug 15 02:53 LICENSE
    23: -rw-r--r--  1 youjie youjie 2654 Aug 16 05:54 README.md
    24: drwxr-xr-x  3 youjie youjie 4096 Aug 16 02:04 configs
    25: drwxr-xr-x  4 youjie youjie 4096 Aug 16 07:59 data
    26: -rw-r--r--  1 youjie youjie 1181 Aug 16 05:49 pyproject.toml
    27: -rw-r--r--  1 youjie youjie  211 Aug 16 08:46 repo-inventory-20250816-084630.txt
    28: drwxr-xr-x  3 youjie youjie 4096 Aug 16 03:24 scripts
    29: drwxr-xr-x 11 youjie youjie 4096 Aug 16 05:49 src
    30: drwxr-xr-x  6 youjie youjie 4096 Aug 16 07:59 tests
    31: drwxr-xr-x  2 youjie youjie 4096 Aug 16 05:49 tools
    32: 
    33: == Top-level dirs with sizes (du -h -d1) ==
    34: 8.0K	./tools
    35: 20K	./configs
    36: 20K	./scripts
    37: 36K	./.pytest_cache
    38: 68K	./.github
    39: 84K	./data
    40: 104K	./.archive
    41: 104K	./.ruff_cache
    42: 360K	./tests
    43: 456K	./.portfolio_hidden
    44: 644K	./src
    45: 7.4G	./.venv
    46: 13G	./.git
    47: 21G	.
    48: 
    49: == Full tree (filtered heavy internals) ==
    50: .
    51: ├── .archive
    52: │   ├── README.md.bak
    53: │   ├── cli
    54: │   │   ├── run_classifier.py
    55: │   │   ├── run_generate_spam_testcases.py
    56: │   │   ├── run_llm_filter.py
    57: │   │   ├── run_main.py
    58: │   │   ├── run_orchestrator.py
    59: │   │   ├── run_rule_filter.py
    60: │   │   ├── run_spam_classifier.py
    61: │   │   └── run_spam_filter.py
    62: │   ├── pipeline
    63: │   │   ├── main.py
    64: │   │   └── main1.py
    65: │   ├── pyproject.toml.bak
    66: │   ├── requirements
    67: │   │   ├── requirements-dev.txt
    68: │   │   └── requirements.txt
    69: │   ├── spam
    70: │   │   ├── __init__.py
    71: │   │   └── spam_filter_orchestrator.py
    72: │   └── src
    73: │       └── cli
    74: ├── .gitattributes
    75: ├── .github
    76: │   ├── ISSUE_TEMPLATE
    77: │   │   └── bug_report.md
    78: │   ├── PULL_REQUEST_TEMPLATE.md
    79: │   ├── dependabot.yml
    80: │   ├── workflows
    81: │   │   └── tests.yml
    82: │   └── workflows-archive
    83: │       ├── ci-offline.yml
    84: │       ├── ci.yaml
    85: │       ├── docker-ghcr.yml
    86: │       ├── interview-addon.yml
    87: │       ├── interview.yml
    88: │       ├── nightly.yml
    89: │       ├── offline-ci.yml
    90: │       ├── release.yml
    91: │       └── security.yml
    92: ├── .gitignore
    93: ├── .portfolio_hidden
    94: │   ├── .archive
    95: │   │   └── spam
    96: │   ├── .dev
    97: │   │   ├── __init__.py
    98: │   │   ├── apply_classifier_fallback_fix_v1.py
    99: │   │   ├── apply_docker_ci_v1.py
   100: │   │   ├── apply_fix_log_writer_v1.py
   101: │   │   ├── apply_fix_round9.py
   102: │   │   ├── apply_imap_debug_v2.py
   103: │   │   ├── apply_mailer_online_tests_v1.py
   104: │   │   ├── bootstrap_gh_ci.sh
   105: │   │   ├── check_env.py
   106: │   │   ├── ci.mk
   107: │   │   ├── cleanup_repo.py
   108: │   │   ├── db_migrate_emails_log.py
   109: │   │   ├── dedup_cleanup.sh
   110: │   │   ├── dedupe_requirements.py
   111: │   │   ├── dev_runner.py
   112: │   │   ├── finalize_and_push.sh
   113: │   │   ├── fix_from_pretrained_order.py
   114: │   │   ├── fix_from_pretrained_order_v2.py
   115: │   │   ├── fix_from_pretrained_order_v3.py
   116: │   │   ├── generate_offline_report.py
   117: │   │   ├── generate_spam_report.py
   118: │   │   ├── gh_device_login.sh
   119: │   │   ├── git_setup_and_tag.py
   120: │   │   ├── imap_pass_sanitize.py
   121: │   │   ├── make_share_bundle.sh
   122: │   │   ├── metrics_daily.py
   123: │   │   ├── offline_verify.py
   124: │   │   ├── one_paste_ship.py
   125: │   │   ├── one_shot_patch_and_run.sh
   126: │   │   ├── project_catalog.py
   127: │   │   ├── push_secrets_from_env.sh
   128: │   │   ├── repo_tidy.py
   129: │   │   ├── run_actions_matrix.py
   130: │   │   ├── run_spam_demo.py
   131: │   │   ├── set_imap_pass.py
   132: │   │   ├── set_smtp_pass.py
   133: │   │   ├── show_summary.sh
   134: │   │   └── verify_pdf_degrade.py
   135: │   ├── .dockerignore
   136: │   ├── .editorconfig
   137: │   ├── .env.example
   138: │   ├── .envrc
   139: │   ├── .flake8
   140: │   ├── .gitattributes
   141: │   ├── .github
   142: │   │   └── workflows
   143: │   ├── .gitignore
   144: │   ├── .pre-commit-config.yaml
   145: │   ├── .pre-commit-config.yaml.bak.before-black-removal
   146: │   ├── CHANGELOG.md
   147: │   ├── CODE_OF_CONDUCT.md
   148: │   ├── CONTRIBUTING.md
   149: │   ├── Dockerfile
   150: │   ├── MANIFEST.in
   151: │   ├── Makefile
   152: │   ├── SECURITY.md
   153: │   ├── assets
   154: │   │   └── fonts
   155: │   ├── bootstrap_project.py
   156: │   ├── data
   157: │   │   ├── db
   158: │   │   └── output
   159: │   ├── docs
   160: │   │   ├── architecture.md
   161: │   │   ├── cli.md
   162: │   │   ├── index.md
   163: │   │   └── usage.md
   164: │   ├── mkdocs.yml
   165: │   ├── pyproject.toml.bak.pre-fix-20250816-003526
   166: │   ├── pytest.ini
   167: │   └── templates
   168: │       ├── complaint_high.j2
   169: │       ├── complaint_low.j2
   170: │       ├── complaint_med.j2
   171: │       ├── needs_summary.md.j2
   172: │       └── sales_inquiry_reply.j2
   173: ├── LICENSE
   174: ├── README.md
   175: ├── configs
   176: │   ├── default.yml
   177: │   └── samples
   178: │       ├── policy.yaml
   179: │       └── spam_rules.yaml
   180: ├── data
   181: │   ├── db
   182: │   └── output
   183: │       ├── attachment_20250816_055419.pdf
   184: │       ├── attachment_20250816_060051.pdf
   185: │       ├── attachment_20250816_060526.pdf
   186: │       ├── attachment_20250816_060547.pdf
   187: │       ├── attachment_20250816_074320.pdf
   188: │       ├── attachment_20250816_074748.pdf
   189: │       ├── attachment_20250816_075051.pdf
   190: │       ├── attachment_20250816_075908.pdf
   191: │       ├── matrix
   192: │       ├── quote-基礎-20250816-055419.pdf
   193: │       ├── quote-基礎-20250816-060051.pdf
   194: │       ├── quote-基礎-20250816-060526.pdf
   195: │       ├── quote-基礎-20250816-060548.pdf
   196: │       ├── quote-基礎-20250816-074320.pdf
   197: │       ├── quote-基礎-20250816-074748.pdf
   198: │       ├── quote-基礎-20250816-075051.pdf
   199: │       └── quote-基礎-20250816-075908.pdf
   200: ├── pyproject.toml
   201: ├── repo-inventory-20250816-084630.txt
   202: ├── scripts
   203: │   ├── bin
   204: │   │   └── smarun
   205: │   ├── run_pipeline.sh
   206: │   └── setup_env.sh
   207: ├── src
   208: │   ├── __init__.py
   209: │   ├── action_handler.py
   210: │   ├── actions
   211: │   │   └── __init__.py
   212: │   ├── classifier.py
   213: │   ├── email_processor.py
   214: │   ├── inference_classifier.py
   215: │   ├── init_db.py
   216: │   ├── log_writer.py
   217: │   ├── modules
   218: │   │   ├── __init__.py
   219: │   │   ├── apply_diff.py
   220: │   │   ├── leads_logger.py
   221: │   │   ├── quotation.py
   222: │   │   ├── quote_logger.py
   223: │   │   └── sales_notifier.py
   224: │   ├── observability
   225: │   │   └── tracing.py
   226: │   ├── patches
   227: │   │   ├── __init__.py
   228: │   │   ├── handle_router_patch.py
   229: │   │   └── handle_safe_patch.py
   230: │   ├── policy_engine.py
   231: │   ├── requirements.txt
   232: │   ├── run_action_handler.py
   233: │   ├── run_action_handler.py.bak.20250813-070746
   234: │   ├── run_action_handler.py.bak.20250813-081617
   235: │   ├── run_action_handler.py.bak.20250813-082258
   236: │   ├── run_action_handler.py.bak.20250813-083058
   237: │   ├── run_action_handler.py.bak.20250813-083230
   238: │   ├── send_with_attachment.py
   239: │   ├── sitecustomize.py
   240: │   ├── sma_types.py
   241: │   ├── smart_mail_agent
   242: │   │   ├── __init__.py
   243: │   │   ├── __main__.py
   244: │   │   ├── __version__.py
   245: │   │   ├── actions
   246: │   │   ├── cli
   247: │   │   ├── cli_spamcheck.py
   248: │   │   ├── policy_engine.py
   249: │   │   ├── sma_types.py
   250: │   │   ├── spam
   251: │   │   └── utils
   252: │   ├── spam
   253: │   │   ├── __init__.py
   254: │   │   ├── feature_extractor.py
   255: │   │   ├── ml_spam_classifier.py
   256: │   │   ├── pipeline.py
   257: │   │   ├── rule_filter.py
   258: │   │   ├── rules.py
   259: │   │   └── spam_filter_orchestrator.py
   260: │   ├── stats_collector.py
   261: │   ├── support_ticket.py
   262: │   ├── train_classifier.py
   263: │   ├── trainers
   264: │   │   └── train_bert_spam_classifier.py
   265: │   └── utils
   266: │       ├── .keep
   267: │       ├── __init__.py
   268: │       ├── jsonlog.py
   269: │       ├── logger.py
   270: │       └── mailer.py
   271: ├── tests
   272: │   ├── .keep
   273: │   ├── conftest.py
   274: │   ├── contracts
   275: │   │   ├── conftest.py
   276: │   │   └── test_action_result_contracts.py
   277: │   ├── e2e
   278: │   │   ├── conftest.py
   279: │   │   ├── test_actions_matrix_ext.py
   280: │   │   ├── test_cli_flags.py
   281: │   │   ├── test_cli_scripts.py
   282: │   │   ├── test_cli_scripts.py.bak.20250813-081617
   283: │   │   ├── test_complaint_policy.py
   284: │   │   ├── test_label_routing_offline.py
   285: │   │   ├── test_label_routing_offline.py.bak.20250813-081617
   286: │   │   ├── test_new_intents.py
   287: │   │   ├── test_offline_suite.py
   288: │   │   ├── test_policy_expansion.py
   289: │   │   ├── test_runner.py
   290: │   │   ├── test_sales_and_complaint.py
   291: │   │   ├── test_sales_inquiry_needs_summary.py
   292: │   │   ├── test_send_quote_degrade.py
   293: │   │   └── test_spam_pipeline.py
   294: │   ├── test_action_handler.py
   295: │   ├── test_apply_diff.py
   296: │   ├── test_classifier.py
   297: │   ├── test_init_db.py
   298: │   ├── test_init_emails_log_db.py
   299: │   ├── test_init_processed_mails_db.py
   300: │   ├── test_init_tickets_db.py
   301: │   ├── test_mailer.py
   302: │   ├── test_mailer_online.py
   303: │   ├── test_quotation.py
   304: │   ├── test_quote_logger.py
   305: │   ├── test_sales_notifier.py
   306: │   ├── test_send_with_attachment.py
   307: │   ├── test_spam_filter.py
   308: │   ├── test_stats_collector.py
   309: │   └── unit
   310: │       ├── test_contracts.py
   311: │       ├── test_policy_engine.py
   312: │       ├── test_policy_minimal.py
   313: │       ├── test_spam_stack.py
   314: │       ├── test_spam_stack.py.bak.20250813-081730
   315: │       ├── test_tasks_minimal.py
   316: │       └── test_tasks_minimal.py.bak.20250813-081730
   317: └── tools
   318:     └── run_actions_matrix.py
   319: 
   320: 50 directories, 218 files
   321: 
   322: == src (depth=2) ==
   323: src
   324: ├── __init__.py
   325: ├── action_handler.py
   326: ├── actions
   327: │   └── __init__.py
   328: ├── classifier.py
   329: ├── email_processor.py
   330: ├── inference_classifier.py
   331: ├── init_db.py
   332: ├── log_writer.py
   333: ├── modules
   334: │   ├── __init__.py
   335: │   ├── apply_diff.py
   336: │   ├── leads_logger.py
   337: │   ├── quotation.py
   338: │   ├── quote_logger.py
   339: │   └── sales_notifier.py
   340: ├── observability
   341: │   └── tracing.py
   342: ├── patches
   343: │   ├── __init__.py
   344: │   ├── handle_router_patch.py
   345: │   └── handle_safe_patch.py
   346: ├── policy_engine.py
   347: ├── requirements.txt
   348: ├── run_action_handler.py
   349: ├── run_action_handler.py.bak.20250813-070746
   350: ├── run_action_handler.py.bak.20250813-081617
   351: ├── run_action_handler.py.bak.20250813-082258
   352: ├── run_action_handler.py.bak.20250813-083058
   353: ├── run_action_handler.py.bak.20250813-083230
   354: ├── send_with_attachment.py
   355: ├── sitecustomize.py
   356: ├── sma_types.py
   357: ├── smart_mail_agent
   358: │   ├── __init__.py
   359: │   ├── __main__.py
   360: │   ├── __version__.py
   361: │   ├── actions
   362: │   ├── cli
   363: │   ├── cli_spamcheck.py
   364: │   ├── policy_engine.py
   365: │   ├── sma_types.py
   366: │   ├── spam
   367: │   └── utils
   368: ├── spam
   369: │   ├── __init__.py
   370: │   ├── feature_extractor.py
   371: │   ├── ml_spam_classifier.py
   372: │   ├── pipeline.py
   373: │   ├── rule_filter.py
   374: │   ├── rules.py
   375: │   └── spam_filter_orchestrator.py
   376: ├── stats_collector.py
   377: ├── support_ticket.py
   378: ├── train_classifier.py
   379: ├── trainers
   380: │   └── train_bert_spam_classifier.py
   381: └── utils
   382:     ├── .keep
   383:     ├── __init__.py
   384:     ├── jsonlog.py
   385:     ├── logger.py
   386:     └── mailer.py
   387: 
   388: 12 directories, 51 files
   389: 
   390: == tests (depth=2) ==
   391: tests
   392: ├── .keep
   393: ├── conftest.py
   394: ├── contracts
   395: │   ├── conftest.py
   396: │   └── test_action_result_contracts.py
   397: ├── e2e
   398: │   ├── conftest.py
   399: │   ├── test_actions_matrix_ext.py
   400: │   ├── test_cli_flags.py
   401: │   ├── test_cli_scripts.py
   402: │   ├── test_cli_scripts.py.bak.20250813-081617
   403: │   ├── test_complaint_policy.py
   404: │   ├── test_label_routing_offline.py
   405: │   ├── test_label_routing_offline.py.bak.20250813-081617
   406: │   ├── test_new_intents.py
   407: │   ├── test_offline_suite.py
   408: │   ├── test_policy_expansion.py
   409: │   ├── test_runner.py
   410: │   ├── test_sales_and_complaint.py
   411: │   ├── test_sales_inquiry_needs_summary.py
   412: │   ├── test_send_quote_degrade.py
   413: │   └── test_spam_pipeline.py
   414: ├── test_action_handler.py
   415: ├── test_apply_diff.py
   416: ├── test_classifier.py
   417: ├── test_init_db.py
   418: ├── test_init_emails_log_db.py
   419: ├── test_init_processed_mails_db.py
   420: ├── test_init_tickets_db.py
   421: ├── test_mailer.py
   422: ├── test_mailer_online.py
   423: ├── test_quotation.py
   424: ├── test_quote_logger.py
   425: ├── test_sales_notifier.py
   426: ├── test_send_with_attachment.py
   427: ├── test_spam_filter.py
   428: ├── test_stats_collector.py
   429: └── unit
   430:     ├── test_contracts.py
   431:     ├── test_policy_engine.py
   432:     ├── test_policy_minimal.py
   433:     ├── test_spam_stack.py
   434:     ├── test_spam_stack.py.bak.20250813-081730
   435:     ├── test_tasks_minimal.py
   436:     └── test_tasks_minimal.py.bak.20250813-081730
   437: 
   438: 3 directories, 42 files
   439: 
   440: == tools (depth=2) ==
   441: tools
   442: └── run_actions_matrix.py
   443: 
   444: 0 directories, 1 file
   445: 
   446: == configs (depth=2) ==
   447: configs
   448: ├── default.yml
   449: └── samples
   450:     ├── policy.yaml
   451:     └── spam_rules.yaml
   452: 
   453: 1 directory, 3 files
   454: 
   455: == data (depth=2) ==
   456: data
   457: ├── db
   458: └── output
   459:     ├── attachment_20250816_055419.pdf
   460:     ├── attachment_20250816_060051.pdf
   461:     ├── attachment_20250816_060526.pdf
   462:     ├── attachment_20250816_060547.pdf
   463:     ├── attachment_20250816_074320.pdf
   464:     ├── attachment_20250816_074748.pdf
   465:     ├── attachment_20250816_075051.pdf
   466:     ├── attachment_20250816_075908.pdf
   467:     ├── matrix
   468:     ├── quote-基礎-20250816-055419.pdf
   469:     ├── quote-基礎-20250816-060051.pdf
   470:     ├── quote-基礎-20250816-060526.pdf
   471:     ├── quote-基礎-20250816-060548.pdf
   472:     ├── quote-基礎-20250816-074320.pdf
   473:     ├── quote-基礎-20250816-074748.pdf
   474:     ├── quote-基礎-20250816-075051.pdf
   475:     └── quote-基礎-20250816-075908.pdf
   476: 
   477: 3 directories, 16 files
   478: 
   479: == .portfolio_hidden (depth=2) ==
   480: .portfolio_hidden
   481: ├── .archive
   482: │   └── spam
   483: ├── .dev
   484: │   ├── __init__.py
   485: │   ├── apply_classifier_fallback_fix_v1.py
   486: │   ├── apply_docker_ci_v1.py
   487: │   ├── apply_fix_log_writer_v1.py
   488: │   ├── apply_fix_round9.py
   489: │   ├── apply_imap_debug_v2.py
   490: │   ├── apply_mailer_online_tests_v1.py
   491: │   ├── bootstrap_gh_ci.sh
   492: │   ├── check_env.py
   493: │   ├── ci.mk
   494: │   ├── cleanup_repo.py
   495: │   ├── db_migrate_emails_log.py
   496: │   ├── dedup_cleanup.sh
   497: │   ├── dedupe_requirements.py
   498: │   ├── dev_runner.py
   499: │   ├── finalize_and_push.sh
   500: │   ├── fix_from_pretrained_order.py
   501: │   ├── fix_from_pretrained_order_v2.py
   502: │   ├── fix_from_pretrained_order_v3.py
   503: │   ├── generate_offline_report.py
   504: │   ├── generate_spam_report.py
   505: │   ├── gh_device_login.sh
   506: │   ├── git_setup_and_tag.py
   507: │   ├── imap_pass_sanitize.py
   508: │   ├── make_share_bundle.sh
   509: │   ├── metrics_daily.py
   510: │   ├── offline_verify.py
   511: │   ├── one_paste_ship.py
   512: │   ├── one_shot_patch_and_run.sh
   513: │   ├── project_catalog.py
   514: │   ├── push_secrets_from_env.sh
   515: │   ├── repo_tidy.py
   516: │   ├── run_actions_matrix.py
   517: │   ├── run_spam_demo.py
   518: │   ├── set_imap_pass.py
   519: │   ├── set_smtp_pass.py
   520: │   ├── show_summary.sh
   521: │   └── verify_pdf_degrade.py
   522: ├── .dockerignore
   523: ├── .editorconfig
   524: ├── .env.example
   525: ├── .envrc
   526: ├── .flake8
   527: ├── .gitattributes
   528: ├── .github
   529: │   └── workflows
   530: ├── .gitignore
   531: ├── .pre-commit-config.yaml
   532: ├── .pre-commit-config.yaml.bak.before-black-removal
   533: ├── CHANGELOG.md
   534: ├── CODE_OF_CONDUCT.md
   535: ├── CONTRIBUTING.md
   536: ├── Dockerfile
   537: ├── MANIFEST.in
   538: ├── Makefile
   539: ├── SECURITY.md
   540: ├── assets
   541: │   └── fonts
   542: ├── bootstrap_project.py
   543: ├── data
   544: │   ├── db
   545: │   └── output
   546: ├── docs
   547: │   ├── architecture.md
   548: │   ├── cli.md
   549: │   ├── index.md
   550: │   └── usage.md
   551: ├── mkdocs.yml
   552: ├── pyproject.toml.bak.pre-fix-20250816-003526
   553: ├── pytest.ini
   554: └── templates
   555:     ├── complaint_high.j2
   556:     ├── complaint_low.j2
   557:     ├── complaint_med.j2
   558:     ├── needs_summary.md.j2
   559:     └── sales_inquiry_reply.j2
   560: 
   561: 12 directories, 67 files
   562: 
   563: == Large files > 10MB (working tree) ==
   564: 11M	./.venv/lib/python3.10/site-packages/pyarrow/libparquet.so.2100
   565: 12M	./.venv/lib/python3.10/site-packages/pydeck/nbextension/static/index.js.map
   566: 12M	./.venv/lib/python3.10/site-packages/triton/_C/libproton.so
   567: 12M	./.venv/share/jupyter/nbextensions/pydeck/index.js.map
   568: 19M	./.venv/lib/python3.10/site-packages/pyarrow/libarrow_compute.so.2100
   569: 20M	./.venv/lib/python3.10/site-packages/pyarrow/libarrow_flight.so.2100
   570: 22M	./.venv/lib/python3.10/site-packages/scipy.libs/libscipy_openblas-68440149.so
   571: 23M	./.venv/lib/python3.10/site-packages/nvidia/cudnn/lib/libcudnn_engines_runtime_compiled.so.9
   572: 25M	./.venv/lib/python3.10/site-packages/nvidia/cuda_cupti/lib/libnvperf_host.so
   573: 25M	./.venv/lib/python3.10/site-packages/triton/backends/nvidia/lib/cupti/libnvperf_host.so
   574: 27M	./.venv/lib/python3.10/site-packages/torch/lib/libtorch_python.so
   575: 31M	./.venv/lib/python3.10/site-packages/triton/backends/nvidia/bin/ptxas
   576: 32M	./.venv/lib/python3.10/site-packages/triton/backends/nvidia/lib/cupti/libnvperf_host_static.a
   577: 34M	./.venv/bin/ruff
   578: 34M	./.venv/lib/python3.10/site-packages/numpy.libs/libopenblas64_p-r0-0cf96a72.3.23.dev.so
   579: 42M	./.venv/lib/python3.10/site-packages/triton/backends/nvidia/lib/cupti/libcupti_static.a
   580: 47M	./.venv/lib/python3.10/site-packages/pyarrow/libarrow.so.2100
   581: 57M	./.venv/lib/python3.10/site-packages/nvidia/cudnn/lib/libcudnn_heuristic.so.9
   582: 90M	./.venv/lib/python3.10/site-packages/nvidia/nvjitlink/lib/libnvJitLink.so.12
   583: 100M	./.venv/lib/python3.10/site-packages/nvidia/cuda_nvrtc/lib/libnvrtc.so.12
   584: 101M	./.venv/lib/python3.10/site-packages/nvidia/cuda_nvrtc/lib/libnvrtc.alt.so.12
   585: 112M	./.venv/lib/python3.10/site-packages/nvidia/cublas/lib/libcublas.so.12
   586: 122M	./.venv/lib/python3.10/site-packages/torch/lib/libtorch_cuda_linalg.so
   587: 123M	./.venv/lib/python3.10/site-packages/nvidia/cudnn/lib/libcudnn_ops.so.9
   588: 131M	./.venv/lib/python3.10/site-packages/nvidia/curand/lib/libcurand.so.10
   589: 155M	./.venv/lib/python3.10/site-packages/nvidia/cusolver/lib/libcusolverMg.so.11
   590: 233M	./.venv/lib/python3.10/site-packages/nvidia/cusolver/lib/libcusolver.so.11
   591: 267M	./.venv/lib/python3.10/site-packages/nvidia/cufft/lib/libcufft.so.11
   592: 273M	./.venv/lib/python3.10/site-packages/nvidia/cudnn/lib/libcudnn_adv.so.9
   593: 337M	./.venv/lib/python3.10/site-packages/triton/_C/libtriton.so
   594: 371M	./.venv/lib/python3.10/site-packages/nvidia/cusparse/lib/libcusparse.so.12
   595: 410M	./.venv/lib/python3.10/site-packages/nvidia/nccl/lib/libnccl.so.2
   596: 411M	./.venv/lib/python3.10/site-packages/torch/lib/libtorch_cpu.so
   597: 432M	./.venv/lib/python3.10/site-packages/nvidia/cusparselt/lib/libcusparseLt.so.0
   598: 523M	./.venv/lib/python3.10/site-packages/nvidia/cudnn/lib/libcudnn_engines_precompiled.so.9
   599: 717M	./.venv/lib/python3.10/site-packages/nvidia/cublas/lib/libcublasLt.so.12
   600: 969M	./.venv/lib/python3.10/site-packages/torch/lib/libtorch_cuda.so
   601: 
   602: == Tracked __pycache__ (should be none) ==
   603: 
   604: == Backup/duplicate-like files (src only) ==
   605: 
   606: == Both-root-and-package duplicates (names only) ==
   607: DUP: src/policy_engine.py  AND  src/smart_mail_agent/policy_engine.py
   608: DUP: src/sma_types.py  AND  src/smart_mail_agent/sma_types.py
   609: 
--------------------------------------------------------------------------------
END FILE    repo-inventory-20250816-084630.txt
================================================================================
================================================================================
BEGIN FILE  reports/audit-last-collect.txt  (41 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: reports/tests-collect-20250816-125637.txt
--------------------------------------------------------------------------------
END FILE    reports/audit-last-collect.txt
================================================================================
================================================================================
BEGIN FILE  reports/audit-last-coverage.txt  (61 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: /home/youjie/smart-mail-agent/reports/html-offline/index.html
--------------------------------------------------------------------------------
END FILE    reports/audit-last-coverage.txt
================================================================================
================================================================================
BEGIN FILE  reports/audit-last.txt  (32 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: reports/tree-20250816-125637.txt
--------------------------------------------------------------------------------
END FILE    reports/audit-last.txt
================================================================================
================================================================================
BEGIN FILE  reports/audit-summary.md  (454 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Audit Summary
     2: 
     3: - Tree report: `reports/tree-20250816-125637.txt`
     4: - Pytest collection: `reports/tests-collect-20250816-125637.txt`
     5: - Coverage HTML: `/home/youjie/smart-mail-agent/reports/html-offline/index.html`
     6: - Coverage XML: `/home/youjie/smart-mail-agent/reports/coverage-offline.xml`
     7: - Coverage badge (local): `/home/youjie/smart-mail-agent/assets/badges/coverage.svg`
     8: 
     9: > 提示：打開 HTML 覆蓋率即可看到「未覆蓋檔案與行數」。
--------------------------------------------------------------------------------
END FILE    reports/audit-summary.md
================================================================================
================================================================================
BEGIN FILE  reports/tests-collect-20250816-125637.txt  (8674 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: tests/e2e/test_actions_matrix_ext.py::test_happy_paths
     2: tests/e2e/test_actions_matrix_ext.py::test_edge_cases
     3: tests/e2e/test_cli_flags.py::test_dry_run_flag
     4: tests/e2e/test_cli_flags.py::test_simulate_pdf_failure
     5: tests/e2e/test_cli_scripts.py::test_cli_run_main_help
     6: tests/e2e/test_cli_scripts.py::test_cli_run_classifier_help
     7: tests/e2e/test_cli_scripts.py::test_cli_run_orchestrator_help
     8: tests/e2e/test_complaint_policy.py::test_complaint_high_triggers_p1_and_cc
     9: tests/e2e/test_label_routing_offline.py::test_label_send_quote
    10: tests/e2e/test_label_routing_offline.py::test_label_reply_faq
    11: tests/e2e/test_label_routing_offline.py::test_label_other_to_reply_general
    12: tests/e2e/test_new_intents.py::test_sales_inquiry
    13: tests/e2e/test_new_intents.py::test_complaint
    14: tests/e2e/test_offline_suite.py::test_generate_quote_pdf
    15: tests/e2e/test_offline_suite.py::test_cli_smoke
    16: tests/e2e/test_policy_expansion.py::test_attachments_over_limit_requires_review
    17: tests/e2e/test_policy_expansion.py::test_sender_domain_whitelist_flag
    18: tests/e2e/test_runner.py::test_runner_outputs
    19: tests/e2e/test_sales_and_complaint.py::test_e2e_sales_inquiry
    20: tests/e2e/test_sales_and_complaint.py::test_e2e_complaint_high
    21: tests/e2e/test_sales_inquiry_needs_summary.py::test_sales_inquiry_generates_md_and_next_step
    22: tests/e2e/test_send_quote_degrade.py::test_send_quote_degrade
    23: tests/test_action_handler.py::test_support
    24: tests/test_action_handler.py::test_info_change
    25: tests/test_action_handler.py::test_faq
    26: tests/test_action_handler.py::test_apology
    27: tests/test_action_handler.py::test_quote_with_attachment
    28: tests/test_action_handler.py::test_other_fallback
    29: tests/test_action_handler.py::test_unknown_label_as_general
    30: tests/test_apply_diff.py::test_update_with_changes
    31: tests/test_apply_diff.py::test_update_with_no_change
    32: tests/test_apply_diff.py::test_update_partial_change
    33: tests/test_apply_diff.py::test_empty_content
    34: tests/test_apply_diff.py::test_user_not_found
    35: tests/test_classifier.py::test_classifier_inference_with_high_confidence
    36: tests/test_classifier.py::test_classifier_inference_with_low_confidence_trigger_fallback
    37: tests/test_classifier.py::test_output_file_format
    38: tests/test_init_db.py::test_users_table_schema
    39: tests/test_init_db.py::test_diff_log_table_schema
    40: tests/test_init_db.py::test_repeat_init_users_db_does_not_fail
    41: tests/test_init_emails_log_db.py::test_emails_log_table_created
    42: tests/test_init_emails_log_db.py::test_repeat_init_emails_log_db_does_not_fail
    43: tests/test_init_processed_mails_db.py::test_processed_mails_table_created
    44: tests/test_init_processed_mails_db.py::test_repeat_init_processed_mails_db_does_not_fail
    45: tests/test_init_tickets_db.py::test_support_tickets_table_created
    46: tests/test_init_tickets_db.py::test_repeat_init_tickets_db_does_not_fail
    47: tests/test_mailer.py::test_validate_smtp_config_missing_env
    48: tests/test_mailer.py::test_send_email_with_attachment_success
    49: tests/test_mailer.py::test_send_email_attachment_not_found
    50: tests/test_mailer_online.py::test_smtp_live_send_ok
    51: tests/test_quotation.py::test_choose_package[\u5831\u50f9\u9700\u6c42-\u6211\u60f3\u77e5\u9053\u5831\u50f9\u3001\u50f9\u683c\u8cc7\u8a0a-\u57fa\u790e]
    52: tests/test_quotation.py::test_choose_package[\u81ea\u52d5\u5206\u985e\u529f\u80fd-\u662f\u5426\u652f\u63f4\u81ea\u52d5\u5316\u8207\u6392\u7a0b\uff1f-\u5c08\u696d]
    53: tests/test_quotation.py::test_choose_package[\u6574\u5408 API-\u60f3\u8207 ERP \u6216 LINE \u6574\u5408-\u4f01\u696d]
    54: tests/test_quotation.py::test_choose_package[\u5176\u4ed6\u8a62\u554f-\u4f60\u5011\u80fd\u63d0\u4f9b\u4ec0\u9ebc\u529f\u80fd\uff1f-\u4f01\u696d]
    55: tests/test_quotation.py::test_generate_pdf_quote
    56: tests/test_quote_logger.py::test_log_quote_to_db
    57: tests/test_sales_notifier.py::test_notify_sales_success[test_client-\u57fa\u790e]
    58: tests/test_sales_notifier.py::test_notify_sales_success[test_corp-\u4f01\u696d]
    59: tests/test_send_with_attachment.py::test_send_with_attachment_cli_success
    60: tests/test_spam_filter.py::test_spam_filter_logic[email_json0-False]
    61: tests/test_spam_filter.py::test_spam_filter_logic[email_json1-False]
    62: tests/test_spam_filter.py::test_spam_filter_logic[email_json2-False]
    63: tests/test_spam_filter.py::test_spam_filter_logic[email_json3-False]
    64: tests/test_spam_filter.py::test_spam_filter_logic[email_json4-False]
    65: tests/test_spam_filter.py::test_spam_filter_logic[email_json5-False]
    66: tests/test_spam_filter.py::test_spam_filter_logic[email_json6-False]
    67: tests/test_spam_filter.py::test_spam_filter_logic[email_json7-True]
    68: tests/test_spam_filter.py::test_spam_filter_logic[email_json8-True]
    69: tests/test_stats_collector.py::test_init_stats_db
    70: tests/test_stats_collector.py::test_increment_counter
    71: tests/test_stats_collector.py::test_cli_init_and_insert
    72: tests/unit/test_policy_minimal.py::test_policy_require_review_on_low_conf
    73: tests/unit/test_spam_stack.py::test_spam_stack_allow_and_block
    74: tests/unit/test_tasks_minimal.py::test_tasks_minimal_contract
    75: 
    76: ==================================== ERRORS ====================================
    77: _______ ERROR collecting tests/contracts/test_action_result_contracts.py _______
    78: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/contracts/test_action_result_contracts.py'.
    79: Hint: make sure your test modules/packages have valid Python names.
    80: Traceback:
    81: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
    82:     return _bootstrap._gcd_import(name[level:], package, level)
    83: tests/contracts/test_action_result_contracts.py:6: in <module>
    84:     from src.sma_types import ActionResult, AttachmentMeta
    85: E   ModuleNotFoundError: No module named 'src'
    86: _______________ ERROR collecting tests/e2e/test_spam_pipeline.py _______________
    87: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/e2e/test_spam_pipeline.py'.
    88: Hint: make sure your test modules/packages have valid Python names.
    89: Traceback:
    90: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
    91:     return _bootstrap._gcd_import(name[level:], package, level)
    92: tests/e2e/test_spam_pipeline.py:3: in <module>
    93:     from src.spam.pipeline import analyze
    94: E   ModuleNotFoundError: No module named 'src'
    95: ________________ ERROR collecting tests/unit/test_contracts.py _________________
    96: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/unit/test_contracts.py'.
    97: Hint: make sure your test modules/packages have valid Python names.
    98: Traceback:
    99: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
   100:     return _bootstrap._gcd_import(name[level:], package, level)
   101: tests/unit/test_contracts.py:4: in <module>
   102:     from src.sma_types import normalize_request, normalize_result
   103: E   ModuleNotFoundError: No module named 'src'
   104: ______________ ERROR collecting tests/unit/test_policy_engine.py _______________
   105: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/unit/test_policy_engine.py'.
   106: Hint: make sure your test modules/packages have valid Python names.
   107: Traceback:
   108: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
   109:     return _bootstrap._gcd_import(name[level:], package, level)
   110: tests/unit/test_policy_engine.py:4: in <module>
   111:     from src.policy_engine import apply_policies, apply_policy
   112: E   ModuleNotFoundError: No module named 'src'
   113: =============================== warnings summary ===============================
   114: tests/conftest.py:25
   115:   /home/youjie/smart-mail-agent/tests/conftest.py:25: PytestRemovedIn9Warning: The (path: py.path.local) argument is deprecated, please use (collection_path: pathlib.Path)
   116:   see https://docs.pytest.org/en/latest/deprecations.html#py-path-local-arguments-for-hooks-replaced-with-pathlib-path
   117:     def pytest_ignore_collect(path, config):
   118: 
   119: tests/test_mailer_online.py:13
   120:   /home/youjie/smart-mail-agent/tests/test_mailer_online.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.online - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
   121:     pytestmark = pytest.mark.online
   122: 
   123: tests/e2e/conftest.py:12
   124:   /home/youjie/smart-mail-agent/tests/e2e/conftest.py:12: PytestUnknownMarkWarning: Unknown pytest.mark.online - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
   125:     item.add_marker(pytest.mark.online)
   126: 
   127: -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
   128: =========================== short test summary info ============================
   129: ERROR tests/contracts/test_action_result_contracts.py
   130: ERROR tests/e2e/test_spam_pipeline.py
   131: ERROR tests/unit/test_contracts.py
   132: ERROR tests/unit/test_policy_engine.py
   133: !!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!
   134: 74 tests collected, 4 errors in 5.73s
--------------------------------------------------------------------------------
END FILE    reports/tests-collect-20250816-125637.txt
================================================================================
================================================================================
BEGIN FILE  reports/tree-20250816-124354.txt  (13911 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .
     2:     .env
     3:     .env.example
     4:     LICENSE
     5:     README.md
     6:     pyproject.toml
     7:     .portfolio_hidden/
     8:         .dockerignore
     9:         .editorconfig
    10:         .env.example
    11:         .envrc
    12:         .flake8
    13:         .pre-commit-config.yaml
    14:         .pre-commit-config.yaml.bak.before-black-removal
    15:         CHANGELOG.md
    16:         CODE_OF_CONDUCT.md
    17:         CONTRIBUTING.md
    18:         Dockerfile
    19:         MANIFEST.in
    20:         Makefile
    21:         SECURITY.md
    22:         bootstrap_project.py
    23:         mkdocs.yml
    24:         pyproject.toml.bak.pre-fix-20250816-003526
    25:         pytest.ini
    26:         .dev/
    27:             __init__.py
    28:             apply_classifier_fallback_fix_v1.py
    29:             apply_docker_ci_v1.py
    30:             apply_fix_log_writer_v1.py
    31:             apply_fix_round9.py
    32:             apply_imap_debug_v2.py
    33:             apply_mailer_online_tests_v1.py
    34:             bootstrap_gh_ci.sh
    35:             check_env.py
    36:             ci.mk
    37:             cleanup_repo.py
    38:             db_migrate_emails_log.py
    39:             dedup_cleanup.sh
    40:             dedupe_requirements.py
    41:             dev_runner.py
    42:             finalize_and_push.sh
    43:             fix_from_pretrained_order.py
    44:             fix_from_pretrained_order_v2.py
    45:             fix_from_pretrained_order_v3.py
    46:             generate_offline_report.py
    47:             generate_spam_report.py
    48:             gh_device_login.sh
    49:             git_setup_and_tag.py
    50:             imap_pass_sanitize.py
    51:             make_share_bundle.sh
    52:             metrics_daily.py
    53:             offline_verify.py
    54:             one_paste_ship.py
    55:             one_shot_patch_and_run.sh
    56:             project_catalog.py
    57:             push_secrets_from_env.sh
    58:             repo_tidy.py
    59:             run_actions_matrix.py
    60:             run_spam_demo.py
    61:             set_imap_pass.py
    62:             set_smtp_pass.py
    63:             show_summary.sh
    64:             verify_pdf_degrade.py
    65:         docs/
    66:             architecture.md
    67:             cli.md
    68:             index.md
    69:             usage.md
    70:         assets/
    71:             fonts/
    72:                 .keep
    73:                 README.txt
    74:         .github/
    75:             workflows/
    76:                 ci.yml
    77:                 coverage.yml
    78:                 docs.yml
    79:                 release.yml
    80:         templates/
    81:             complaint_high.j2
    82:             complaint_low.j2
    83:             complaint_med.j2
    84:             needs_summary.md.j2
    85:             sales_inquiry_reply.j2
    86:         .archive/
    87:     scripts/
    88:         run_pipeline.sh
    89:         setup_env.sh
    90:         bin/
    91:             smarun
    92:     spam/
    93:     reports/
    94:     .backup/
    95:         20250815-003726/
    96:         20250815-002819/
    97:         20250814-234536/
    98:             configs.tgz
    99:             utils.tgz
   100:     assets/
   101:         fonts/
   102:     src/
   103:         __init__.py
   104:         action_handler.py
   105:         classifier.py
   106:         email_processor.py
   107:         inference_classifier.py
   108:         init_db.py
   109:         log_writer.py
   110:         policy_engine.py
   111:         requirements.txt
   112:         run_action_handler.py
   113:         run_action_handler.py.bak.20250813-070746
   114:         run_action_handler.py.bak.20250813-081617
   115:         run_action_handler.py.bak.20250813-082258
   116:         run_action_handler.py.bak.20250813-083058
   117:         run_action_handler.py.bak.20250813-083230
   118:         send_with_attachment.py
   119:         sitecustomize.py
   120:         sma_types.py
   121:         stats_collector.py
   122:         support_ticket.py
   123:         train_classifier.py
   124:         spam/
   125:             __init__.py
   126:             feature_extractor.py
   127:             ml_spam_classifier.py
   128:             pipeline.py
   129:             rule_filter.py
   130:             rules.py
   131:             spam_filter_orchestrator.py
   132:         smart_mail_agent/
   133:             __init__.py
   134:             __main__.py
   135:             __version__.py
   136:             cli_spamcheck.py
   137:             policy_engine.py
   138:             sma_types.py
   139:             spam/
   140:                 .keep
   141:                 __init__.py
   142:                 feature_extractor.py
   143:                 ml_spam_classifier.py
   144:                 pipeline.py
   145:                 rule_filter.py
   146:                 rules.py
   147:                 spam_filter_orchestrator.py
   148:                 spam_llm_filter.py
   149:             cli/
   150:                 sma.py
   151:                 sma_run.py
   152:                 sma_spamcheck.py
   153:             actions/
   154:                 __init__.py
   155:                 complaint.py
   156:                 sales_inquiry.py
   157:             utils/
   158:                 __init__.py
   159:                 config.py
   160:                 db_tools.py
   161:                 env.py
   162:                 errors.py
   163:                 font_check.py
   164:                 fonts.py
   165:                 imap_folder_detector.py
   166:                 imap_login.py
   167:                 jsonlog.py
   168:                 log_writer.py
   169:                 logger.py
   170:                 logging_setup.py
   171:                 mailer.py
   172:                 pdf_generator.py
   173:                 pdf_safe.py
   174:                 priority_evaluator.py
   175:                 rag_reply.py
   176:                 templater.py
   177:                 tracing.py
   178:                 validators.py
   179:         actions/
   180:             __init__.py
   181:         utils/
   182:             .keep
   183:             __init__.py
   184:             jsonlog.py
   185:             logger.py
   186:             mailer.py
   187:         modules/
   188:             __init__.py
   189:             apply_diff.py
   190:             leads_logger.py
   191:             quotation.py
   192:             quote_logger.py
   193:             sales_notifier.py
   194:         smart_mail_agent.egg-info/
   195:             PKG-INFO
   196:             SOURCES.txt
   197:             dependency_links.txt
   198:             entry_points.txt
   199:             top_level.txt
   200:         observability/
   201:             tracing.py
   202:         trainers/
   203:             train_bert_spam_classifier.py
   204:         patches/
   205:             __init__.py
   206:             handle_router_patch.py
   207:             handle_safe_patch.py
   208:     configs/
   209:         default.yml
   210:         samples/
   211:             policy.yaml
   212:             spam_rules.yaml
   213:     dist/
   214:         smart_mail_agent-0.3.1-py3-none-any.whl
   215:         smart_mail_agent-0.3.1.tar.gz
   216:         smart_mail_agent-0.4.0-py3-none-any.whl
   217:         smart_mail_agent-0.4.0.tar.gz
   218:         smart_mail_agent-0.4.1-py3-none-any.whl
   219:         smart_mail_agent-0.4.1.tar.gz
   220:     .github/
   221:         PULL_REQUEST_TEMPLATE.md
   222:         dependabot.yml
   223:         workflows-archive/
   224:             ci-offline.yml
   225:             ci.yaml
   226:             docker-ghcr.yml
   227:             interview-addon.yml
   228:             interview.yml
   229:             nightly.yml
   230:             offline-ci.yml
   231:             release.yml
   232:             security.yml
   233:         workflows/
   234:             tests.yml
   235:         ISSUE_TEMPLATE/
   236:             bug_report.md
   237:     tools/
   238:         run_actions_matrix.py
   239:     data/
   240:         stats.db
   241:         output/
   242:             attachment_20250814_122932.pdf
   243:             attachment_20250814_122945.pdf
   244:             attachment_20250814_122945.txt
   245:             attachment_20250814_123118.pdf
   246:             attachment_20250814_123131.pdf
   247:             attachment_20250814_123131.txt
   248:             attachment_20250814_123612.pdf
   249:             attachment_20250814_123623.pdf
   250:             attachment_20250814_123623.txt
   251:             attachment_20250814_124022.pdf
   252:             attachment_20250814_124034.pdf
   253:             attachment_20250814_124034.txt
   254:             attachment_20250814_124317.pdf
   255:             attachment_20250814_124330.pdf
   256:             attachment_20250814_124330.txt
   257:             attachment_20250814_124816.pdf
   258:             attachment_20250814_124829.pdf
   259:             attachment_20250814_124829.txt
   260:             attachment_20250814_125034.pdf
   261:             attachment_20250814_125049.pdf
   262:             attachment_20250814_125049.txt
   263:             attachment_20250814_130456.pdf
   264:             attachment_20250814_130511.pdf
   265:             attachment_20250814_130511.txt
   266:             attachment_20250814_130750.pdf
   267:             attachment_20250814_130805.pdf
   268:             attachment_20250814_130805.txt
   269:             attachment_20250815_023626.pdf
   270:             attachment_20250815_023627.pdf
   271:             attachment_20250815_023627.txt
   272:             attachment_20250816_122138.pdf
   273:             attachment_20250816_122148.pdf
   274:             attachment_20250816_122148.txt
   275:             in_c.json
   276:             in_complaint.json
   277:             in_overlimit.json
   278:             in_sales.json
   279:             in_whitelist.json
   280:             out_c.json
   281:             out_complaint.json
   282:             out_overlimit.json
   283:             out_sales.json
   284:             out_whitelist.json
   285:             quote-基礎-20250814-122945.pdf
   286:             quote-基礎-20250814-123131.pdf
   287:             quote-基礎-20250814-123623.pdf
   288:             quote-基礎-20250814-124034.pdf
   289:             quote-基礎-20250814-124331.pdf
   290:             quote-基礎-20250814-124829.pdf
   291:             quote-基礎-20250814-125050.pdf
   292:             quote-基礎-20250814-130511.pdf
   293:             quote-基礎-20250814-130805.pdf
   294:             quote-基礎-20250815-023628.pdf
   295:             quote-基礎-20250816-122149.pdf
   296:             matrix/
   297:                 edge_apply_no_diff.json
   298:                 edge_empty_content.json
   299:                 edge_empty_subject.json
   300:                 edge_missing_sender.json
   301:                 edge_unknown_label.json
   302:                 matrix_summary.json
   303:                 ok_apply_info.json
   304:                 ok_reply_apology.json
   305:                 ok_reply_faq.json
   306:                 ok_reply_general.json
   307:                 ok_reply_support.json
   308:                 ok_send_quote.json
   309:         db/
   310:     .archive/
   311:         README.md.bak
   312:         pyproject.toml.bak
   313:         spam/
   314:             __init__.py
   315:             spam_filter_orchestrator.py
   316:         src/
   317:             cli/
   318:                 __init__.py
   319:                 sma.py
   320:             run_action_handler/
   321:         cli/
   322:             run_classifier.py
   323:             run_generate_spam_testcases.py
   324:             run_llm_filter.py
   325:             run_main.py
   326:             run_orchestrator.py
   327:             run_rule_filter.py
   328:             run_spam_classifier.py
   329:             run_spam_filter.py
   330:         requirements/
   331:             requirements-dev.txt
   332:             requirements.txt
   333:         pipeline/
   334:             main.py
   335:             main1.py
   336:     .ruff_cache/
   337:         CACHEDIR.TAG
   338:         0.6.4/
   339:             10062691244152800297
   340:             10306445364552597575
   341:             10680823777146405479
   342:             10812975857774073136
   343:             10950020293331278908
   344:             11629886359630782689
   345:             12385548883717954955
   346:             12498655967259065337
   347:             12702323564727830366
   348:             129679571992669784
   349:             13482788831581788137
   350:             13726502579557856101
   351:             14510712170810810657
   352:             15084304008063436229
   353:             15211200385077616335
   354:             15801763888873579732
   355:             1628501678814995583
   356:             17429919253324346205
   357:             2380154359136515749
   358:             2567141616818888957
   359:             2885186335578831815
   360:             2930441936635789786
   361:             4524820271277778433
   362:             4638705800631848043
   363:             5193258509139492149
   364:             549511584802541438
   365:             5499184923316114254
   366:             6365037549610868957
   367:             7266236077337872609
   368:             7647450564625326899
   369:             7683510200818204332
   370:             8557885756071988162
   371:             8653225744940179924
   372:             9457546042828935485
   373:             9726470074215005135
   374:             9770693555042658987
   375:             9844702373653911736
   376:         0.12.9/
   377:             10123319129519659814
   378:             10497774252821708614
   379:             10706303106005769668
   380:             11251246965399226841
   381:             11520299587876701398
   382:             11922992146247323396
   383:             12439571598668468361
   384:             12505135006244482249
   385:             12712530352959455405
   386:             13779819890143230032
   387:             1429585026383353897
   388:             14474475985295799513
   389:             15105271467175372917
   390:             15424749669617451995
   391:             16104360331318901687
   392:             16376564017216308696
   393:             16797682789654596473
   394:             16862833753195440483
   395:             1867240831693799038
   396:             2086748894283419605
   397:             2352683957038820025
   398:             2815496270748541451
   399:             3196592208956207790
   400:             3585450064167336015
   401:             4064961918422823463
   402:             4339733879250257637
   403:             4587358578975028445
   404:             5073119430358208104
   405:             5095055150412158012
   406:             5376732432713081731
   407:             5612816493014956843
   408:             6701527992668914489
   409:             6834261517195298460
   410:             7052626565417396590
   411:             8238708856032378181
   412:             8574104569007726545
   413:             9008616584236440574
   414:             9425187067655346617
   415:             9480861006045943140
   416:     tests/
   417:         .keep
   418:         conftest.py
   419:         test_action_handler.py
   420:         test_apply_diff.py
   421:         test_classifier.py
   422:         test_init_db.py
   423:         test_init_emails_log_db.py
   424:         test_init_processed_mails_db.py
   425:         test_init_tickets_db.py
   426:         test_mailer.py
   427:         test_mailer_online.py
   428:         test_quotation.py
   429:         test_quote_logger.py
   430:         test_sales_notifier.py
   431:         test_send_with_attachment.py
   432:         test_spam_filter.py
   433:         test_stats_collector.py
   434:         contracts/
   435:             conftest.py
   436:             test_action_result_contracts.py
   437:         e2e/
   438:             conftest.py
   439:             test_actions_matrix_ext.py
   440:             test_cli_flags.py
   441:             test_cli_scripts.py
   442:             test_cli_scripts.py.bak.20250813-081617
   443:             test_complaint_policy.py
   444:             test_label_routing_offline.py
   445:             test_label_routing_offline.py.bak.20250813-081617
   446:             test_new_intents.py
   447:             test_offline_suite.py
   448:             test_policy_expansion.py
   449:             test_runner.py
   450:             test_sales_and_complaint.py
   451:             test_sales_inquiry_needs_summary.py
   452:             test_send_quote_degrade.py
   453:             test_spam_pipeline.py
   454:         unit/
   455:             test_contracts.py
   456:             test_policy_engine.py
   457:             test_policy_minimal.py
   458:             test_spam_stack.py
   459:             test_spam_stack.py.bak.20250813-081730
   460:             test_tasks_minimal.py
   461:             test_tasks_minimal.py.bak.20250813-081730
   462:     .pytest_cache/
   463:         CACHEDIR.TAG
   464:         README.md
   465:         v/
   466:             cache/
   467:                 nodeids
--------------------------------------------------------------------------------
END FILE    reports/tree-20250816-124354.txt
================================================================================
================================================================================
BEGIN FILE  reports/tree-20250816-124547.txt  (13944 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .
     2:     .env
     3:     .env.example
     4:     LICENSE
     5:     README.md
     6:     pyproject.toml
     7:     .portfolio_hidden/
     8:         .dockerignore
     9:         .editorconfig
    10:         .env.example
    11:         .envrc
    12:         .flake8
    13:         .pre-commit-config.yaml
    14:         .pre-commit-config.yaml.bak.before-black-removal
    15:         CHANGELOG.md
    16:         CODE_OF_CONDUCT.md
    17:         CONTRIBUTING.md
    18:         Dockerfile
    19:         MANIFEST.in
    20:         Makefile
    21:         SECURITY.md
    22:         bootstrap_project.py
    23:         mkdocs.yml
    24:         pyproject.toml.bak.pre-fix-20250816-003526
    25:         pytest.ini
    26:         .dev/
    27:             __init__.py
    28:             apply_classifier_fallback_fix_v1.py
    29:             apply_docker_ci_v1.py
    30:             apply_fix_log_writer_v1.py
    31:             apply_fix_round9.py
    32:             apply_imap_debug_v2.py
    33:             apply_mailer_online_tests_v1.py
    34:             bootstrap_gh_ci.sh
    35:             check_env.py
    36:             ci.mk
    37:             cleanup_repo.py
    38:             db_migrate_emails_log.py
    39:             dedup_cleanup.sh
    40:             dedupe_requirements.py
    41:             dev_runner.py
    42:             finalize_and_push.sh
    43:             fix_from_pretrained_order.py
    44:             fix_from_pretrained_order_v2.py
    45:             fix_from_pretrained_order_v3.py
    46:             generate_offline_report.py
    47:             generate_spam_report.py
    48:             gh_device_login.sh
    49:             git_setup_and_tag.py
    50:             imap_pass_sanitize.py
    51:             make_share_bundle.sh
    52:             metrics_daily.py
    53:             offline_verify.py
    54:             one_paste_ship.py
    55:             one_shot_patch_and_run.sh
    56:             project_catalog.py
    57:             push_secrets_from_env.sh
    58:             repo_tidy.py
    59:             run_actions_matrix.py
    60:             run_spam_demo.py
    61:             set_imap_pass.py
    62:             set_smtp_pass.py
    63:             show_summary.sh
    64:             verify_pdf_degrade.py
    65:         docs/
    66:             architecture.md
    67:             cli.md
    68:             index.md
    69:             usage.md
    70:         assets/
    71:             fonts/
    72:                 .keep
    73:                 README.txt
    74:         .github/
    75:             workflows/
    76:                 ci.yml
    77:                 coverage.yml
    78:                 docs.yml
    79:                 release.yml
    80:         templates/
    81:             complaint_high.j2
    82:             complaint_low.j2
    83:             complaint_med.j2
    84:             needs_summary.md.j2
    85:             sales_inquiry_reply.j2
    86:         .archive/
    87:     scripts/
    88:         run_pipeline.sh
    89:         setup_env.sh
    90:         bin/
    91:             smarun
    92:     spam/
    93:     reports/
    94:         tree-20250816-124354.txt
    95:     .backup/
    96:         20250815-003726/
    97:         20250815-002819/
    98:         20250814-234536/
    99:             configs.tgz
   100:             utils.tgz
   101:     assets/
   102:         fonts/
   103:     src/
   104:         __init__.py
   105:         action_handler.py
   106:         classifier.py
   107:         email_processor.py
   108:         inference_classifier.py
   109:         init_db.py
   110:         log_writer.py
   111:         policy_engine.py
   112:         requirements.txt
   113:         run_action_handler.py
   114:         run_action_handler.py.bak.20250813-070746
   115:         run_action_handler.py.bak.20250813-081617
   116:         run_action_handler.py.bak.20250813-082258
   117:         run_action_handler.py.bak.20250813-083058
   118:         run_action_handler.py.bak.20250813-083230
   119:         send_with_attachment.py
   120:         sitecustomize.py
   121:         sma_types.py
   122:         stats_collector.py
   123:         support_ticket.py
   124:         train_classifier.py
   125:         spam/
   126:             __init__.py
   127:             feature_extractor.py
   128:             ml_spam_classifier.py
   129:             pipeline.py
   130:             rule_filter.py
   131:             rules.py
   132:             spam_filter_orchestrator.py
   133:         smart_mail_agent/
   134:             __init__.py
   135:             __main__.py
   136:             __version__.py
   137:             cli_spamcheck.py
   138:             policy_engine.py
   139:             sma_types.py
   140:             spam/
   141:                 .keep
   142:                 __init__.py
   143:                 feature_extractor.py
   144:                 ml_spam_classifier.py
   145:                 pipeline.py
   146:                 rule_filter.py
   147:                 rules.py
   148:                 spam_filter_orchestrator.py
   149:                 spam_llm_filter.py
   150:             cli/
   151:                 sma.py
   152:                 sma_run.py
   153:                 sma_spamcheck.py
   154:             actions/
   155:                 __init__.py
   156:                 complaint.py
   157:                 sales_inquiry.py
   158:             utils/
   159:                 __init__.py
   160:                 config.py
   161:                 db_tools.py
   162:                 env.py
   163:                 errors.py
   164:                 font_check.py
   165:                 fonts.py
   166:                 imap_folder_detector.py
   167:                 imap_login.py
   168:                 jsonlog.py
   169:                 log_writer.py
   170:                 logger.py
   171:                 logging_setup.py
   172:                 mailer.py
   173:                 pdf_generator.py
   174:                 pdf_safe.py
   175:                 priority_evaluator.py
   176:                 rag_reply.py
   177:                 templater.py
   178:                 tracing.py
   179:                 validators.py
   180:         actions/
   181:             __init__.py
   182:         utils/
   183:             .keep
   184:             __init__.py
   185:             jsonlog.py
   186:             logger.py
   187:             mailer.py
   188:         modules/
   189:             __init__.py
   190:             apply_diff.py
   191:             leads_logger.py
   192:             quotation.py
   193:             quote_logger.py
   194:             sales_notifier.py
   195:         smart_mail_agent.egg-info/
   196:             PKG-INFO
   197:             SOURCES.txt
   198:             dependency_links.txt
   199:             entry_points.txt
   200:             top_level.txt
   201:         observability/
   202:             tracing.py
   203:         trainers/
   204:             train_bert_spam_classifier.py
   205:         patches/
   206:             __init__.py
   207:             handle_router_patch.py
   208:             handle_safe_patch.py
   209:     configs/
   210:         default.yml
   211:         samples/
   212:             policy.yaml
   213:             spam_rules.yaml
   214:     dist/
   215:         smart_mail_agent-0.3.1-py3-none-any.whl
   216:         smart_mail_agent-0.3.1.tar.gz
   217:         smart_mail_agent-0.4.0-py3-none-any.whl
   218:         smart_mail_agent-0.4.0.tar.gz
   219:         smart_mail_agent-0.4.1-py3-none-any.whl
   220:         smart_mail_agent-0.4.1.tar.gz
   221:     .github/
   222:         PULL_REQUEST_TEMPLATE.md
   223:         dependabot.yml
   224:         workflows-archive/
   225:             ci-offline.yml
   226:             ci.yaml
   227:             docker-ghcr.yml
   228:             interview-addon.yml
   229:             interview.yml
   230:             nightly.yml
   231:             offline-ci.yml
   232:             release.yml
   233:             security.yml
   234:         workflows/
   235:             tests.yml
   236:         ISSUE_TEMPLATE/
   237:             bug_report.md
   238:     tools/
   239:         run_actions_matrix.py
   240:     data/
   241:         stats.db
   242:         output/
   243:             attachment_20250814_122932.pdf
   244:             attachment_20250814_122945.pdf
   245:             attachment_20250814_122945.txt
   246:             attachment_20250814_123118.pdf
   247:             attachment_20250814_123131.pdf
   248:             attachment_20250814_123131.txt
   249:             attachment_20250814_123612.pdf
   250:             attachment_20250814_123623.pdf
   251:             attachment_20250814_123623.txt
   252:             attachment_20250814_124022.pdf
   253:             attachment_20250814_124034.pdf
   254:             attachment_20250814_124034.txt
   255:             attachment_20250814_124317.pdf
   256:             attachment_20250814_124330.pdf
   257:             attachment_20250814_124330.txt
   258:             attachment_20250814_124816.pdf
   259:             attachment_20250814_124829.pdf
   260:             attachment_20250814_124829.txt
   261:             attachment_20250814_125034.pdf
   262:             attachment_20250814_125049.pdf
   263:             attachment_20250814_125049.txt
   264:             attachment_20250814_130456.pdf
   265:             attachment_20250814_130511.pdf
   266:             attachment_20250814_130511.txt
   267:             attachment_20250814_130750.pdf
   268:             attachment_20250814_130805.pdf
   269:             attachment_20250814_130805.txt
   270:             attachment_20250815_023626.pdf
   271:             attachment_20250815_023627.pdf
   272:             attachment_20250815_023627.txt
   273:             attachment_20250816_122138.pdf
   274:             attachment_20250816_122148.pdf
   275:             attachment_20250816_122148.txt
   276:             in_c.json
   277:             in_complaint.json
   278:             in_overlimit.json
   279:             in_sales.json
   280:             in_whitelist.json
   281:             out_c.json
   282:             out_complaint.json
   283:             out_overlimit.json
   284:             out_sales.json
   285:             out_whitelist.json
   286:             quote-基礎-20250814-122945.pdf
   287:             quote-基礎-20250814-123131.pdf
   288:             quote-基礎-20250814-123623.pdf
   289:             quote-基礎-20250814-124034.pdf
   290:             quote-基礎-20250814-124331.pdf
   291:             quote-基礎-20250814-124829.pdf
   292:             quote-基礎-20250814-125050.pdf
   293:             quote-基礎-20250814-130511.pdf
   294:             quote-基礎-20250814-130805.pdf
   295:             quote-基礎-20250815-023628.pdf
   296:             quote-基礎-20250816-122149.pdf
   297:             matrix/
   298:                 edge_apply_no_diff.json
   299:                 edge_empty_content.json
   300:                 edge_empty_subject.json
   301:                 edge_missing_sender.json
   302:                 edge_unknown_label.json
   303:                 matrix_summary.json
   304:                 ok_apply_info.json
   305:                 ok_reply_apology.json
   306:                 ok_reply_faq.json
   307:                 ok_reply_general.json
   308:                 ok_reply_support.json
   309:                 ok_send_quote.json
   310:         db/
   311:     .archive/
   312:         README.md.bak
   313:         pyproject.toml.bak
   314:         spam/
   315:             __init__.py
   316:             spam_filter_orchestrator.py
   317:         src/
   318:             cli/
   319:                 __init__.py
   320:                 sma.py
   321:             run_action_handler/
   322:         cli/
   323:             run_classifier.py
   324:             run_generate_spam_testcases.py
   325:             run_llm_filter.py
   326:             run_main.py
   327:             run_orchestrator.py
   328:             run_rule_filter.py
   329:             run_spam_classifier.py
   330:             run_spam_filter.py
   331:         requirements/
   332:             requirements-dev.txt
   333:             requirements.txt
   334:         pipeline/
   335:             main.py
   336:             main1.py
   337:     .ruff_cache/
   338:         CACHEDIR.TAG
   339:         0.6.4/
   340:             10062691244152800297
   341:             10306445364552597575
   342:             10680823777146405479
   343:             10812975857774073136
   344:             10950020293331278908
   345:             11629886359630782689
   346:             12385548883717954955
   347:             12498655967259065337
   348:             12702323564727830366
   349:             129679571992669784
   350:             13482788831581788137
   351:             13726502579557856101
   352:             14510712170810810657
   353:             15084304008063436229
   354:             15211200385077616335
   355:             15801763888873579732
   356:             1628501678814995583
   357:             17429919253324346205
   358:             2380154359136515749
   359:             2567141616818888957
   360:             2885186335578831815
   361:             2930441936635789786
   362:             4524820271277778433
   363:             4638705800631848043
   364:             5193258509139492149
   365:             549511584802541438
   366:             5499184923316114254
   367:             6365037549610868957
   368:             7266236077337872609
   369:             7647450564625326899
   370:             7683510200818204332
   371:             8557885756071988162
   372:             8653225744940179924
   373:             9457546042828935485
   374:             9726470074215005135
   375:             9770693555042658987
   376:             9844702373653911736
   377:         0.12.9/
   378:             10123319129519659814
   379:             10497774252821708614
   380:             10706303106005769668
   381:             11251246965399226841
   382:             11520299587876701398
   383:             11922992146247323396
   384:             12439571598668468361
   385:             12505135006244482249
   386:             12712530352959455405
   387:             13779819890143230032
   388:             1429585026383353897
   389:             14474475985295799513
   390:             15105271467175372917
   391:             15424749669617451995
   392:             16104360331318901687
   393:             16376564017216308696
   394:             16797682789654596473
   395:             16862833753195440483
   396:             1867240831693799038
   397:             2086748894283419605
   398:             2352683957038820025
   399:             2815496270748541451
   400:             3196592208956207790
   401:             3585450064167336015
   402:             4064961918422823463
   403:             4339733879250257637
   404:             4587358578975028445
   405:             5073119430358208104
   406:             5095055150412158012
   407:             5376732432713081731
   408:             5612816493014956843
   409:             6701527992668914489
   410:             6834261517195298460
   411:             7052626565417396590
   412:             8238708856032378181
   413:             8574104569007726545
   414:             9008616584236440574
   415:             9425187067655346617
   416:             9480861006045943140
   417:     tests/
   418:         .keep
   419:         conftest.py
   420:         test_action_handler.py
   421:         test_apply_diff.py
   422:         test_classifier.py
   423:         test_init_db.py
   424:         test_init_emails_log_db.py
   425:         test_init_processed_mails_db.py
   426:         test_init_tickets_db.py
   427:         test_mailer.py
   428:         test_mailer_online.py
   429:         test_quotation.py
   430:         test_quote_logger.py
   431:         test_sales_notifier.py
   432:         test_send_with_attachment.py
   433:         test_spam_filter.py
   434:         test_stats_collector.py
   435:         contracts/
   436:             conftest.py
   437:             test_action_result_contracts.py
   438:         e2e/
   439:             conftest.py
   440:             test_actions_matrix_ext.py
   441:             test_cli_flags.py
   442:             test_cli_scripts.py
   443:             test_cli_scripts.py.bak.20250813-081617
   444:             test_complaint_policy.py
   445:             test_label_routing_offline.py
   446:             test_label_routing_offline.py.bak.20250813-081617
   447:             test_new_intents.py
   448:             test_offline_suite.py
   449:             test_policy_expansion.py
   450:             test_runner.py
   451:             test_sales_and_complaint.py
   452:             test_sales_inquiry_needs_summary.py
   453:             test_send_quote_degrade.py
   454:             test_spam_pipeline.py
   455:         unit/
   456:             test_contracts.py
   457:             test_policy_engine.py
   458:             test_policy_minimal.py
   459:             test_spam_stack.py
   460:             test_spam_stack.py.bak.20250813-081730
   461:             test_tasks_minimal.py
   462:             test_tasks_minimal.py.bak.20250813-081730
   463:     .pytest_cache/
   464:         CACHEDIR.TAG
   465:         README.md
   466:         v/
   467:             cache/
   468:                 nodeids
--------------------------------------------------------------------------------
END FILE    reports/tree-20250816-124547.txt
================================================================================
================================================================================
BEGIN FILE  reports/tree-20250816-125335.txt  (11945 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .
     2:   .env
     3:   .env.example
     4:   .gitattributes
     5:   .gitignore
     6:   .pre-commit-config.yaml
     7:   LICENSE
     8:   README.md
     9:   pyproject.toml
    10:   .portfolio_hidden/
    11:     .dockerignore
    12:     .editorconfig
    13:     .env.example
    14:     .envrc
    15:     .flake8
    16:     .gitattributes
    17:     .gitignore
    18:     .pre-commit-config.yaml
    19:     .pre-commit-config.yaml.bak.before-black-removal
    20:     CHANGELOG.md
    21:     CODE_OF_CONDUCT.md
    22:     CONTRIBUTING.md
    23:     Dockerfile
    24:     MANIFEST.in
    25:     Makefile
    26:     SECURITY.md
    27:     bootstrap_project.py
    28:     mkdocs.yml
    29:     pyproject.toml.bak.pre-fix-20250816-003526
    30:     pytest.ini
    31:     .dev/
    32:       __init__.py
    33:       apply_classifier_fallback_fix_v1.py
    34:       apply_docker_ci_v1.py
    35:       apply_fix_log_writer_v1.py
    36:       apply_fix_round9.py
    37:       apply_imap_debug_v2.py
    38:       apply_mailer_online_tests_v1.py
    39:       bootstrap_gh_ci.sh
    40:       check_env.py
    41:       ci.mk
    42:       cleanup_repo.py
    43:       db_migrate_emails_log.py
    44:       dedup_cleanup.sh
    45:       dedupe_requirements.py
    46:       dev_runner.py
    47:       finalize_and_push.sh
    48:       fix_from_pretrained_order.py
    49:       fix_from_pretrained_order_v2.py
    50:       fix_from_pretrained_order_v3.py
    51:       generate_offline_report.py
    52:       generate_spam_report.py
    53:       gh_device_login.sh
    54:       git_setup_and_tag.py
    55:       imap_pass_sanitize.py
    56:       make_share_bundle.sh
    57:       metrics_daily.py
    58:       offline_verify.py
    59:       one_paste_ship.py
    60:       one_shot_patch_and_run.sh
    61:       project_catalog.py
    62:       push_secrets_from_env.sh
    63:       repo_tidy.py
    64:       run_actions_matrix.py
    65:       run_spam_demo.py
    66:       set_imap_pass.py
    67:       set_smtp_pass.py
    68:       show_summary.sh
    69:       verify_pdf_degrade.py
    70:     docs/
    71:       architecture.md
    72:       cli.md
    73:       index.md
    74:       usage.md
    75:     assets/
    76:       fonts/
    77:         .gitkeep
    78:         .keep
    79:         README.txt
    80:     .github/
    81:       workflows/
    82:         ci.yml
    83:         coverage.yml
    84:         docs.yml
    85:         release.yml
    86:     templates/
    87:       complaint_high.j2
    88:       complaint_low.j2
    89:       complaint_med.j2
    90:       needs_summary.md.j2
    91:       sales_inquiry_reply.j2
    92:     .archive/
    93:   scripts/
    94:     run_pipeline.sh
    95:     setup_env.sh
    96:     bin/
    97:       smarun
    98:   spam/
    99:   reports/
   100:     tree-20250816-124354.txt
   101:     tree-20250816-124547.txt
   102:   .backup/
   103:     20250815-003726/
   104:     20250815-002819/
   105:     20250814-234536/
   106:       configs.tgz
   107:       utils.tgz
   108:   assets/
   109:     fonts/
   110:   src/
   111:     __init__.py
   112:     action_handler.py
   113:     classifier.py
   114:     email_processor.py
   115:     inference_classifier.py
   116:     init_db.py
   117:     log_writer.py
   118:     policy_engine.py
   119:     requirements.txt
   120:     run_action_handler.py
   121:     send_with_attachment.py
   122:     sitecustomize.py
   123:     sma_types.py
   124:     stats_collector.py
   125:     support_ticket.py
   126:     train_classifier.py
   127:     spam/
   128:       __init__.py
   129:       feature_extractor.py
   130:       ml_spam_classifier.py
   131:       pipeline.py
   132:       rule_filter.py
   133:       rules.py
   134:       spam_filter_orchestrator.py
   135:     smart_mail_agent/
   136:       __init__.py
   137:       __main__.py
   138:       __version__.py
   139:       cli_spamcheck.py
   140:       policy_engine.py
   141:       sma_types.py
   142:       spam/
   143:         .keep
   144:         __init__.py
   145:         feature_extractor.py
   146:         ml_spam_classifier.py
   147:         pipeline.py
   148:         rule_filter.py
   149:         rules.py
   150:         spam_filter_orchestrator.py
   151:         spam_llm_filter.py
   152:       cli/
   153:         sma.py
   154:         sma_run.py
   155:         sma_spamcheck.py
   156:       actions/
   157:         __init__.py
   158:         complaint.py
   159:         sales_inquiry.py
   160:       utils/
   161:         __init__.py
   162:         config.py
   163:         db_tools.py
   164:         env.py
   165:         errors.py
   166:         font_check.py
   167:         fonts.py
   168:         imap_folder_detector.py
   169:         imap_login.py
   170:         jsonlog.py
   171:         log_writer.py
   172:         logger.py
   173:         logging_setup.py
   174:         mailer.py
   175:         pdf_generator.py
   176:         pdf_safe.py
   177:         priority_evaluator.py
   178:         rag_reply.py
   179:         templater.py
   180:         tracing.py
   181:         validators.py
   182:     actions/
   183:       __init__.py
   184:     utils/
   185:       .keep
   186:       __init__.py
   187:       jsonlog.py
   188:       logger.py
   189:       mailer.py
   190:     modules/
   191:       __init__.py
   192:       apply_diff.py
   193:       leads_logger.py
   194:       quotation.py
   195:       quote_logger.py
   196:       sales_notifier.py
   197:     smart_mail_agent.egg-info/
   198:       PKG-INFO
   199:       SOURCES.txt
   200:       dependency_links.txt
   201:       entry_points.txt
   202:       requires.txt
   203:       top_level.txt
   204:     observability/
   205:       tracing.py
   206:     trainers/
   207:       train_bert_spam_classifier.py
   208:     patches/
   209:       __init__.py
   210:       handle_router_patch.py
   211:       handle_safe_patch.py
   212:   configs/
   213:     default.yml
   214:     samples/
   215:       policy.yaml
   216:       spam_rules.yaml
   217:   dist/
   218:     smart_mail_agent-0.3.1-py3-none-any.whl
   219:     smart_mail_agent-0.3.1.tar.gz
   220:     smart_mail_agent-0.4.0-py3-none-any.whl
   221:     smart_mail_agent-0.4.0.tar.gz
   222:     smart_mail_agent-0.4.1-py3-none-any.whl
   223:     smart_mail_agent-0.4.1.tar.gz
   224:   .github/
   225:     PULL_REQUEST_TEMPLATE.md
   226:     dependabot.yml
   227:     workflows-archive/
   228:       ci-offline.yml
   229:       ci.yaml
   230:       docker-ghcr.yml
   231:       interview-addon.yml
   232:       interview.yml
   233:       nightly.yml
   234:       offline-ci.yml
   235:       release.yml
   236:       security.yml
   237:     workflows/
   238:       tests.yml
   239:     ISSUE_TEMPLATE/
   240:       bug_report.md
   241:   tools/
   242:     run_actions_matrix.py
   243:   data/
   244:     stats.db
   245:     output/
   246:       attachment_20250814_122932.pdf
   247:       attachment_20250814_122945.pdf
   248:       attachment_20250814_122945.txt
   249:       attachment_20250814_123118.pdf
   250:       attachment_20250814_123131.pdf
   251:       attachment_20250814_123131.txt
   252:       attachment_20250814_123612.pdf
   253:       attachment_20250814_123623.pdf
   254:       attachment_20250814_123623.txt
   255:       attachment_20250814_124022.pdf
   256:       attachment_20250814_124034.pdf
   257:       attachment_20250814_124034.txt
   258:       attachment_20250814_124317.pdf
   259:       attachment_20250814_124330.pdf
   260:       attachment_20250814_124330.txt
   261:       attachment_20250814_124816.pdf
   262:       attachment_20250814_124829.pdf
   263:       attachment_20250814_124829.txt
   264:       attachment_20250814_125034.pdf
   265:       attachment_20250814_125049.pdf
   266:       attachment_20250814_125049.txt
   267:       attachment_20250814_130456.pdf
   268:       attachment_20250814_130511.pdf
   269:       attachment_20250814_130511.txt
   270:       attachment_20250814_130750.pdf
   271:       attachment_20250814_130805.pdf
   272:       attachment_20250814_130805.txt
   273:       attachment_20250815_023626.pdf
   274:       attachment_20250815_023627.pdf
   275:       attachment_20250815_023627.txt
   276:       attachment_20250816_122138.pdf
   277:       attachment_20250816_122148.pdf
   278:       attachment_20250816_122148.txt
   279:       in_c.json
   280:       in_complaint.json
   281:       in_overlimit.json
   282:       in_sales.json
   283:       in_whitelist.json
   284:       out_c.json
   285:       out_complaint.json
   286:       out_overlimit.json
   287:       out_sales.json
   288:       out_whitelist.json
   289:       quote-基礎-20250814-122945.pdf
   290:       quote-基礎-20250814-123131.pdf
   291:       quote-基礎-20250814-123623.pdf
   292:       quote-基礎-20250814-124034.pdf
   293:       quote-基礎-20250814-124331.pdf
   294:       quote-基礎-20250814-124829.pdf
   295:       quote-基礎-20250814-125050.pdf
   296:       quote-基礎-20250814-130511.pdf
   297:       quote-基礎-20250814-130805.pdf
   298:       quote-基礎-20250815-023628.pdf
   299:       quote-基礎-20250816-122149.pdf
   300:       matrix/
   301:         edge_apply_no_diff.json
   302:         edge_empty_content.json
   303:         edge_empty_subject.json
   304:         edge_missing_sender.json
   305:         edge_unknown_label.json
   306:         matrix_summary.json
   307:         ok_apply_info.json
   308:         ok_reply_apology.json
   309:         ok_reply_faq.json
   310:         ok_reply_general.json
   311:         ok_reply_support.json
   312:         ok_send_quote.json
   313:     db/
   314:   .archive/
   315:     README.md.bak
   316:     pyproject.toml.bak
   317:     spam/
   318:       __init__.py
   319:       spam_filter_orchestrator.py
   320:     src/
   321:       cli/
   322:         __init__.py
   323:         sma.py
   324:       run_action_handler/
   325:         run_action_handler.py.bak.20250813-070746
   326:         run_action_handler.py.bak.20250813-081617
   327:         run_action_handler.py.bak.20250813-082258
   328:         run_action_handler.py.bak.20250813-083058
   329:         run_action_handler.py.bak.20250813-083230
   330:     cli/
   331:       run_classifier.py
   332:       run_generate_spam_testcases.py
   333:       run_llm_filter.py
   334:       run_main.py
   335:       run_orchestrator.py
   336:       run_rule_filter.py
   337:       run_spam_classifier.py
   338:       run_spam_filter.py
   339:     requirements/
   340:       requirements-dev.txt
   341:       requirements.txt
   342:     pipeline/
   343:       main.py
   344:       main1.py
   345:   .ruff_cache/
   346:     .gitignore
   347:     CACHEDIR.TAG
   348:     0.6.4/
   349:       10062691244152800297
   350:       10306445364552597575
   351:       10680823777146405479
   352:       10812975857774073136
   353:       10950020293331278908
   354:       11629886359630782689
   355:       12385548883717954955
   356:       12498655967259065337
   357:       12702323564727830366
   358:       129679571992669784
   359:       13482788831581788137
   360:       13726502579557856101
   361:       14510712170810810657
   362:       15084304008063436229
   363:       15211200385077616335
   364:       15801763888873579732
   365:       1628501678814995583
   366:       17429919253324346205
   367:       2380154359136515749
   368:       2567141616818888957
   369:       2885186335578831815
   370:       2930441936635789786
   371:       4524820271277778433
   372:       4638705800631848043
   373:       5193258509139492149
   374:       549511584802541438
   375:       5499184923316114254
   376:       6365037549610868957
   377:       7266236077337872609
   378:       7647450564625326899
   379:       7683510200818204332
   380:       8557885756071988162
   381:       8653225744940179924
   382:       9457546042828935485
   383:       9726470074215005135
   384:       9770693555042658987
   385:       9844702373653911736
   386:     0.6.2/
   387:       10306445364552597575
   388:       12117295808811510466
   389:       12199880939473388178
   390:       129679571992669784
   391:       13726502579557856101
   392:       16663937280500598577
   393:       2515981392420021228
   394:       3628367531841029378
   395:       4483119881832052049
   396:       4638705800631848043
   397:       7647450564625326899
   398:       8557885756071988162
   399:       9457546042828935485
   400:       9726470074215005135
   401:       9844702373653911736
   402:     0.12.9/
   403:       10123319129519659814
   404:       10497774252821708614
   405:       10706303106005769668
   406:       11251246965399226841
   407:       11520299587876701398
   408:       11922992146247323396
   409:       12439571598668468361
   410:       12505135006244482249
   411:       12712530352959455405
   412:       13779819890143230032
   413:       1429585026383353897
   414:       14474475985295799513
   415:       15105271467175372917
   416:       15424749669617451995
   417:       16104360331318901687
   418:       16376564017216308696
   419:       16797682789654596473
   420:       16862833753195440483
   421:       1867240831693799038
   422:       2086748894283419605
   423:       2352683957038820025
   424:       2815496270748541451
   425:       3196592208956207790
   426:       3585450064167336015
   427:       4064961918422823463
   428:       4339733879250257637
   429:       4587358578975028445
   430:       5073119430358208104
   431:       5095055150412158012
   432:       5376732432713081731
   433:       5612816493014956843
   434:       6701527992668914489
   435:       6834261517195298460
   436:       7052626565417396590
   437:       8238708856032378181
   438:       8574104569007726545
   439:       9008616584236440574
   440:       9425187067655346617
   441:       9480861006045943140
   442:   tests/
   443:     .keep
   444:     conftest.py
   445:     test_action_handler.py
   446:     test_apply_diff.py
   447:     test_classifier.py
   448:     test_init_db.py
   449:     test_init_emails_log_db.py
   450:     test_init_processed_mails_db.py
   451:     test_init_tickets_db.py
   452:     test_mailer.py
   453:     test_mailer_online.py
   454:     test_quotation.py
   455:     test_quote_logger.py
   456:     test_sales_notifier.py
   457:     test_send_with_attachment.py
   458:     test_spam_filter.py
   459:     test_stats_collector.py
   460:     contracts/
   461:       conftest.py
   462:       test_action_result_contracts.py
   463:     e2e/
   464:       conftest.py
   465:       test_actions_matrix_ext.py
   466:       test_cli_flags.py
   467:       test_cli_scripts.py
   468:       test_cli_scripts.py.bak.20250813-081617
   469:       test_complaint_policy.py
   470:       test_label_routing_offline.py
   471:       test_label_routing_offline.py.bak.20250813-081617
   472:       test_new_intents.py
   473:       test_offline_suite.py
   474:       test_policy_expansion.py
   475:       test_runner.py
   476:       test_sales_and_complaint.py
   477:       test_sales_inquiry_needs_summary.py
   478:       test_send_quote_degrade.py
   479:       test_spam_pipeline.py
   480:     unit/
   481:       test_contracts.py
   482:       test_policy_engine.py
   483:       test_policy_minimal.py
   484:       test_spam_stack.py
   485:       test_spam_stack.py.bak.20250813-081730
   486:       test_tasks_minimal.py
   487:       test_tasks_minimal.py.bak.20250813-081730
   488:   .pytest_cache/
   489:     .gitignore
   490:     CACHEDIR.TAG
   491:     README.md
   492:     v/
   493:       cache/
   494:         nodeids
--------------------------------------------------------------------------------
END FILE    reports/tree-20250816-125335.txt
================================================================================
================================================================================
BEGIN FILE  reports/tree-20250816-125637.txt  (11938 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .
     2:   .env
     3:   .env.example
     4:   .pre-commit-config.yaml
     5:   LICENSE
     6:   README.md
     7:   pyproject.toml
     8:   .portfolio_hidden/
     9:     .dockerignore
    10:     .editorconfig
    11:     .env.example
    12:     .envrc
    13:     .flake8
    14:     .pre-commit-config.yaml
    15:     .pre-commit-config.yaml.bak.before-black-removal
    16:     CHANGELOG.md
    17:     CODE_OF_CONDUCT.md
    18:     CONTRIBUTING.md
    19:     Dockerfile
    20:     MANIFEST.in
    21:     Makefile
    22:     SECURITY.md
    23:     bootstrap_project.py
    24:     mkdocs.yml
    25:     pyproject.toml.bak.pre-fix-20250816-003526
    26:     pytest.ini
    27:     .dev/
    28:       __init__.py
    29:       apply_classifier_fallback_fix_v1.py
    30:       apply_docker_ci_v1.py
    31:       apply_fix_log_writer_v1.py
    32:       apply_fix_round9.py
    33:       apply_imap_debug_v2.py
    34:       apply_mailer_online_tests_v1.py
    35:       bootstrap_gh_ci.sh
    36:       check_env.py
    37:       ci.mk
    38:       cleanup_repo.py
    39:       db_migrate_emails_log.py
    40:       dedup_cleanup.sh
    41:       dedupe_requirements.py
    42:       dev_runner.py
    43:       finalize_and_push.sh
    44:       fix_from_pretrained_order.py
    45:       fix_from_pretrained_order_v2.py
    46:       fix_from_pretrained_order_v3.py
    47:       generate_offline_report.py
    48:       generate_spam_report.py
    49:       gh_device_login.sh
    50:       git_setup_and_tag.py
    51:       imap_pass_sanitize.py
    52:       make_share_bundle.sh
    53:       metrics_daily.py
    54:       offline_verify.py
    55:       one_paste_ship.py
    56:       one_shot_patch_and_run.sh
    57:       project_catalog.py
    58:       push_secrets_from_env.sh
    59:       repo_tidy.py
    60:       run_actions_matrix.py
    61:       run_spam_demo.py
    62:       set_imap_pass.py
    63:       set_smtp_pass.py
    64:       show_summary.sh
    65:       verify_pdf_degrade.py
    66:     docs/
    67:       architecture.md
    68:       cli.md
    69:       index.md
    70:       usage.md
    71:     assets/
    72:       fonts/
    73:         .keep
    74:         README.txt
    75:     .github/
    76:       workflows/
    77:         ci.yml
    78:         coverage.yml
    79:         docs.yml
    80:         release.yml
    81:     templates/
    82:       complaint_high.j2
    83:       complaint_low.j2
    84:       complaint_med.j2
    85:       needs_summary.md.j2
    86:       sales_inquiry_reply.j2
    87:     .archive/
    88:   scripts/
    89:     run_pipeline.sh
    90:     setup_env.sh
    91:     bin/
    92:       smarun
    93:   spam/
    94:   reports/
    95:     tree-20250816-124354.txt
    96:     tree-20250816-124547.txt
    97:     tree-20250816-125335.txt
    98:   .backup/
    99:     20250815-003726/
   100:     20250815-002819/
   101:     20250814-234536/
   102:       configs.tgz
   103:       utils.tgz
   104:   assets/
   105:     badges/
   106:     fonts/
   107:   src/
   108:     __init__.py
   109:     action_handler.py
   110:     classifier.py
   111:     email_processor.py
   112:     inference_classifier.py
   113:     init_db.py
   114:     log_writer.py
   115:     policy_engine.py
   116:     requirements.txt
   117:     run_action_handler.py
   118:     send_with_attachment.py
   119:     sitecustomize.py
   120:     sma_types.py
   121:     stats_collector.py
   122:     support_ticket.py
   123:     train_classifier.py
   124:     spam/
   125:       __init__.py
   126:       feature_extractor.py
   127:       ml_spam_classifier.py
   128:       pipeline.py
   129:       rule_filter.py
   130:       rules.py
   131:       spam_filter_orchestrator.py
   132:     smart_mail_agent/
   133:       __init__.py
   134:       __main__.py
   135:       __version__.py
   136:       cli_spamcheck.py
   137:       policy_engine.py
   138:       sma_types.py
   139:       spam/
   140:         .keep
   141:         __init__.py
   142:         feature_extractor.py
   143:         ml_spam_classifier.py
   144:         pipeline.py
   145:         rule_filter.py
   146:         rules.py
   147:         spam_filter_orchestrator.py
   148:         spam_llm_filter.py
   149:       cli/
   150:         sma.py
   151:         sma_run.py
   152:         sma_spamcheck.py
   153:       actions/
   154:         __init__.py
   155:         complaint.py
   156:         sales_inquiry.py
   157:       utils/
   158:         __init__.py
   159:         config.py
   160:         db_tools.py
   161:         env.py
   162:         errors.py
   163:         font_check.py
   164:         fonts.py
   165:         imap_folder_detector.py
   166:         imap_login.py
   167:         jsonlog.py
   168:         log_writer.py
   169:         logger.py
   170:         logging_setup.py
   171:         mailer.py
   172:         pdf_generator.py
   173:         pdf_safe.py
   174:         priority_evaluator.py
   175:         rag_reply.py
   176:         templater.py
   177:         tracing.py
   178:         validators.py
   179:     actions/
   180:       __init__.py
   181:     utils/
   182:       .keep
   183:       __init__.py
   184:       jsonlog.py
   185:       logger.py
   186:       mailer.py
   187:     modules/
   188:       __init__.py
   189:       apply_diff.py
   190:       leads_logger.py
   191:       quotation.py
   192:       quote_logger.py
   193:       sales_notifier.py
   194:     smart_mail_agent.egg-info/
   195:       PKG-INFO
   196:       SOURCES.txt
   197:       dependency_links.txt
   198:       entry_points.txt
   199:       requires.txt
   200:       top_level.txt
   201:     observability/
   202:       tracing.py
   203:     trainers/
   204:       train_bert_spam_classifier.py
   205:     patches/
   206:       __init__.py
   207:       handle_router_patch.py
   208:       handle_safe_patch.py
   209:   configs/
   210:     default.yml
   211:     samples/
   212:       policy.yaml
   213:       spam_rules.yaml
   214:   dist/
   215:     smart_mail_agent-0.3.1-py3-none-any.whl
   216:     smart_mail_agent-0.3.1.tar.gz
   217:     smart_mail_agent-0.4.0-py3-none-any.whl
   218:     smart_mail_agent-0.4.0.tar.gz
   219:     smart_mail_agent-0.4.1-py3-none-any.whl
   220:     smart_mail_agent-0.4.1.tar.gz
   221:   .github/
   222:     PULL_REQUEST_TEMPLATE.md
   223:     dependabot.yml
   224:     workflows-archive/
   225:       ci-offline.yml
   226:       ci.yaml
   227:       docker-ghcr.yml
   228:       interview-addon.yml
   229:       interview.yml
   230:       nightly.yml
   231:       offline-ci.yml
   232:       release.yml
   233:       security.yml
   234:     workflows/
   235:       tests.yml
   236:     ISSUE_TEMPLATE/
   237:       bug_report.md
   238:   tools/
   239:     run_actions_matrix.py
   240:   data/
   241:     output/
   242:       attachment_20250814_122932.pdf
   243:       attachment_20250814_122945.pdf
   244:       attachment_20250814_122945.txt
   245:       attachment_20250814_123118.pdf
   246:       attachment_20250814_123131.pdf
   247:       attachment_20250814_123131.txt
   248:       attachment_20250814_123612.pdf
   249:       attachment_20250814_123623.pdf
   250:       attachment_20250814_123623.txt
   251:       attachment_20250814_124022.pdf
   252:       attachment_20250814_124034.pdf
   253:       attachment_20250814_124034.txt
   254:       attachment_20250814_124317.pdf
   255:       attachment_20250814_124330.pdf
   256:       attachment_20250814_124330.txt
   257:       attachment_20250814_124816.pdf
   258:       attachment_20250814_124829.pdf
   259:       attachment_20250814_124829.txt
   260:       attachment_20250814_125034.pdf
   261:       attachment_20250814_125049.pdf
   262:       attachment_20250814_125049.txt
   263:       attachment_20250814_130456.pdf
   264:       attachment_20250814_130511.pdf
   265:       attachment_20250814_130511.txt
   266:       attachment_20250814_130750.pdf
   267:       attachment_20250814_130805.pdf
   268:       attachment_20250814_130805.txt
   269:       attachment_20250815_023626.pdf
   270:       attachment_20250815_023627.pdf
   271:       attachment_20250815_023627.txt
   272:       attachment_20250816_122138.pdf
   273:       attachment_20250816_122148.pdf
   274:       attachment_20250816_122148.txt
   275:       attachment_20250816_125341.pdf
   276:       in_c.json
   277:       in_complaint.json
   278:       in_overlimit.json
   279:       in_sales.json
   280:       in_whitelist.json
   281:       out_c.json
   282:       out_complaint.json
   283:       out_overlimit.json
   284:       out_sales.json
   285:       out_whitelist.json
   286:       quote-基礎-20250814-122945.pdf
   287:       quote-基礎-20250814-123131.pdf
   288:       quote-基礎-20250814-123623.pdf
   289:       quote-基礎-20250814-124034.pdf
   290:       quote-基礎-20250814-124331.pdf
   291:       quote-基礎-20250814-124829.pdf
   292:       quote-基礎-20250814-125050.pdf
   293:       quote-基礎-20250814-130511.pdf
   294:       quote-基礎-20250814-130805.pdf
   295:       quote-基礎-20250815-023628.pdf
   296:       quote-基礎-20250816-122149.pdf
   297:       quote-基礎-20250816-125341.pdf
   298:       matrix/
   299:         edge_apply_no_diff.json
   300:         edge_empty_content.json
   301:         edge_empty_subject.json
   302:         edge_missing_sender.json
   303:         edge_unknown_label.json
   304:         matrix_summary.json
   305:         ok_apply_info.json
   306:         ok_reply_apology.json
   307:         ok_reply_faq.json
   308:         ok_reply_general.json
   309:         ok_reply_support.json
   310:         ok_send_quote.json
   311:     db/
   312:   .archive/
   313:     README.md.bak
   314:     pyproject.toml.bak
   315:     spam/
   316:       __init__.py
   317:       spam_filter_orchestrator.py
   318:     src/
   319:       cli/
   320:         __init__.py
   321:         sma.py
   322:       run_action_handler/
   323:         run_action_handler.py.bak.20250813-070746
   324:         run_action_handler.py.bak.20250813-081617
   325:         run_action_handler.py.bak.20250813-082258
   326:         run_action_handler.py.bak.20250813-083058
   327:         run_action_handler.py.bak.20250813-083230
   328:     cli/
   329:       run_classifier.py
   330:       run_generate_spam_testcases.py
   331:       run_llm_filter.py
   332:       run_main.py
   333:       run_orchestrator.py
   334:       run_rule_filter.py
   335:       run_spam_classifier.py
   336:       run_spam_filter.py
   337:     requirements/
   338:       requirements-dev.txt
   339:       requirements.txt
   340:     pipeline/
   341:       main.py
   342:       main1.py
   343:   .ruff_cache/
   344:     CACHEDIR.TAG
   345:     0.6.4/
   346:       10062691244152800297
   347:       10306445364552597575
   348:       10680823777146405479
   349:       10812975857774073136
   350:       10950020293331278908
   351:       11629886359630782689
   352:       12385548883717954955
   353:       12498655967259065337
   354:       12702323564727830366
   355:       129679571992669784
   356:       13482788831581788137
   357:       13726502579557856101
   358:       14510712170810810657
   359:       15084304008063436229
   360:       15211200385077616335
   361:       15801763888873579732
   362:       1628501678814995583
   363:       17429919253324346205
   364:       2380154359136515749
   365:       2567141616818888957
   366:       2885186335578831815
   367:       2930441936635789786
   368:       4524820271277778433
   369:       4638705800631848043
   370:       5193258509139492149
   371:       549511584802541438
   372:       5499184923316114254
   373:       6365037549610868957
   374:       7266236077337872609
   375:       7647450564625326899
   376:       7683510200818204332
   377:       8557885756071988162
   378:       8653225744940179924
   379:       9457546042828935485
   380:       9726470074215005135
   381:       9770693555042658987
   382:       9844702373653911736
   383:     0.6.2/
   384:       10306445364552597575
   385:       12117295808811510466
   386:       12199880939473388178
   387:       129679571992669784
   388:       13726502579557856101
   389:       16663937280500598577
   390:       2515981392420021228
   391:       3628367531841029378
   392:       4483119881832052049
   393:       4638705800631848043
   394:       7647450564625326899
   395:       8557885756071988162
   396:       9457546042828935485
   397:       9726470074215005135
   398:       9844702373653911736
   399:     0.12.9/
   400:       10123319129519659814
   401:       10497774252821708614
   402:       10706303106005769668
   403:       11251246965399226841
   404:       11520299587876701398
   405:       11922992146247323396
   406:       12439571598668468361
   407:       12505135006244482249
   408:       12712530352959455405
   409:       13779819890143230032
   410:       1429585026383353897
   411:       14474475985295799513
   412:       15105271467175372917
   413:       15424749669617451995
   414:       16104360331318901687
   415:       16376564017216308696
   416:       16797682789654596473
   417:       16862833753195440483
   418:       1867240831693799038
   419:       2086748894283419605
   420:       2352683957038820025
   421:       2815496270748541451
   422:       3196592208956207790
   423:       3585450064167336015
   424:       4064961918422823463
   425:       4339733879250257637
   426:       4587358578975028445
   427:       5073119430358208104
   428:       5095055150412158012
   429:       5376732432713081731
   430:       5612816493014956843
   431:       6701527992668914489
   432:       6834261517195298460
   433:       7052626565417396590
   434:       8238708856032378181
   435:       8574104569007726545
   436:       9008616584236440574
   437:       9425187067655346617
   438:       9480861006045943140
   439:   tests/
   440:     .keep
   441:     conftest.py
   442:     test_action_handler.py
   443:     test_apply_diff.py
   444:     test_classifier.py
   445:     test_init_db.py
   446:     test_init_emails_log_db.py
   447:     test_init_processed_mails_db.py
   448:     test_init_tickets_db.py
   449:     test_mailer.py
   450:     test_mailer_online.py
   451:     test_quotation.py
   452:     test_quote_logger.py
   453:     test_sales_notifier.py
   454:     test_send_with_attachment.py
   455:     test_spam_filter.py
   456:     test_stats_collector.py
   457:     contracts/
   458:       conftest.py
   459:       test_action_result_contracts.py
   460:     e2e/
   461:       conftest.py
   462:       test_actions_matrix_ext.py
   463:       test_cli_flags.py
   464:       test_cli_scripts.py
   465:       test_cli_scripts.py.bak.20250813-081617
   466:       test_complaint_policy.py
   467:       test_label_routing_offline.py
   468:       test_label_routing_offline.py.bak.20250813-081617
   469:       test_new_intents.py
   470:       test_offline_suite.py
   471:       test_policy_expansion.py
   472:       test_runner.py
   473:       test_sales_and_complaint.py
   474:       test_sales_inquiry_needs_summary.py
   475:       test_send_quote_degrade.py
   476:       test_spam_pipeline.py
   477:     unit/
   478:       test_contracts.py
   479:       test_policy_engine.py
   480:       test_policy_minimal.py
   481:       test_spam_stack.py
   482:       test_spam_stack.py.bak.20250813-081730
   483:       test_tasks_minimal.py
   484:       test_tasks_minimal.py.bak.20250813-081730
   485:   .pytest_cache/
   486:     CACHEDIR.TAG
   487:     README.md
   488:     v/
   489:       cache/
   490:         nodeids
--------------------------------------------------------------------------------
END FILE    reports/tree-20250816-125637.txt
================================================================================
================================================================================
BEGIN FILE  scripts/online_check.py  (1170 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: from __future__ import annotations
     3: 
     4: import os
     5: import smtplib
     6: import ssl
     7: import sys
     8: import time
     9: from email.message import EmailMessage
    10: 
    11: 
    12: def main() -> int:
    13:     user = os.getenv("SMTP_USER") or ""
    14:     pw   = os.getenv("SMTP_PASS") or ""
    15:     host = os.getenv("SMTP_HOST") or ""
    16:     port = int(os.getenv("SMTP_PORT") or "465")
    17:     to   = os.getenv("REPLY_TO") or user
    18: 
    19:     if not all([user, pw, host, port, to]):
    20:         print("缺少必要環境變數 (SMTP_USER/SMTP_PASS/SMTP_HOST/SMTP_PORT/REPLY_TO)", file=sys.stderr)
    21:         return 2
    22: 
    23:     msg = EmailMessage()
    24:     msg["Subject"] = f"[Online Check] Smart Mail Agent smoke {time.strftime('%Y-%m-%d %H:%M:%S')}"
    25:     msg["From"] = user
    26:     msg["To"] = to
    27:     msg.set_content("這是一封線上冒煙測試信（請忽略）。")
    28: 
    29:     try:
    30:         with smtplib.SMTP_SSL(host, port, context=ssl.create_default_context(), timeout=20) as s:
    31:             s.login(user, pw)
    32:             s.send_message(msg)
    33:     except Exception as e:
    34:         print(f"寄信失敗: {e}", file=sys.stderr)
    35:         return 1
    36: 
    37:     print("SMTP 寄信成功")
    38:     return 0
    39: 
    40: if __name__ == "__main__":
    41:     raise SystemExit(main())
--------------------------------------------------------------------------------
END FILE    scripts/online_check.py
================================================================================
================================================================================
BEGIN FILE  scripts/run_pipeline.sh  (180 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env bash
     2: set -Eeuo pipefail
     3: . .venv/bin/activate 2>/dev/null || true
     4: export PYTHONPATH=src:${PYTHONPATH:-}
     5: export OFFLINE=${OFFLINE:-1}
     6: bin/smarun
     7: tools/show_summary.sh
--------------------------------------------------------------------------------
END FILE    scripts/run_pipeline.sh
================================================================================
================================================================================
BEGIN FILE  scripts/setup_env.sh  (226 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env bash
     2: set -Eeuo pipefail
     3: python -m venv .venv
     4: . .venv/bin/activate
     5: pip install -U pip
     6: [ -f requirements.txt ] && pip install -r requirements.txt
     7: [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt
--------------------------------------------------------------------------------
END FILE    scripts/setup_env.sh
================================================================================
================================================================================
BEGIN FILE  src/__init__.py  (46 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Legacy shim: allow tests to `import src.*`.
--------------------------------------------------------------------------------
END FILE    src/__init__.py
================================================================================
================================================================================
BEGIN FILE  src/action_handler.py  (123 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # AUTO-GENERATED SHIM for backward-compat imports
     2: from smart_mail_agent.routing.action_handler import *  # noqa: F401,F403
--------------------------------------------------------------------------------
END FILE    src/action_handler.py
================================================================================
================================================================================
BEGIN FILE  src/classifier.py  (3058 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import re
     4: from collections.abc import Callable
     5: from typing import Any
     6: 
     7: RE_QUOTE = re.compile(r"(報價|詢價|報價單|quote|quotation|洽詢|合作|採購|價格|price)", re.I)
     8: 
     9: 
    10: def _is_generic(text: str) -> bool:
    11:     t = (text or "").strip().lower()
    12:     return len(t) < 3 or t in {"hi", "hello", "test", "hey", "？", "?"}
    13: 
    14: 
    15: class IntentClassifier:
    16:     def __init__(
    17:         self, model_path: str | None = None, pipeline_override: Callable[[str], Any] | None = None
    18:     ):
    19:         self.model_path = model_path or ""
    20:         self.pipeline: Callable[[str], Any] = pipeline_override or (lambda txt: ("其他", 0.0))
    21: 
    22:     def _normalize_ret(self, ret: Any) -> tuple[str, float]:
    23:         # 常見：list[dict] / (label, score)
    24:         if isinstance(ret, list | tuple) and ret:
    25:             head = ret[0]
    26:             tail = ret[1] if len(ret) > 1 else None
    27:             if isinstance(head, dict):
    28:                 lab = (
    29:                     head.get("predicted_label") or head.get("label") or head.get("class") or "其他"
    30:                 )
    31:                 conf = head.get(
    32:                     "confidence",
    33:                     head.get("score", tail if isinstance(tail, int | float) else 0.0),
    34:                 )
    35:                 try:
    36:                     conf = float(conf)
    37:                 except Exception:
    38:                     conf = 0.0
    39:                 return str(lab), conf
    40:             # 一般 (label, score)
    41:             lab = str(head)
    42:             try:
    43:                 conf = float(tail) if tail is not None else 1.0
    44:             except Exception:
    45:                 conf = 0.0
    46:             return lab, conf
    47: 
    48:         # dict
    49:         if isinstance(ret, dict):
    50:             lab = ret.get("predicted_label") or ret.get("label") or ret.get("class") or "其他"
    51:             conf = ret.get("confidence", ret.get("score", 0.0))
    52:             try:
    53:                 conf = float(conf)
    54:             except Exception:
    55:                 conf = 0.0
    56:             return str(lab), conf
    57: 
    58:         # 純字串
    59:         if isinstance(ret, str):
    60:             return ret, 1.0
    61: 
    62:         return "其他", 0.0
    63: 
    64:     def classify(self, subject: str = "", content: str = "") -> dict[str, float | str]:
    65:         text = f"{(subject or '').strip()} {(content or '').strip()}".strip()
    66: 
    67:         # 先跑一次模型拿分數（之後不論規則或 fallback 都沿用這個分數）
    68:         model_label, model_conf = self._normalize_ret(self.pipeline(text))
    69:         conf = float(model_conf)
    70: 
    71:         # 規則優先：報價/洽詢等關鍵字
    72:         if RE_QUOTE.search(subject or "") or RE_QUOTE.search(content or ""):
    73:             lab = "業務接洽或報價"
    74:             return {"predicted_label": lab, "confidence": conf, "label": lab, "score": conf}
    75: 
    76:         # 一般情況
    77:         lab = model_label
    78:         # generic + 低信心 → 改為「其他」，但 confidence 不變
    79:         if _is_generic(subject) and _is_generic(content) and conf < 0.5:
    80:             lab = "其他"
    81: 
    82:         return {"predicted_label": lab, "confidence": conf, "label": lab, "score": conf}
--------------------------------------------------------------------------------
END FILE    src/classifier.py
================================================================================
================================================================================
BEGIN FILE  src/email_processor.py  (1196 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: from pathlib import Path
     5: from typing import Any
     6: 
     7: 
     8: def extract_fields(payload: dict[str, Any]) -> tuple[str, str, str]:
     9:     """從各種鍵名中擷取 subject/body/sender，缺少時回空字串。"""
    10:     subject = payload.get("subject") or payload.get("title") or ""
    11:     body = payload.get("body") or payload.get("text") or payload.get("content") or ""
    12:     sender = payload.get("sender") or payload.get("from") or payload.get("email") or ""
    13:     return subject, body, sender
    14: 
    15: 
    16: def write_classification_result(arg1: Any, arg2: Any) -> Path:
    17:     """
    18:     將分類結果寫成 JSON 檔。
    19:     支援兩種呼叫方式：
    20:       - write_classification_result(data: dict, path: str|Path)
    21:       - write_classification_result(path: str|Path, data: dict)
    22:     回傳實際寫出的檔案 Path。
    23:     """
    24:     # 判斷哪個是 path 哪個是 data
    25:     if isinstance(arg1, str | Path) and not isinstance(arg2, str | Path):
    26:         path, data = arg1, arg2
    27:     else:
    28:         data, path = arg1, arg2
    29: 
    30:     p = Path(path)
    31:     p.parent.mkdir(parents=True, exist_ok=True)
    32:     p.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")
    33:     return p
--------------------------------------------------------------------------------
END FILE    src/email_processor.py
================================================================================
================================================================================
BEGIN FILE  src/inference_classifier.py  (1075 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: from typing import Any
     4: 
     5: LABELS = {
     6:     "sales_inquiry": ("報價", "詢價", "quote", "price", "quotation"),
     7:     "complaint": ("投訴", "抱怨", "complaint", "refund", "宕機", "嚴重"),
     8: }
     9: 
    10: 
    11: def smart_truncate(text: str, max_chars: int = 1000) -> str:
    12:     text = text or ""
    13:     if len(text) <= max_chars:
    14:         return text
    15:     keep = max(0, max_chars - 4)  # 預留 "...\n"
    16:     return text[:keep] + "...\n"
    17: 
    18: 
    19: def load_model(*_args, **_kwargs):
    20:     class _Dummy: ...
    21: 
    22:     return _Dummy()
    23: 
    24: 
    25: def classify_intent(subject: str = "", body: str | None = None) -> dict[str, Any]:
    26:     # 測試會把 load_model monkeypatch 成拋錯，需回傳 unknown
    27:     try:
    28:         load_model()
    29:     except Exception:
    30:         return {"label": "unknown", "score": 0.0, "confidence": 0.0}
    31: 
    32:     text = f"{subject or ''} {body or ''}"
    33:     for lbl, kws in LABELS.items():
    34:         for kw in kws:
    35:             if kw in text:
    36:                 return {"label": lbl, "score": 0.95, "confidence": 0.95}
    37:     return {"label": "unknown", "score": 0.5, "confidence": 0.5}
--------------------------------------------------------------------------------
END FILE    src/inference_classifier.py
================================================================================
================================================================================
BEGIN FILE  src/init_db.py  (118 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # AUTO-GENERATED SHIM for backward-compat imports
     2: from smart_mail_agent.ingestion.init_db import *  # noqa: F401,F403
--------------------------------------------------------------------------------
END FILE    src/init_db.py
================================================================================
================================================================================
BEGIN FILE  src/log_writer.py  (125 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # AUTO-GENERATED SHIM for backward-compat imports
     2: from smart_mail_agent.observability.log_writer import *  # noqa: F401,F403
--------------------------------------------------------------------------------
END FILE    src/log_writer.py
================================================================================
