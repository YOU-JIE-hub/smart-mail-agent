================================================================================
BEGIN FILE  .portfolio_hidden/.dev/one_shot_patch_and_run.sh  (3900 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env bash
     2: set -Eeuo pipefail
     3: trap 'ec=$?; echo "❌ failed at line $LINENO (exit $ec)"; exit $ec' ERR
     4: 
     5: ROOT="$(cd "$(dirname "$0")/.." && pwd)"
     6: cd "$ROOT"
     7: 
     8: # venv
     9: if [[ ! -f .venv/bin/activate ]]; then
    10:   python3 -m venv .venv
    11: fi
    12: # shellcheck disable=SC1091
    13: . .venv/bin/activate
    14: if [[ -f requirements.txt && ! -f .venv/.deps_installed ]]; then
    15:   python -m pip -q install -U pip
    16:   pip -q install -r requirements.txt || true
    17:   touch .venv/.deps_installed
    18: fi
    19: 
    20: mkdir -p logs data/output src/utils utils
    21: : > src/utils/__init__.py
    22: : > utils/__init__.py
    23: 
    24: # 覆寫：穩定 jsonlog（永不丟例外；成功時回填 result["logged_path"]）
    25: cat > src/utils/jsonlog.py <<'PY'
    26: #!/usr/bin/env python3
    27: from __future__ import annotations
    28: import json, os, datetime as dt
    29: from pathlib import Path
    30: from typing import Any, Dict, Optional
    31: 
    32: def _log_dir() -> Path:
    33:     d = Path(os.getenv("SMA_LOG_DIR", "logs"))
    34:     d.mkdir(parents=True, exist_ok=True)
    35:     return d
    36: 
    37: def _jsonable(x: Any):
    38:     try:
    39:         json.dumps(x)
    40:         return x
    41:     except Exception:
    42:         return str(x)
    43: 
    44: def log_event(result: Dict[str, Any], request: Optional[Dict[str, Any]] = None) -> str:
    45:     try:
    46:         p = _log_dir() / f"sma-{dt.datetime.now():%Y%m%d}.jsonl"
    47:         row = {
    48:             "ts": dt.datetime.now().isoformat(timespec="seconds"),
    49:             "level": "INFO",
    50:             "action_name": result.get("action_name"),
    51:             "ok": bool(result.get("ok", True)),
    52:             "code": result.get("code", "OK"),
    53:             "request_id": result.get("request_id"),
    54:             "intent": result.get("intent"),
    55:             "confidence": result.get("confidence"),
    56:             "duration_ms": result.get("duration_ms") or result.get("spent_ms"),
    57:             "dry_run": result.get("dry_run"),
    58:             "warnings": result.get("warnings") or [],
    59:         }
    60:         if isinstance(request, dict):
    61:             row["req_subject"] = request.get("subject")
    62:             row["req_from"] = request.get("from")
    63:         row = {k: _jsonable(v) for k, v in row.items()}
    64:         with p.open("a", encoding="utf-8") as f:
    65:             f.write(json.dumps(row, ensure_ascii=False) + "\n")
    66:         result["logged_path"] = str(p)
    67:         if result.get("warnings"):
    68:             result["warnings"] = [w for w in result["warnings"] if w != "log_write_failed"]
    69:         return str(p)
    70:     except Exception:
    71:         result.setdefault("warnings", []).append("log_write_failed")
    72:         return ""
    73: PY
    74: 
    75: # 根目錄 utils 代理（明確 re-export）
    76: cat > utils/jsonlog.py <<'PY'
    77: """Compatibility proxy to canonical implementation."""
    78: from src.utils.jsonlog import log_event  # noqa: F401
    79: PY
    80: 
    81: # 跑 sample（非互動）
    82: if [[ -x bin/smarun ]]; then
    83:   bin/smarun
    84: else
    85:   PYTHONPATH=src python -m src.run_action_handler --input data/output/in_sales.json --output data/output/out_sales.json --dry-run
    86:   PYTHONPATH=src python -m src.run_action_handler --input data/output/in_complaint.json --output data/output/out_complaint.json --dry-run
    87: fi
    88: 
    89: # 驗證 logged_path 與 JSONL
    90: python - <<'PY'
    91: import json, os, datetime as dt
    92: for f in ("data/output/out_sales.json","data/output/out_complaint.json"):
    93:     d=json.load(open(f,"r",encoding="utf-8"))
    94:     print(f"{f}: logged_path={d.get('logged_path')} | warnings={d.get('warnings')}")
    95: lp=f"logs/sma-{dt.datetime.now():%Y%m%d}.jsonl"
    96: print("log file exists:", os.path.exists(lp), lp)
    97: if os.path.exists(lp):
    98:     print("---- tail ----")
    99:     print("\n".join(open(lp,"r",encoding="utf-8").read().splitlines()[-5:]))
   100: PY
   101: 
   102: # 可選自動提交
   103: if [[ "${DO_COMMIT:-0}" == "1" ]]; then
   104:   BRANCH="${BRANCH:-main}"
   105:   git add bin/smarun tools/one_shot_patch_and_run.sh src/utils/jsonlog.py utils/jsonlog.py || true
   106:   git commit -m "feat(scripts): add non-interactive runner and one-shot patch+verify" || true
   107:   git add -u || true
   108:   git commit -m "style: pre-commit fixes" || true
   109:   git push origin "$BRANCH"
   110: fi
   111: 
   112: echo "✅ done"
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/one_shot_patch_and_run.sh
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/project_catalog.py  (1537 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：tools/project_catalog.py
     3: # 模組用途：掃描專案並產生 PROJECT_STATUS.md
     4: 
     5: import re
     6: import sys
     7: from collections import defaultdict
     8: from pathlib import Path
     9: 
    10: ROOT = Path(__file__).resolve().parents[1]
    11: OUT = ROOT / "PROJECT_STATUS.md"
    12: 
    13: ENTRY = re.compile(r'if\s+__name__\s*==\s*[\'"]__main__[\'"]')
    14: ARG = re.compile(r"argparse\.ArgumentParser")
    15: DDL = re.compile(r"CREATE TABLE IF NOT EXISTS\s+([a-zA-Z_][a-zA-Z0-9_]*)", re.I)
    16: 
    17: 
    18: def list_py():
    19:     return [p for p in ROOT.rglob("*.py") if ".venv" not in str(p)]
    20: 
    21: 
    22: def main():
    23:     files = list_py()
    24:     entries = [str(p.relative_to(ROOT)) for p in files if ENTRY.search(p.read_text(encoding="utf-8", errors="ignore"))]
    25:     clis = [str(p.relative_to(ROOT)) for p in files if ARG.search(p.read_text(encoding="utf-8", errors="ignore"))]
    26:     tables = defaultdict(set)
    27:     for p in files:
    28:         for m in DDL.finditer(p.read_text(encoding="utf-8", errors="ignore")):
    29:             tables[m.group(1)].add(str(p.relative_to(ROOT)))
    30:     md = []
    31:     md.append("# PROJECT STATUS\n")
    32:     md.append("## Entries\n")
    33:     md += [f"- {e}" for e in sorted(entries)]
    34:     md.append("\n## CLI-capable modules\n")
    35:     md += [f"- {e}" for e in sorted(clis)]
    36:     md.append("\n## Detected DB tables\n")
    37:     for t, locs in sorted({k: sorted(v) for k, v in tables.items()}.items()):
    38:         md.append(f"- **{t}**: {', '.join(locs)}")
    39:     OUT.write_text("\n".join(md) + "\n", encoding="utf-8")
    40:     print(f"Wrote {OUT}")
    41: 
    42: 
    43: if __name__ == "__main__":
    44:     sys.exit(main())
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/project_catalog.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/push_secrets_from_env.sh  (1476 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env bash
     2: set -euo pipefail
     3: 
     4: if ! command -v gh >/dev/null 2>&1; then
     5:   echo "[ERR] gh (GitHub CLI) 未安裝。可用：sudo apt update && sudo apt install -y gh"
     6:   exit 1
     7: fi
     8: 
     9: if [[ ! -f ".env" ]]; then
    10:   echo "[ERR] 找不到 .env"
    11:   exit 1
    12: fi
    13: 
    14: # 從 .env 取值（若鍵不存在就空字串）
    15: function getenv() { awk -F= -v k="$1" '$1==k {sub(/^"|"$/,"",$2);print $2}' .env | tr -d '\r'; }
    16: 
    17: SMTP_USER="$(getenv SMTP_USER)"
    18: SMTP_PASS="$(getenv SMTP_PASS)"
    19: REPLY_TO="$(getenv REPLY_TO)"
    20: SMTP_HOST="$(getenv SMTP_HOST)"
    21: SMTP_PORT="$(getenv SMTP_PORT)"
    22: SMTP_FROM="$(getenv SMTP_FROM)"
    23: IMAP_HOST="$(getenv IMAP_HOST)"
    24: IMAP_USER="$(getenv IMAP_USER)"
    25: IMAP_PASS="$(getenv IMAP_PASS)"
    26: OPENAI_API_KEY="$(getenv OPENAI_API_KEY)"
    27: 
    28: echo "[info] 寫入 GitHub Secrets ..."
    29: gh secret set SMTP_USER --body "$SMTP_USER"
    30: gh secret set SMTP_PASS --body "$SMTP_PASS"
    31: gh secret set REPLY_TO  --body "$REPLY_TO"
    32: # 選配
    33: [[ -n "$SMTP_HOST" ]] && gh secret set SMTP_HOST --body "$SMTP_HOST"
    34: [[ -n "$SMTP_PORT" ]] && gh secret set SMTP_PORT --body "$SMTP_PORT"
    35: [[ -n "$SMTP_FROM" ]] && gh secret set SMTP_FROM --body "$SMTP_FROM"
    36: [[ -n "$IMAP_HOST" ]] && gh secret set IMAP_HOST --body "$IMAP_HOST"
    37: [[ -n "$IMAP_USER" ]] && gh secret set IMAP_USER --body "$IMAP_USER"
    38: [[ -n "$IMAP_PASS" ]] && gh secret set IMAP_PASS --body "$IMAP_PASS"
    39: [[ -n "$OPENAI_API_KEY" ]] && gh secret set OPENAI_API_KEY --body "$OPENAI_API_KEY"
    40: 
    41: echo "[ok] 完成。可到 Actions 觸發 'SMTP Online Test'"
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/push_secrets_from_env.sh
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/repo_tidy.py  (1306 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：tools/repo_tidy.py
     3: # 模組用途：補 shebang/檔頭、簡易檢查 emails_log 表名
     4: 
     5: import argparse
     6: import re
     7: from pathlib import Path
     8: 
     9: ROOT = Path(__file__).resolve().parents[1]
    10: TARGET_DIRS = ["src", "utils", "scripts", "modules", "spam"]
    11: HEADER_RE = re.compile(r"^#!/usr/bin/env python3\n# 檔案位置：.*\n# 模組用途：.*", re.M)
    12: 
    13: 
    14: def list_py():
    15:     files = []
    16:     for d in TARGET_DIRS:
    17:         p = ROOT / d
    18:         if p.exists():
    19:             files += list(p.rglob("*.py"))
    20:     return files
    21: 
    22: 
    23: def ensure_header(p: Path, dry: bool = False):
    24:     rel = p.relative_to(ROOT).as_posix()
    25:     txt = p.read_text(encoding="utf-8", errors="ignore")
    26:     if HEADER_RE.search(txt):
    27:         return False
    28:     header = f"#!/usr/bin/env python3\n# 檔案位置：{rel}\n# 模組用途：請補充此模組用途說明\n\n"
    29:     if not dry:
    30:         p.write_text(header + txt, encoding="utf-8")
    31:     return True
    32: 
    33: 
    34: def main():
    35:     ap = argparse.ArgumentParser()
    36:     ap.add_argument("--check", action="store_true")
    37:     args = ap.parse_args()
    38:     changed = 0
    39:     for p in list_py():
    40:         changed += 1 if ensure_header(p, dry=args.check) else 0
    41:     print(("[檢查]" if args.check else "[修正]") + f" 檔頭處理：{changed} 檔")
    42: 
    43: 
    44: if __name__ == "__main__":
    45:     main()
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/repo_tidy.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/run_actions_matrix.py  (5747 bytes)
TAGS: legacy_candidate=no | sys_path_hack=yes | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：tools/run_actions_matrix.py
     3: # 用途：一次觸發六大動作的「正常＋異常」案例矩陣，驗證回退與產物存在性
     4: 
     5: from __future__ import annotations
     6: 
     7: import json
     8: import os
     9: import sys
    10: from pathlib import Path
    11: from typing import Any
    12: 
    13: 
    14: def _detect_root() -> Path:
    15:     # 兼容以檔案執行與以 stdin/IDE 執行
    16:     try:
    17:         f = Path(__file__)
    18:         if str(f) == "<stdin>":
    19:             raise NameError
    20:         return f.resolve().parents[1]
    21:     except Exception:
    22:         return Path.cwd()
    23: 
    24: 
    25: ROOT = _detect_root()
    26: SRC = ROOT / "src"
    27: OUT = ROOT / "data" / "output" / "matrix"
    28: OUT.mkdir(parents=True, exist_ok=True)
    29: 
    30: 
    31: def _ensure_sys_path() -> None:
    32:     # 同時加入 src 與 repo 根目錄，避免相對匯入問題
    33:     for p in (SRC, ROOT):
    34:         sp = str(p)
    35:         if sp not in sys.path:
    36:             sys.path.insert(0, sp)
    37: 
    38: 
    39: def load_handle():
    40:     _ensure_sys_path()
    41:     try:
    42:         from action_handler import handle
    43: 
    44:         return handle
    45:     except ModuleNotFoundError:
    46:         # 在某些結構下需要模組前綴
    47:         from src.action_handler import handle  # type: ignore
    48: 
    49:         return handle
    50: 
    51: 
    52: def _run_case(handle, name: str, payload: dict[str, Any]) -> dict[str, Any]:
    53:     os.environ.setdefault("OFFLINE", "1")
    54:     res = handle(payload)
    55:     outp = OUT / f"{name}.json"
    56:     outp.write_text(json.dumps(res, ensure_ascii=False, indent=2), encoding="utf-8")
    57:     attachments = []
    58:     for ap in res.get("attachments", []) or []:
    59:         p = Path(ap)
    60:         attachments.append({"path": str(p), "exists": p.exists(), "size": (p.stat().st_size if p.exists() else 0)})
    61:     return {
    62:         "name": name,
    63:         "action": res.get("action") or res.get("action_name"),
    64:         "ok": res.get("ok", True),
    65:         "attachments": attachments,
    66:         "output": str(outp),
    67:     }
    68: 
    69: 
    70: def run_matrix() -> dict[str, Any]:
    71:     handle = load_handle()
    72:     matrix: list[dict[str, Any]] = []
    73: 
    74:     # 正常案例（六大動作）
    75:     matrix.append(
    76:         _run_case(
    77:             handle,
    78:             "ok_send_quote",
    79:             {
    80:                 "predicted_label": "業務接洽或報價",
    81:                 "subject": "API 串接報價",
    82:                 "content": "請提供報價與交期",
    83:                 "sender": "buyer@example.com",
    84:             },
    85:         )
    86:     )
    87:     matrix.append(
    88:         _run_case(
    89:             handle,
    90:             "ok_reply_support",
    91:             {
    92:                 "predicted_label": "請求技術支援",
    93:                 "subject": "登入錯誤",
    94:                 "content": "顯示 500 需要排查",
    95:                 "sender": "user@example.com",
    96:             },
    97:         )
    98:     )
    99:     matrix.append(
   100:         _run_case(
   101:             handle,
   102:             "ok_apply_info",
   103:             {
   104:                 "predicted_label": "申請修改資訊",
   105:                 "subject": "更新聯絡方式",
   106:                 "content": "電話改為 0987xxxxxx",
   107:                 "sender": "alice@example.com",
   108:             },
   109:         )
   110:     )
   111:     matrix.append(
   112:         _run_case(
   113:             handle,
   114:             "ok_reply_faq",
   115:             {
   116:                 "predicted_label": "詢問流程或規則",
   117:                 "subject": "退貨流程",
   118:                 "content": "如何退貨？",
   119:                 "sender": "bob@example.com",
   120:             },
   121:         )
   122:     )
   123:     matrix.append(
   124:         _run_case(
   125:             handle,
   126:             "ok_reply_apology",
   127:             {
   128:                 "predicted_label": "投訴與抱怨",
   129:                 "subject": "體驗不佳",
   130:                 "content": "等待過久",
   131:                 "sender": "carol@example.com",
   132:             },
   133:         )
   134:     )
   135:     matrix.append(
   136:         _run_case(
   137:             handle,
   138:             "ok_reply_general",
   139:             {
   140:                 "predicted_label": "其他",
   141:                 "subject": "一般詢問",
   142:                 "content": "請問出貨時間",
   143:                 "sender": "eve@example.com",
   144:             },
   145:         )
   146:     )
   147: 
   148:     # 邊界案例
   149:     matrix.append(
   150:         _run_case(
   151:             handle,
   152:             "edge_unknown_label",
   153:             {
   154:                 "predicted_label": "未定義分類",
   155:                 "subject": "?",
   156:                 "content": "?",
   157:                 "sender": "x@example.com",
   158:             },
   159:         )
   160:     )
   161:     matrix.append(
   162:         _run_case(
   163:             handle,
   164:             "edge_missing_sender",
   165:             {"predicted_label": "其他", "subject": "no sender", "content": "hello"},
   166:         )
   167:     )
   168:     matrix.append(
   169:         _run_case(
   170:             handle,
   171:             "edge_empty_subject",
   172:             {
   173:                 "predicted_label": "請求技術支援",
   174:                 "subject": "",
   175:                 "content": "錯誤代碼 123",
   176:                 "sender": "nosub@example.com",
   177:             },
   178:         )
   179:     )
   180:     matrix.append(
   181:         _run_case(
   182:             handle,
   183:             "edge_empty_content",
   184:             {
   185:                 "predicted_label": "詢問流程或規則",
   186:                 "subject": "流程",
   187:                 "content": "",
   188:                 "sender": "nocontent@example.com",
   189:             },
   190:         )
   191:     )
   192:     matrix.append(
   193:         _run_case(
   194:             handle,
   195:             "edge_apply_no_diff",
   196:             {
   197:                 "predicted_label": "申請修改資訊",
   198:                 "subject": "更新",
   199:                 "content": "您好",
   200:                 "sender": "z@example.com",
   201:             },
   202:         )
   203:     )
   204: 
   205:     return {"cases": matrix, "outputs_dir": str(OUT)}
   206: 
   207: 
   208: def main() -> None:
   209:     summary = run_matrix()
   210:     outp = OUT / "matrix_summary.json"
   211:     outp.write_text(json.dumps(summary, ensure_ascii=False, indent=2), encoding="utf-8")
   212:     print("完成。請回傳：", str(outp))
   213: 
   214: 
   215: if __name__ == "__main__":
   216:     main()
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/run_actions_matrix.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/run_spam_demo.py  (1453 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: import time
     5: from pathlib import Path
     6: 
     7: from src.spam.pipeline import analyze
     8: 
     9: ROOT = Path(__file__).resolve().parents[1]
    10: OUT = ROOT / "data" / "output"
    11: OUT.mkdir(parents=True, exist_ok=True)
    12: 
    13: SAMPLES = [
    14:     {
    15:         "name": "ham_simple",
    16:         "email": {
    17:             "sender": "client@company.com",
    18:             "subject": "關於報價與合約",
    19:             "content": "請提供新版報價與付款條款，謝謝",
    20:             "attachments": [],
    21:         },
    22:     },
    23:     {
    24:         "name": "spam_giveaway",
    25:         "email": {
    26:             "sender": "admin@promo.top",
    27:             "subject": "GET RICH QUICK!!!",
    28:             "content": "Free crypto airdrop now: https://scam.click/win?token=abc",
    29:             "attachments": [],
    30:         },
    31:     },
    32:     {
    33:         "name": "suspect_attach",
    34:         "email": {
    35:             "sender": "it@support.co",
    36:             "subject": "Password reset",
    37:             "content": "Please verify your login via the link",
    38:             "attachments": ["reset.js"],
    39:         },
    40:     },
    41: ]
    42: 
    43: 
    44: def main():
    45:     rows = []
    46:     for s in SAMPLES:
    47:         r = analyze(s["email"])
    48:         rows.append({"name": s["name"], **r})
    49:     out = OUT / "spam_demo.json"
    50:     out.write_text(
    51:         json.dumps({"ts": time.strftime("%Y-%m-%d %H:%M:%S"), "rows": rows}, ensure_ascii=False, indent=2),
    52:         encoding="utf-8",
    53:     )
    54:     print("[SPAM] demo ->", out)
    55: 
    56: 
    57: if __name__ == "__main__":
    58:     main()
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/run_spam_demo.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/set_imap_pass.py  (1067 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案：tools/set_imap_pass.py
     3: # 用法：python tools/set_imap_pass.py --value '16碼AppPassword'
     4: from __future__ import annotations
     5: 
     6: import argparse
     7: import re
     8: from pathlib import Path
     9: 
    10: ROOT = Path(__file__).resolve().parents[1]
    11: ENV = ROOT / ".env"
    12: 
    13: 
    14: def main() -> int:
    15:     ap = argparse.ArgumentParser()
    16:     ap.add_argument("--value", required=True, help="新的 IMAP App Password（16 碼，不要含空白）")
    17:     args = ap.parse_args()
    18: 
    19:     val = re.sub(r"\s+", "", args.value.strip())
    20:     if not val or len(val) < 16:
    21:         print("[ERR] 看起來不像有效的 16 碼 App Password")
    22:         return 2
    23: 
    24:     if not ENV.exists():
    25:         print(f"[ERR] 找不到 {ENV}")
    26:         return 3
    27: 
    28:     txt = ENV.read_text(encoding="utf-8")
    29:     if "IMAP_PASS=" not in txt:
    30:         txt += "\nIMAP_PASS=\n"
    31:     txt = re.sub(r"^IMAP_PASS=.*$", f"IMAP_PASS={val}", txt, flags=re.MULTILINE)
    32:     ENV.write_text(txt, encoding="utf-8")
    33:     print("[OK] 已更新 .env 的 IMAP_PASS")
    34:     return 0
    35: 
    36: 
    37: if __name__ == "__main__":
    38:     raise SystemExit(main())
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/set_imap_pass.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/set_smtp_pass.py  (962 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: from __future__ import annotations
     3: 
     4: import argparse
     5: import re
     6: from pathlib import Path
     7: 
     8: ROOT = Path(__file__).resolve().parents[1]
     9: ENV = ROOT / ".env"
    10: 
    11: 
    12: def main() -> int:
    13:     ap = argparse.ArgumentParser()
    14:     ap.add_argument("--value", required=True, help="新的 SMTP App Password（16 碼，不要含空白）")
    15:     args = ap.parse_args()
    16:     val = re.sub(r"\s+", "", args.value.strip())
    17:     if not val or len(val) < 16:
    18:         print("[ERR] 看起來不像有效的 16 碼 App Password")
    19:         return 2
    20:     if not ENV.exists():
    21:         print(f"[ERR] 找不到 {ENV}")
    22:         return 3
    23:     txt = ENV.read_text(encoding="utf-8")
    24:     if "SMTP_PASS=" not in txt:
    25:         txt += "\nSMTP_PASS=\n"
    26:     txt = re.sub(r"^SMTP_PASS=.*$", f"SMTP_PASS={val}", txt, flags=re.MULTILINE)
    27:     ENV.write_text(txt, encoding="utf-8")
    28:     print("[OK] 已更新 .env 的 SMTP_PASS")
    29:     return 0
    30: 
    31: 
    32: if __name__ == "__main__":
    33:     raise SystemExit(main())
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/set_smtp_pass.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/show_summary.sh  (438 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env bash
     2: set -Eeuo pipefail
     3: shopt -s nullglob
     4: OUT_DIR="data/output"
     5: files=("$OUT_DIR"/out_*.json)
     6: [ ${#files[@]} -eq 0 ] && echo "未找到輸出於 ${OUT_DIR}" >&2 && exit 1
     7: for f in "${files[@]}"; do
     8:   echo "==== $(basename "$f") ===="
     9:   if command -v jq >/dev/null 2>&1; then
    10:     jq '{action, label:.predicted_label, confidence, dry_run, meta, logged_path}' "$f" 2>/dev/null || cat "$f"
    11:   else
    12:     head -n 80 "$f"
    13:   fi
    14: done
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/show_summary.sh
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.dev/verify_pdf_degrade.py  (1018 bytes)
TAGS: legacy_candidate=no | sys_path_hack=yes | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: from __future__ import annotations
     3: 
     4: import builtins
     5: import sys
     6: from contextlib import contextmanager
     7: from pathlib import Path
     8: 
     9: ROOT = Path(__file__).resolve().parents[1]
    10: SRC = ROOT / "src"
    11: for p in (ROOT, SRC):
    12:     sp = str(p)
    13:     if sp not in sys.path:
    14:         sys.path.insert(0, sp)
    15: 
    16: from utils.pdf_safe import write_pdf_or_txt
    17: 
    18: 
    19: @contextmanager
    20: def break_reportlab():
    21:     real = builtins.__import__
    22: 
    23:     def fake(name, *a, **k):
    24:         if name.startswith("reportlab"):
    25:             raise ImportError("blocked")
    26:         return real(name, *a, **k)
    27: 
    28:     builtins.__import__ = fake
    29:     try:
    30:         yield
    31:     finally:
    32:         builtins.__import__ = real
    33: 
    34: 
    35: def main():
    36:     with break_reportlab():
    37:         p = write_pdf_or_txt(["中文測試", "ReportLab 缺失 → 降級 .txt"])
    38:     p = Path(p)
    39:     print(
    40:         "[VERIFY] created:",
    41:         p,
    42:         "exists:",
    43:         p.exists(),
    44:         "size:",
    45:         (p.stat().st_size if p.exists() else 0),
    46:     )
    47: 
    48: 
    49: if __name__ == "__main__":
    50:     main()
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.dev/verify_pdf_degrade.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.env.example  (287 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: APP_ENV=dev
     2: TZ=Asia/Taipei
     3: OFFLINE=1
     4: SMTP_HOST=smtp.example.com
     5: SMTP_PORT=587
     6: SMTP_USER=user@example.com
     7: SMTP_PASS=please-change
     8: SMTP_FROM=Smart Mail Agent <noreply@example.com>
     9: MODEL_DIR=outputs/roberta-zh-checkpoint
    10: FONT_PATH=
    11: OUTPUT_DIR=data/output
    12: LOG_DIR=logs
    13: ALLOW_EXTERNAL_CALL=0
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.env.example
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.github/workflows/ci.yml  (506 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: name: CI
     2: on:
     3:   push:
     4:     branches: [ main, master ]
     5:   pull_request:
     6:     branches: [ main, master ]
     7: jobs:
     8:   test:
     9:     runs-on: ubuntu-latest
    10:     steps:
    11:       - uses: actions/checkout@v4
    12:       - uses: actions/setup-python@v5
    13:         with:
    14:           python-version: "3.11"
    15:       - run: python -m pip install -U pip
    16:       - run: python -m pip install -e . -r requirements.txt || python -m pip install -e .
    17:       - run: pytest -q || true
    18:       - run: python -m pip install -U build
    19:       - run: python -m build
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.github/workflows/ci.yml
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.github/workflows/coverage.yml  (730 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: name: coverage
     2: on:
     3:   push:
     4:     branches: [ "main" ]
     5:   pull_request:
     6:     branches: [ "main" ]
     7: jobs:
     8:   cov:
     9:     runs-on: ubuntu-latest
    10:     env:
    11:       PYTHONPATH: .
    12:     steps:
    13:       - uses: actions/checkout@v4
    14:       - uses: actions/setup-python@v5
    15:         with:
    16:           python-version: "3.10"
    17:       - name: Install
    18:         run: |
    19:           python -m pip install -U pip
    20:           python -m pip install -e ".[dev]"
    21:       - name: Test with coverage
    22:         run: |
    23:           pytest -q tests -k "not online" --cov=src --cov=smart_mail_agent --cov-report=xml
    24:       - name: Upload to Codecov
    25:         uses: codecov/codecov-action@v4
    26:         with:
    27:           files: ./coverage.xml
    28:           flags: unittests
    29:           fail_ci_if_error: true
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.github/workflows/coverage.yml
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.github/workflows/docs.yml  (524 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: name: docs
     2: on:
     3:   push:
     4:     branches: [ "main", "cleanup/**" ]
     5:   workflow_dispatch:
     6: permissions:
     7:   contents: write
     8: jobs:
     9:   build-deploy:
    10:     runs-on: ubuntu-latest
    11:     steps:
    12:       - uses: actions/checkout@v4
    13:       - uses: actions/setup-python@v5
    14:         with:
    15:           python-version: "3.10"
    16:       - name: Install & Build
    17:         run: |
    18:           python -m pip install -U pip
    19:           python -m pip install -e ".[dev]"
    20:           mkdocs build --strict
    21:       - name: Deploy to gh-pages
    22:         run: mkdocs gh-deploy --force
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.github/workflows/docs.yml
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.github/workflows/release.yml  (504 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: name: release
     2: on:
     3:   push:
     4:     tags: ["v*"]
     5: jobs:
     6:   build-upload:
     7:     runs-on: ubuntu-latest
     8:     steps:
     9:       - uses: actions/checkout@v4
    10:       - uses: actions/setup-python@v5
    11:         with:
    12:           python-version: "3.10"
    13:       - name: Build artifacts
    14:         run: |
    15:           python -m pip install -U pip build
    16:           python -m build
    17:       - name: Upload to GitHub Release
    18:         uses: softprops/action-gh-release@v2
    19:         with:
    20:           files: |
    21:             dist/*.whl
    22:             dist/*.tar.gz
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.github/workflows/release.yml
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.gitignore  (536 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: __pycache__/
     2: *.py[cod]
     3: *.egg-info/
     4: .build/
     5: dist/
     6: build/
     7: .mypy_cache/
     8: .pytest_cache/
     9: *.log
    10: .venv/
    11: env/
    12: venv/
    13: .DS_Store
    14: Thumbs.db
    15: .vscode/
    16: .idea/
    17: logs/*.jsonl
    18: data/output/*
    19: !data/output/.gitkeep
    20: assets/fonts/*.ttf
    21: .coverage
    22: htmlcov/
    23: backups/
    24: # Local-only
    25: .env
    26: .backup/
    27: $BIN/
    28: artifacts/
    29: assets/fonts/*.otf
    30: data/
    31: logs/
    32: logs.out
    33: model/
    34: output/
    35: reports/
    36: sitecustomize.py
    37: *.bak
    38: .venv/
    39: .mypy_cache/
    40: .pytest_cache/
    41: .ruff_cache/
    42: __pycache__/
    43: site/
    44: smart-mail-agent-*.tar.gz
    45: .venv/
    46: .pytest_cache/
    47: .ruff_cache/
    48: site/
    49: .cache/
    50: __pycache__/
    51: *.py[cod]
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.gitignore
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/.pre-commit-config.yaml  (425 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: repos:
     2:   - repo: https://github.com/astral-sh/ruff-pre-commit
     3:     rev: v0.6.4
     4:     hooks:
     5:       - id: ruff
     6:         args: [--fix]
     7:       - id: ruff-format
     8:   - repo: https://github.com/pre-commit/pre-commit-hooks
     9:     rev: v4.6.0
    10:     hooks:
    11:       - id: end-of-file-fixer
    12:       - id: trailing-whitespace
    13:   - repo: https://github.com/asottile/pyupgrade
    14:     rev: v3.17.0
    15:     hooks:
    16:       - id: pyupgrade
    17:         args: [--py310-plus]
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/.pre-commit-config.yaml
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/bootstrap_project.py  (33787 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：bootstrap_project.py
     3: # 模組用途：一鍵建立/更新 Smart-Mail-Agent 專案必要檔案與結構（可加 --force 覆蓋）
     4: 
     5: import argparse
     6: import os  # noqa: F401
     7: from pathlib import Path
     8: from textwrap import dedent
     9: 
    10: ROOT = Path(__file__).resolve().parent
    11: 
    12: FILES = {
    13:     # -------------------- 開發/測試設定 --------------------
    14:     "pyproject.toml": dedent(
    15:         """
    16:         #!/usr/bin/env python3
    17:         # 檔案位置：pyproject.toml
    18:         # 模組用途：定義 black / isort / flake8 / mypy 統一規範
    19: 
    20:         [tool.black]
    21:         target-version = ["py311"]
    22:         line-length = 100
    23:         include = '\\.pyi?$'
    24:         exclude = '''
    25:         /(
    26:           \\.venv
    27:         | \\.git
    28:         | data
    29:         | dist
    30:         | build
    31:         )/
    32:         '''
    33: 
    34:         [tool.isort]
    35:         profile = "black"
    36:         line_length = 100
    37:         src_paths = ["src", "tests", "scripts"]
    38: 
    39:         [tool.flake8]
    40:         max-line-length = 100
    41:         extend-ignore = ["E203","W503"]
    42:         exclude = [".venv","data","build","dist",".git"]
    43: 
    44:         [tool.mypy]
    45:         python_version = "3.11"
    46:         ignore_missing_imports = true
    47:         warn_redundant_casts = true
    48:         warn_unused_ignores = true
    49:         warn_return_any = false
    50:         no_implicit_optional = true
    51:         strict_optional = false
    52:     """
    53:     ).lstrip(),
    54:     ".editorconfig": dedent(
    55:         """
    56:         #!/usr/bin/env python3
    57:         # 檔案位置：.editorconfig
    58:         # 模組用途：統一 IDE/編輯器行為（縮排、換行、編碼）
    59: 
    60:         root = true
    61: 
    62:         [*]
    63:         charset = utf-8
    64:         end_of_line = lf
    65:         insert_final_newline = true
    66:         trim_trailing_whitespace = true
    67:         indent_style = space
    68:         indent_size = 4
    69: 
    70:         [*.md]
    71:         trim_trailing_whitespace = false
    72:     """
    73:     ).lstrip(),
    74:     "pytest.ini": dedent(
    75:         """
    76:         #!/usr/bin/env python3
    77:         # 檔案位置：pytest.ini
    78:         # 模組用途：pytest 探測與輸出統一
    79: 
    80:         [pytest]
    81:         testpaths = tests
    82:         addopts = -q -ra
    83:         filterwarnings =
    84:             ignore::DeprecationWarning
    85:         pythonpath = src
    86:     """
    87:     ).lstrip(),
    88:     ".pre-commit-config.yaml": dedent(
    89:         """
    90:         #!/usr/bin/env python3
    91:         # 檔案位置：.pre-commit-config.yaml
    92:         # 模組用途：git 提交前自動格式/檢查
    93: 
    94:         repos:
    95:           - repo: https://github.com/psf/black
    96:             rev: 24.4.2
    97:             hooks:
    98:               - id: black
    99:           - repo: https://github.com/pycqa/isort
   100:             rev: 5.13.2
   101:             hooks:
   102:               - id: isort
   103:           - repo: https://github.com/pycqa/flake8
   104:             rev: 7.0.0
   105:             hooks:
   106:               - id: flake8
   107:     """
   108:     ).lstrip(),
   109:     "Makefile": dedent(
   110:         """
   111:         #!/usr/bin/env python3
   112:         # 檔案位置：Makefile
   113:         # 模組用途：提供常用開發指令（安裝、格式、檢查、測試、稽核）
   114: 
   115:         .PHONY: init fmt lint test audit all
   116: 
   117:         init:
   118: \tpython -m venv .venv && . .venv/bin/activate && pip install -U pip
   119: \t. .venv/bin/activate && pip install -r requirements.txt
   120: \t. .venv/bin/activate && pip install black isort flake8 mypy pre-commit
   121: \tpre-commit install
   122: 
   123:         fmt:
   124: \t. .venv/bin/activate && isort .
   125: \t. .venv/bin/activate && black .
   126: 
   127:         lint:
   128: \t. .venv/bin/activate && flake8 .
   129: \t. .venv/bin/activate && mypy src || true
   130: 
   131:         test:
   132: \t. .venv/bin/activate && PYTHONPATH=src pytest -q
   133: 
   134:         audit:
   135: \t. .venv/bin/activate && python tools/repo_tidy.py --check
   136: 
   137:         all: fmt lint test audit
   138:     """
   139:     ).lstrip(),
   140:     "requirements.txt": dedent(
   141:         """
   142:         #!/usr/bin/env python3
   143:         # 檔案位置：requirements.txt
   144:         # 模組用途：專案必要套件（去重版）
   145: 
   146:         accelerate>=0.26.0
   147:         beautifulsoup4
   148:         datasets>=2.18.0
   149:         email-validator
   150:         fpdf2
   151:         matplotlib
   152:         openai>=1.12.0
   153:         pydantic>=2
   154:         python-dotenv
   155:         pytest>=7.0.0
   156:         pytest-html
   157:         rich>=13.0.0
   158:         scikit-learn
   159:         sentencepiece
   160:         tabulate>=0.9.0
   161:         tenacity>=8.0.1
   162:         tiktoken
   163:         tqdm
   164:         torch>=2.0.0
   165:         transformers>=4.41.1
   166:     """
   167:     ).lstrip(),
   168:     ".gitignore": dedent(
   169:         """
   170:         #!/usr/bin/env python3
   171:         # 檔案位置：.gitignore
   172:         # 模組用途：忽略不需版控的檔案
   173: 
   174:         .venv/
   175:         __pycache__/
   176:         .pytest_cache/
   177:         .mypy_cache/
   178:         .DS_Store
   179:         data/
   180:         !data/.keep
   181:         logs/
   182:         !logs/.keep
   183:         *.db
   184:         .env
   185:         .coverage
   186:         dist/
   187:         build/
   188:     """
   189:     ).lstrip(),
   190:     ".env.example": dedent(
   191:         """
   192:         #!/usr/bin/env python3
   193:         # 檔案位置：.env.example
   194:         # 模組用途：環境變數樣板（請複製為 .env 並填入正確值）
   195: 
   196:         # SMTP
   197:         SMTP_USER=your_account@gmail.com
   198:         SMTP_PASS=app_password_here
   199:         SMTP_HOST=smtp.gmail.com
   200:         SMTP_PORT=465
   201:         SMTP_FROM=Smart-Mail-Agent <your_account@gmail.com>
   202:         REPLY_TO=your_account@gmail.com
   203: 
   204:         # OpenAI（缺少時系統自動降級，不中斷）
   205:         OPENAI_API_KEY=
   206: 
   207:         # IMAP（選配）
   208:         IMAP_HOST=imap.gmail.com
   209:         IMAP_USER=your_account@gmail.com
   210:         IMAP_PASS=app_password_here
   211: 
   212:         # 字型
   213:         QUOTE_FONT_PATH=assets/fonts/NotoSansTC-Regular.ttf
   214: 
   215:         # 模型
   216:         CLASSIFIER_PATH=outputs/roberta-zh-checkpoint
   217: 
   218:         # 輸出
   219:         OUTPUT_DIR=data/output
   220:     """
   221:     ).lstrip(),
   222:     "README.md": dedent(
   223:         """
   224:         # Smart-Mail-Agent（企業可部署版）
   225: 
   226:         ## 快速開始
   227:         ```bash
   228:         python -m venv .venv && . .venv/bin/activate
   229:         pip install -U pip -r requirements.txt
   230:         cp .env.example .env  # 填入 SMTP 等
   231:         python init_db.py     # 建置 emails_log / users+diff_log / processed_mails / tickets
   232:         ```
   233: 
   234:         ## 一鍵驗證
   235:         ```bash
   236:         make all           # 格式檢查 + 靜態檢查 + 測試 + 稽核
   237:         PYTHONPATH=src python scripts/check_email_log.py
   238:         ```
   239: 
   240:         ## 端到端（如有 pipeline/main.py）
   241:         ```bash
   242:         PYTHONPATH=src python pipeline/main.py --limit 10
   243:         ```
   244:     """
   245:     ).lstrip(),
   246:     # -------------------- src/ 核心模組 --------------------
   247:     "src/__init__.py": "",
   248:     "src/action_handler.py": dedent(
   249:         """
   250:         #!/usr/bin/env python3
   251:         # 檔案位置：src/action_handler.py
   252:         # 模組用途：根據分類結果執行對應處理（工單/異動/RAG/客訴/報價）並記錄統計
   253: 
   254:         import os  # noqa: F401
   255:         import json
   256:         import time
   257:         import argparse
   258:         import subprocess
   259:         from datetime import datetime
   260:         from utils.logger import logger
   261:         from utils.db_tools import get_user_by_email
   262:         from utils.log_writer import log_to_db
   263:         from utils.rag_reply import generate_rag_reply
   264:         from utils.mailer import send_email_with_attachment
   265:         from quotation import choose_package, generate_pdf_quote
   266:         from quote_logger import log_quote
   267:         from leads_logger import log_lead
   268:         from stats_collector import increment_counter
   269: 
   270:         def handle_tech_support(data: dict) -> str:
   271:             logger.info("[action_handler] 處理技術支援工單")
   272:             subprocess.run([
   273:                 "python", "src/support_ticket.py", "create",
   274:                 "--subject", data.get("subject",""),
   275:                 "--content", data.get("body",""),
   276:                 "--summary", data.get("summary",""),
   277:                 "--sender", data.get("sender",""),
   278:                 "--category", data.get("predicted_label",""),
   279:                 "--confidence", str(data.get("confidence",0))
   280:             ], check=True)
   281:             return "已建立工單"
   282: 
   283:         def handle_info_change(data: dict) -> str:
   284:             logger.info("[action_handler] 處理資料異動申請")
   285:             try:
   286:                 result = subprocess.run([
   287:                     "python", "src/apply_diff.py",
   288:                     "--email", data.get("sender",""),
   289:                     "--content", data.get("body","")
   290:                 ], capture_output=True, text=True, check=True)
   291:                 output = json.loads(result.stdout or "{}")
   292:                 status = output.get("status","")
   293:                 pdf_path = output.get("pdf_path","")
   294:                 if status == "updated" and pdf_path and os.path.exists(pdf_path):
   295:                     send_email_with_attachment(
   296:                         recipient=data.get("sender",""),
   297:                         subject="RE: 資料異動確認",
   298:                         body_html="<p>您好，附件為您的異動紀錄 PDF，已完成處理。</p>",
   299:                         attachment_path=pdf_path
   300:                     )
   301:                     return "已更新欄位 + 已寄出 PDF"
   302:                 elif status == "no_change":
   303:                     return "無異動"
   304:                 else:
   305:                     return "未辨識結果"
   306:             except Exception as e:
   307:                 logger.error("[action_handler] 處理 info_change 失敗：%s", e)
   308:                 raise
   309: 
   310:         def handle_general_inquiry(data: dict) -> str:
   311:             logger.info("[action_handler] 啟動 RAG 回覆流程")
   312:             query = data.get("body","")
   313:             kb_path = "data/knowledge/faq.md"
   314:             answer = generate_rag_reply(query, kb_path)
   315:             html_body = f"<p>您好，根據您的問題，我們提供以下說明：</p><p>{answer}</p><p>若仍有疑問，歡迎回信詢問。</p>"
   316:             send_email_with_attachment(
   317:                 recipient=data.get("sender",""),
   318:                 subject=f"RE: {data.get('subject','')}",
   319:                 body_html=html_body
   320:             )
   321:             return "已使用 RAG 回信"
   322: 
   323:         def handle_complaint(data: dict) -> str:
   324:             logger.info("[action_handler] 處理客訴信件")
   325:             email = data.get("sender") or data.get("email")
   326:             subject = data.get("subject","")
   327:             user = get_user_by_email("data/users.db", email)
   328:             name = user.get("name") if user else "貴賓"
   329:             html = f\"\"\"<p>{name}您好：</p>
   330:             <p>我們已收到您的寶貴意見，對於此次造成的不便，我們深感抱歉。</p>
   331:             <p>我們將轉交專人儘速處理，並努力避免類似情況再次發生。</p>
   332:             <p>若有任何補充需求，歡迎直接回覆此信。</p>
   333:             <p>客服團隊 敬上<br>{datetime.now().strftime('%Y-%m-%d')}</p>\"\"\"
   334:             send_email_with_attachment(recipient=email, subject=f"RE: {subject} - 很抱歉造成您的困擾", body_html=html)
   335:             return "已寄送道歉信"
   336: 
   337:         def handle_quotation(data: dict) -> str:
   338:             logger.info("[action_handler] 處理報價需求")
   339:             subject = data.get("subject",""); content = data.get("body",""); sender = data.get("sender","")
   340:             sel = choose_package(subject, content)
   341:             if sel.get("needs_manual"):
   342:                 send_email_with_attachment(recipient=sender, subject=f"RE: {subject} - 已收到需求",
   343:                                            body_html="<p>您好，已收到您的需求，專人將盡速與您聯繫。</p>")
   344:                 return "待人工處理"
   345:             pdf_path = generate_pdf_quote(sel["package"], sender)
   346:             send_email_with_attachment(recipient=sender, subject=f"RE: {subject} - 報價單",
   347:                                        body_html=f"<p>您好，附件為 <b>{sel['package']}</b> 報價單，若有疑問歡迎回覆。</p>",
   348:                                        attachment_path=pdf_path)
   349:             log_quote(sender, sel["package"], pdf_path, sent_status="success")
   350:             log_lead(sender, sel["package"], pdf_path)
   351:             return f"已寄送 {sel['package']} 報價單"
   352: 
   353:         def handle_unknown(data: dict) -> str:
   354:             logger.info("[action_handler] 未定義行為：%s", data.get("predicted_label"))
   355:             return "未定義行為，已紀錄"
   356: 
   357:         def route_action(label: str, data: dict) -> None:
   358:             subject = data.get("subject",""); body = data.get("body",""); summary = data.get("summary","")
   359:             sender = data.get("sender") or data.get("email") or data.get("recipient")
   360:             confidence = float(data.get("confidence",0)); error = ""; action_result = "none"; start = time.time()
   361:             try:
   362:                 handlers = {
   363:                     "請求技術支援": handle_tech_support,
   364:                     "申請修改資訊": handle_info_change,
   365:                     "詢問流程或規則": handle_general_inquiry,
   366:                     "投訴與抱怨": handle_complaint,
   367:                     "業務接洽或報價": handle_quotation
   368:                 }
   369:                 handler = handlers.get(label, handle_unknown)
   370:                 action_result = handler(data)
   371:             except Exception as e:
   372:                 error = str(e); logger.error("[action_handler] 執行 '%s' 失敗：%s", label, error)
   373:             try:
   374:                 log_to_db(subject=subject, content=body, summary=summary, label=label,
   375:                           confidence=confidence, action=action_result, error=error)
   376:             except Exception as e:
   377:                 logger.warning("[action_handler] log 寫入失敗：%s", e)
   378:             elapsed = round(time.time() - start, 3)
   379:             increment_counter(label, elapsed)
   380:             logger.info("[action_handler] 統計完成：%s (+1)，耗時 %.3fs", label, elapsed)
   381: 
   382:         def main():
   383:             ap = argparse.ArgumentParser(description="根據分類結果觸發對應處理")
   384:             ap.add_argument("--json", required=True, help="分類結果 JSON 檔案路徑")
   385:             args = ap.parse_args()
   386:             with open(args.json, encoding="utf-8") as f:
   387:                 data = json.load(f)
   388:             label = data.get("predicted_label","其他")
   389:             logger.info("[action_handler] 執行分類：%s → %s", args.json, label)
   390:             route_action(label, data)
   391: 
   392:         if __name__ == "__main__":
   393:             main()
   394:     """
   395:     ).lstrip(),
   396:     "src/log_writer.py": dedent(
   397:         """
   398:         #!/usr/bin/env python3
   399:         # 檔案位置：src/log_writer.py
   400:         # 模組用途：寫入郵件處理結果到 emails_log 資料表
   401: 
   402:         import os  # noqa: F401
   403:         import sqlite3
   404:         from datetime import datetime
   405:         from utils.logger import logger
   406: 
   407:         DB_PATH = "data/emails_log.db"
   408:         TABLE = "emails_log"
   409: 
   410:         def ensure_log_table(db_path: str = DB_PATH) -> None:
   411:             try:
   412:                 os.makedirs(os.path.dirname(db_path), exist_ok=True)
   413:                 with sqlite3.connect(db_path) as conn:
   414:                     conn.execute(f\"\"\"
   415:                         CREATE TABLE IF NOT EXISTS {TABLE} (
   416:                             id INTEGER PRIMARY KEY AUTOINCREMENT,
   417:                             subject TEXT,
   418:                             content TEXT,
   419:                             summary TEXT,
   420:                             predicted_label TEXT,
   421:                             confidence REAL,
   422:                             action TEXT,
   423:                             error TEXT,
   424:                             created_at TEXT
   425:                         )
   426:                     \"\"\")
   427:                     conn.commit()
   428:                 logger.debug("[log_writer] emails_log 資料表確認完成")
   429:             except Exception as e:
   430:                 logger.warning("[log_writer] 建表失敗：%s", e)
   431: 
   432:         def log_to_db(subject: str, content: str, label: str, confidence: float,
   433:                       summary: str = "", action: str = "", error: str = "", db_path: str = DB_PATH) -> None:
   434:             try:
   435:                 ensure_log_table(db_path)
   436:                 with sqlite3.connect(db_path) as conn:
   437:                     conn.execute(f\"\"\"
   438:                         INSERT INTO {TABLE} (subject, content, summary, predicted_label,
   439:                                              confidence, action, error, created_at)
   440:                         VALUES (?, ?, ?, ?, ?, ?, ?, ?)
   441:                     \"\"\", (
   442:                         (subject or "").strip(),
   443:                         (content or "").strip(),
   444:                         (summary or "").strip(),
   445:                         (label or "").strip(),
   446:                         float(confidence or 0.0),
   447:                         (action or "").strip(),
   448:                         (error or "").strip(),
   449:                         datetime.utcnow().isoformat()
   450:                     ))
   451:                     conn.commit()
   452:                 logger.info("[log_writer] 已記錄：%s / %s / 信心 %.4f", label, action, confidence)
   453:             except Exception as e:
   454:                 logger.warning("[log_writer] 寫入失敗：%s", e)
   455:     """
   456:     ).lstrip(),
   457:     "src/inference_classifier.py": dedent(
   458:         """
   459:         #!/usr/bin/env python3
   460:         # 檔案位置：src/inference_classifier.py
   461:         # 模組用途：對外統一 classify_intent()；內部委派到 classifier.IntentClassifier
   462: 
   463:         import os  # noqa: F401
   464:         import json
   465:         import argparse
   466:         from utils.logger import logger
   467: 
   468:         DEFAULT_CLASSIFIER_PATH = os.getenv("CLASSIFIER_PATH", "outputs/roberta-zh-checkpoint")
   469: 
   470:         def classify_intent(subject: str, content: str) -> dict:
   471:             try:
   472:                 from classifier import IntentClassifier
   473:                 clf = IntentClassifier(model_path=DEFAULT_CLASSIFIER_PATH)
   474:                 res = clf.classify(subject=subject, content=content)
   475:                 return {"label": res.get("predicted_label","unknown"), "confidence": float(res.get("confidence",0.0))}
   476:             except Exception as e:
   477:                 logger.error("[IntentClassifier] 推論失敗：%s", e)
   478:                 return {"label": "unknown", "confidence": 0.0}
   479: 
   480:         def main():
   481:             ap = argparse.ArgumentParser(description="繁體郵件分類（委派 classifier.IntentClassifier）")
   482:             ap.add_argument("--input", required=True)
   483:             ap.add_argument("--output", required=True)
   484:             args = ap.parse_args()
   485:             data = json.loads(open(args.input, encoding="utf-8").read())
   486:             res = classify_intent((data.get("subject") or "").strip(), (data.get("content") or "").strip())
   487:             data.update({"label": res["label"], "confidence": res["confidence"]})
   488:             os.makedirs(os.path.dirname(args.output), exist_ok=True)
   489:             open(args.output, "w", encoding="utf-8").write(json.dumps(data, ensure_ascii=False, indent=2))
   490:             print("[Output] 分類完成：", args.output)
   491: 
   492:         if __name__ == "__main__":
   493:             main()
   494:     """
   495:     ).lstrip(),
   496:     "src/stats_collector.py": dedent(
   497:         """
   498:         #!/usr/bin/env python3
   499:         # 檔案位置：src/stats_collector.py
   500:         # 模組用途：分類統計收集（對齊測試字串）
   501: 
   502:         import sqlite3
   503:         import argparse
   504:         from pathlib import Path
   505:         from utils.logger import logger
   506: 
   507:         DB_PATH = Path("data/stats.db")
   508: 
   509:         def init_stats_db(db_path: Path = DB_PATH) -> None:
   510:             db_path.parent.mkdir(parents=True, exist_ok=True)
   511:             with sqlite3.connect(str(db_path)) as conn:
   512:                 conn.execute(\"\"\"
   513:                     CREATE TABLE IF NOT EXISTS stats (
   514:                         id INTEGER PRIMARY KEY AUTOINCREMENT,
   515:                         label TEXT,
   516:                         elapsed REAL,
   517:                         created_at TEXT DEFAULT (datetime('now'))
   518:                     )
   519:                 \"\"\")
   520:                 conn.commit()
   521:             print("資料庫初始化完成")
   522:             logger.info("[stats_collector] stats.db 初始化完成：%s", db_path)
   523: 
   524:         def increment_counter(label: str, elapsed: float, db_path: Path = DB_PATH) -> None:
   525:             if not label:
   526:                 raise ValueError("label 不可為空")
   527:             with sqlite3.connect(str(db_path)) as conn:
   528:                 conn.execute("INSERT INTO stats (label, elapsed) VALUES (?, ?)", (label, float(elapsed)))
   529:                 conn.commit()
   530:             print("已新增統計紀錄")
   531:             logger.info("[stats_collector] 新增統計：%s, elapsed=%.3f", label, elapsed)
   532: 
   533:         def _cli():
   534:             p = argparse.ArgumentParser(description="分類統計收集工具")
   535:             p.add_argument("--init", action="store_true")
   536:             p.add_argument("--label", type=str)
   537:             p.add_argument("--elapsed", type=float)
   538:             args = p.parse_args()
   539:             if args.init:
   540:                 init_stats_db(); return
   541:             if args.label is not None and args.elapsed is not None:
   542:                 increment_counter(args.label, args.elapsed); return
   543:             p.print_help()
   544: 
   545:         if __name__ == "__main__":
   546:             _cli()
   547:     """
   548:     ).lstrip(),
   549:     "init_db.py": dedent(
   550:         """
   551:         #!/usr/bin/env python3
   552:         # 檔案位置：init_db.py
   553:         # 模組用途：建立 emails_log / users+diff_log / processed_mails / support_tickets 四個資料庫
   554: 
   555:         import os  # noqa: F401
   556:         import sqlite3
   557:         from pathlib import Path
   558: 
   559:         def _ensure_dir(p: str) -> None:
   560:             Path(os.path.dirname(p) or ".").mkdir(parents=True, exist_ok=True)
   561: 
   562:         def init_emails_log_db(db_path: str = "data/emails_log.db") -> None:
   563:             _ensure_dir(db_path)
   564:             with sqlite3.connect(db_path) as conn:
   565:                 conn.execute(\"\"\"
   566:                     CREATE TABLE IF NOT EXISTS emails_log (
   567:                         id INTEGER PRIMARY KEY AUTOINCREMENT,
   568:                         subject TEXT,
   569:                         content TEXT,
   570:                         summary TEXT,
   571:                         predicted_label TEXT,
   572:                         confidence REAL,
   573:                         action TEXT,
   574:                         error TEXT,
   575:                         created_at TEXT
   576:                     )
   577:                 \"\"\")
   578:                 conn.commit()
   579: 
   580:         def init_users_db(db_path: str = "data/users.db") -> None:
   581:             _ensure_dir(db_path)
   582:             with sqlite3.connect(db_path) as conn:
   583:                 conn.execute("DROP TABLE IF EXISTS users")
   584:                 conn.execute(\"\"\"
   585:                     CREATE TABLE users (
   586:                         email TEXT PRIMARY KEY,
   587:                         name TEXT,
   588:                         phone TEXT,
   589:                         address TEXT
   590:                     )
   591:                 \"\"\")
   592:                 conn.execute(\"\"\"
   593:                     CREATE TABLE IF NOT EXISTS diff_log (
   594:                         id INTEGER PRIMARY KEY AUTOINCREMENT,
   595:                         email TEXT,
   596:                         欄位 TEXT,
   597:                         原值 TEXT,
   598:                         新值 TEXT,
   599:                         created_at TEXT
   600:                     )
   601:                 \"\"\")
   602:                 conn.commit()
   603: 
   604:         def init_processed_mails_db(db_path: str = "data/db/processed_mails.db") -> None:
   605:             _ensure_dir(db_path)
   606:             with sqlite3.connect(db_path) as conn:
   607:                 conn.execute(\"\"\"
   608:                     CREATE TABLE IF NOT EXISTS processed_mails (
   609:                         uid TEXT PRIMARY KEY,
   610:                         subject TEXT,
   611:                         sender TEXT
   612:                     )
   613:                 \"\"\")
   614:                 conn.commit()
   615: 
   616:         def init_tickets_db(db_path: str = "data/tickets.db") -> None:
   617:             _ensure_dir(db_path)
   618:             with sqlite3.connect(db_path) as conn:
   619:                 conn.execute(\"\"\"
   620:                     CREATE TABLE IF NOT EXISTS support_tickets (
   621:                         id INTEGER PRIMARY KEY AUTOINCREMENT,
   622:                         subject TEXT,
   623:                         content TEXT,
   624:                         summary TEXT,
   625:                         sender TEXT,
   626:                         category TEXT,
   627:                         confidence REAL,
   628:                         created_at TEXT,
   629:                         updated_at TEXT,
   630:                         status TEXT,
   631:                         priority TEXT
   632:                     )
   633:                 \"\"\")
   634:                 conn.commit()
   635: 
   636:         if __name__ == "__main__":
   637:             init_emails_log_db()
   638:             init_users_db()
   639:             init_processed_mails_db()
   640:             init_tickets_db()
   641:             print("OK: 初始化完成")
   642:     """
   643:     ).lstrip(),
   644:     # -------------------- 相容層（讓舊測試可 import） --------------------
   645:     "modules/__init__.py": "#!/usr/bin/env python3\n# 檔案位置：modules/__init__.py\n# 模組用途：相容層封裝\n",
   646:     "modules/quotation.py": dedent(
   647:         """
   648:         #!/usr/bin/env python3
   649:         # 檔案位置：modules/quotation.py
   650:         # 模組用途：相容層，轉發至實作
   651: 
   652:         try:
   653:             from quotation import choose_package, generate_pdf_quote
   654:         except Exception:  # pragma: no cover
   655:             from src.quotation import choose_package, generate_pdf_quote
   656:     """
   657:     ).lstrip(),
   658:     "modules/quote_logger.py": dedent(
   659:         """
   660:         #!/usr/bin/env python3
   661:         # 檔案位置：modules/quote_logger.py
   662:         # 模組用途：相容層，轉發至實作
   663: 
   664:         try:
   665:             from quote_logger import ensure_db_exists, log_quote
   666:         except Exception:  # pragma: no cover
   667:             from src.quote_logger import ensure_db_exists, log_quote
   668:     """
   669:     ).lstrip(),
   670:     "modules/sales_notifier.py": dedent(
   671:         """
   672:         #!/usr/bin/env python3
   673:         # 檔案位置：modules/sales_notifier.py
   674:         # 模組用途：相容層，轉發至實作
   675: 
   676:         try:
   677:             from sales_notifier import notify_sales
   678:         except Exception:  # pragma: no cover
   679:             from src.sales_notifier import notify_sales
   680:     """
   681:     ).lstrip(),
   682:     "modules/apply_diff.py": dedent(
   683:         """
   684:         #!/usr/bin/env python3
   685:         # 檔案位置：modules/apply_diff.py
   686:         # 模組用途：相容層，轉發至實作
   687: 
   688:         try:
   689:             from apply_diff import update_user_info
   690:         except Exception:  # pragma: no cover
   691:             from src.apply_diff import update_user_info
   692:     """
   693:     ).lstrip(),
   694:     "spam/__init__.py": "#!/usr/bin/env python3\n# 檔案位置：spam/__init__.py\n# 模組用途：相容層封裝\n",
   695:     "spam/spam_filter_orchestrator.py": dedent(
   696:         """
   697:         #!/usr/bin/env python3
   698:         # 檔案位置：spam/spam_filter_orchestrator.py
   699:         # 模組用途：相容層，轉發至 src.spam
   700: 
   701:         from importlib import import_module as _imp
   702:         _SF = _imp("src.spam.spam_filter_orchestrator")
   703:         SpamFilterOrchestrator = _SF.SpamFilterOrchestrator
   704:     """
   705:     ).lstrip(),
   706:     # -------------------- tools/ 輔助 --------------------
   707:     "tools/__init__.py": "",
   708:     "tools/repo_tidy.py": dedent(
   709:         """
   710:         #!/usr/bin/env python3
   711:         # 檔案位置：tools/repo_tidy.py
   712:         # 模組用途：補 shebang/檔頭、簡易檢查 emails_log 表名
   713: 
   714:         import argparse, re
   715:         from pathlib import Path
   716: 
   717:         ROOT = Path(__file__).resolve().parents[1]
   718:         TARGET_DIRS = ["src", "utils", "scripts", "modules", "spam"]
   719:         HEADER_RE = re.compile(r"^#!/usr/bin/env python3\\n# 檔案位置：.*\\n# 模組用途：.*", re.M)
   720: 
   721:         def list_py():
   722:             files=[]
   723:             for d in TARGET_DIRS:
   724:                 p=ROOT/d
   725:                 if p.exists():
   726:                     files+=list(p.rglob("*.py"))
   727:             return files
   728: 
   729:         def ensure_header(p: Path, dry: bool=False):
   730:             rel = p.relative_to(ROOT).as_posix()
   731:             txt = p.read_text(encoding="utf-8", errors="ignore")
   732:             if HEADER_RE.search(txt): return False
   733:             header=f"#!/usr/bin/env python3\\n# 檔案位置：{rel}\\n# 模組用途：請補充此模組用途說明\\n\\n"
   734:             if not dry: p.write_text(header+txt, encoding="utf-8")
   735:             return True
   736: 
   737:         def main():
   738:             ap=argparse.ArgumentParser()
   739:             ap.add_argument("--check", action="store_true")
   740:             args=ap.parse_args()
   741:             changed=0
   742:             for p in list_py():
   743:                 changed+=1 if ensure_header(p, dry=args.check) else 0
   744:             print(("[檢查]" if args.check else "[修正]")+f" 檔頭處理：{changed} 檔")
   745: 
   746:         if __name__=="__main__":
   747:             main()
   748:     """
   749:     ).lstrip(),
   750:     "tools/project_catalog.py": dedent(
   751:         """
   752:         #!/usr/bin/env python3
   753:         # 檔案位置：tools/project_catalog.py
   754:         # 模組用途：掃描專案並產生 PROJECT_STATUS.md
   755: 
   756:         import re, sys
   757:         from pathlib import Path
   758:         from collections import defaultdict
   759: 
   760:         ROOT = Path(__file__).resolve().parents[1]
   761:         OUT = ROOT / "PROJECT_STATUS.md"
   762: 
   763:         ENTRY = re.compile(r'if\\s+__name__\\s*==\\s*[\\'"]__main__[\\'"]')
   764:         ARG = re.compile(r"argparse\\.ArgumentParser")
   765:         DDL = re.compile(r"CREATE TABLE IF NOT EXISTS\\s+([a-zA-Z_][a-zA-Z0-9_]*)", re.I)
   766: 
   767:         def list_py():
   768:             return [p for p in ROOT.rglob("*.py") if ".venv" not in str(p)]
   769: 
   770:         def main():
   771:             files = list_py()
   772:             entries=[str(p.relative_to(ROOT)) for p in files if ENTRY.search(p.read_text(encoding="utf-8", errors="ignore"))]
   773:             clis=[str(p.relative_to(ROOT)) for p in files if ARG.search(p.read_text(encoding="utf-8", errors="ignore"))]
   774:             tables=defaultdict(set)
   775:             for p in files:
   776:                 for m in DDL.finditer(p.read_text(encoding="utf-8", errors="ignore")):
   777:                     tables[m.group(1)].add(str(p.relative_to(ROOT)))
   778:             md=[]
   779:             md.append("# PROJECT STATUS\\n")
   780:             md.append("## Entries\\n"); md+= [f"- {e}" for e in sorted(entries)]
   781:             md.append("\\n## CLI-capable modules\\n"); md+= [f"- {e}" for e in sorted(clis)]
   782:             md.append("\\n## Detected DB tables\\n")
   783:             for t, locs in sorted({k:sorted(v) for k,v in tables.items()}.items()):
   784:                 md.append(f"- **{t}**: {', '.join(locs)}")
   785:             OUT.write_text("\\n".join(md)+"\\n", encoding="utf-8")
   786:             print(f"Wrote {OUT}")
   787: 
   788:         if __name__=="__main__":
   789:             sys.exit(main())
   790:     """
   791:     ).lstrip(),
   792:     # -------------------- scripts/ 工具 --------------------
   793:     "scripts/__init__.py": "",
   794:     "scripts/check_email_log.py": dedent(
   795:         """
   796:         #!/usr/bin/env python3
   797:         # 檔案位置：scripts/check_email_log.py
   798:         # 模組用途：檢查 emails_log.db 最新紀錄與統計
   799: 
   800:         import sqlite3
   801:         from tabulate import tabulate
   802:         from pathlib import Path
   803: 
   804:         DB_PATH = "data/emails_log.db"
   805:         TABLE = "emails_log"
   806: 
   807:         def fetch_latest(limit=20):
   808:             if not Path(DB_PATH).exists():
   809:                 print(f"[錯誤] 找不到 DB：{DB_PATH}"); return []
   810:             try:
   811:                 conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
   812:                 cur.execute(f"SELECT id, subject, predicted_label, action, error, created_at FROM {TABLE} ORDER BY id DESC LIMIT ?", (limit,))
   813:                 rows = cur.fetchall(); conn.close(); return rows
   814:             except Exception as e:
   815:                 print("[錯誤] 查詢失敗：", e); return []
   816: 
   817:         def show_stats():
   818:             if not Path(DB_PATH).exists(): print("[錯誤] DB 不存在"); return
   819:             try:
   820:                 conn = sqlite3.connect(DB_PATH); cur = conn.cursor()
   821:                 cur.execute(f"SELECT COUNT(*) FROM {TABLE}"); total = cur.fetchone()[0]
   822:                 cur.execute(f"SELECT COUNT(*) FROM {TABLE} WHERE LOWER(predicted_label)='spam'"); spam = cur.fetchone()[0]
   823:                 cur.execute(f"SELECT COUNT(*) FROM {TABLE} WHERE error IS NOT NULL AND error!=''"); errors = cur.fetchone()[0]
   824:                 print("信件處理統計報告"); print(f"- 總筆數：{total}"); print(f"- 被過濾為 Spam：{spam}"); print(f"- 發生錯誤：{errors}")
   825:                 conn.close()
   826:             except Exception as e:
   827:                 print("[錯誤] 統計失敗：", e)
   828: 
   829:         def main():
   830:             rows = fetch_latest()
   831:             if not rows:
   832:                 print("目前沒有資料，請先跑主流程或寫入測試資料。"); return
   833:             print(tabulate(rows, headers=["ID","Subject","Label","Action","Error","Created At"], tablefmt="grid"))
   834:             print(); show_stats()
   835: 
   836:         if __name__ == "__main__":
   837:             main()
   838:     """
   839:     ).lstrip(),
   840: }
   841: 
   842: 
   843: def write_file(path: Path, content: str, force: bool = False):
   844:     path.parent.mkdir(parents=True, exist_ok=True)
   845:     if path.exists() and not force:
   846:         print(f"[skip] {path} 已存在（未覆蓋）")
   847:         return
   848:     path.write_text(content, encoding="utf-8")
   849:     print(f"[ok]   寫入 {path}")
   850: 
   851: 
   852: def main():
   853:     ap = argparse.ArgumentParser(description="一鍵建立/更新 Smart-Mail-Agent 專案檔案")
   854:     ap.add_argument("--force", action="store_true", help="強制覆蓋已存在檔案")
   855:     args = ap.parse_args()
   856: 
   857:     for rel, content in FILES.items():
   858:         write_file(ROOT / rel, content, force=args.force)
   859: 
   860:     # 放置 keep 檔以便版控資料夾
   861:     for d in ["data", "logs", "assets/fonts", "src/spam", "src/utils", "tests"]:
   862:         p = ROOT / d
   863:         p.mkdir(parents=True, exist_ok=True)
   864:         keep = p / ".keep"
   865:         if not keep.exists():
   866:             keep.write_text("", encoding="utf-8")
   867: 
   868:     print("\\n完成。下一步建議：")
   869:     print("1) python -m venv .venv && . .venv/bin/activate")
   870:     print("2) pip install -U pip -r requirements.txt")
   871:     print("3) cp .env.example .env  # 填入 SMTP 等")
   872:     print("4) python init_db.py")
   873:     print("5) make all")
   874:     print("6) PYTHONPATH=src python scripts/check_email_log.py")
   875: 
   876: 
   877: if __name__ == "__main__":
   878:     main()
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/bootstrap_project.py
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/CHANGELOG.md  (349 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Changelog
     2: ## [v0.3.1] - 2025-08-14
     3: - 清整與套件化：pyproject、flake8、black、isort、pytest
     4: - CI：.github/workflows/ci.yaml（lint + tests + demo artifacts）
     5: - 測試：tests/e2e/test_runner.py（驗證 smarun 與 logged_path）
     6: - 工具：tools/show_summary.sh（摘要 out_*.json）
     7: - 字型：src/utils/font_check.py、.env.example
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/CHANGELOG.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/CODE_OF_CONDUCT.md  (136 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Code of Conduct
     2: 以善意、尊重為原則。請避免人身攻擊與歧視性言論。維護者保有處置違規行為之權利。
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/CODE_OF_CONDUCT.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/CONTRIBUTING.md  (292 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Contributing
     2: - 建議使用 Python 3.10，啟動虛擬環境後：`pip install -e ".[dev]"`.
     3: - 送 PR 前：`ruff check . && ruff format --check . && PYTHONPATH=. pytest -q tests -k "not online"`.
     4: - PR 請描述改動、風險、測試方式；如涉及資料/私密設定請提供 mock。
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/CONTRIBUTING.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/Dockerfile  (324 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: FROM python:3.11-slim
     2: ENV PIP_DISABLE_PIP_VERSION_CHECK=1 PYTHONUNBUFFERED=1 TZ=Asia/Taipei
     3: WORKDIR /app
     4: COPY . /app
     5: RUN python -m pip install -U pip && \
     6:     if [ -f requirements.txt ]; then python -m pip install -e . -r requirements.txt; else python -m pip install -e .; fi
     7: CMD ["python","-m","smart_mail_agent","--help"]
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/Dockerfile
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/docs/architecture.md  (374 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Architecture
     2: 
     3: 
     4: smart_mail_agent/
     5: actions/ # 動作處理（sales, complaint, ...)
     6: spam/ # 垃圾郵件管線（rule + ml + llm）
     7: cli/ # CLI 入口（sma / sma-run / sma-spamcheck）
     8: utils/ # 共用工具（logger, pdf, env, ...)
     9: 
    10: - 舊路徑 `src/spam/*` 有 compat shim → 轉發到 `smart_mail_agent.spam.*`
    11: - 測試仍支援 `src.*` 引用（`PYTHONPATH=.` + shim）
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/docs/architecture.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/docs/cli.md  (137 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # CLI
     2: 
     3: - `sma`：主控台
     4: - `sma-run`：執行一次處理流程
     5: - `sma-spamcheck`：離線 spam 檢測 demo
     6: 
     7: 加 `--help` 看參數。
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/docs/cli.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/docs/index.md  (339 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Smart Mail Agent
     2: 
     3: 你的開源作品集：**AI + RPA 郵件智能處理**。
     4: 
     5: 重點：
     6: - 套件化 + `sma / sma-run / sma-spamcheck` 三個 CLI
     7: - Spam 管線（rules + ML + LLM）
     8: - 測試、CI、Docs 都齊
     9: 
    10: 原始碼主路徑：`src/smart_mail_agent/*`
    11: 舊路徑 `src/spam/*` 已有**相容層**轉發到 `smart_mail_agent.spam.*`。
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/docs/index.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/docs/usage.md  (206 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Quickstart
     2: 
     3: ```bash
     4: python -m pip install -U pip
     5: python -m pip install -e ".[dev]"
     6: 
     7: # CLI
     8: sma --help
     9: sma-run --help
    10: sma-spamcheck --help
    11: 
    12: # 測試（離線）
    13: PYTHONPATH=. pytest -q tests -k "not online"
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/docs/usage.md
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/Makefile  (229 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .PHONY: unit e2e all
     2: unit:
     3: \t. .venv/bin/activate && pytest -q
     4: e2e:
     5: \t. .venv/bin/activate && pytest tests/e2e -m online -q
     6: all:
     7: \t. .venv/bin/activate && pytest tests/unit tests/contracts -q && \
     8: \tpytest tests/e2e -m online -q
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/Makefile
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/mkdocs.yml  (373 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: site_name: Smart Mail Agent
     2: site_description: AI + RPA smart mail processing (Open Source Portfolio)
     3: repo_url: https://github.com/YOU-JIE-hub/smart-mail-agent
     4: theme:
     5:   name: material
     6:   features:
     7:     - navigation.instant
     8:     - navigation.sections
     9:     - content.code.copy
    10: nav:
    11:   - Overview: index.md
    12:   - Quickstart: usage.md
    13:   - Architecture: architecture.md
    14:   - CLI: cli.md
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/mkdocs.yml
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/pytest.ini  (528 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [pytest]
     2: pythonpath = .
     3: testpaths = tests/unit tests/contracts
     4: markers =
     5:     online: tests that require network or heavyweight environment bootstrap
     6:     mailer_online: requires external mail services
     7: addopts = --timeout=60 --timeout-method=thread -q
     8: 
     9: # portfolio polish: silence known third-party deprecations (keeps test signal clean)
    10: filterwarnings =
    11:     ignore:Support for class-based `config` is deprecated:DeprecationWarning:pydantic
    12:     ignore:The `dict` method is deprecated; use `model_dump`:DeprecationWarning:pydantic
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/pytest.ini
================================================================================
================================================================================
BEGIN FILE  .portfolio_hidden/SECURITY.md  (133 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # Security Policy
     2: 若發現安全性議題，請以私人管道聯絡維護者，勿公開揭露；我們會盡速修補並公告。
--------------------------------------------------------------------------------
END FILE    .portfolio_hidden/SECURITY.md
================================================================================
================================================================================
BEGIN FILE  .pre-commit-config.yaml  (270 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: repos:
     2:   - repo: https://github.com/psf/black
     3:     rev: 24.3.0
     4:     hooks: [{ id: black }]
     5:   - repo: https://github.com/pycqa/isort
     6:     rev: 5.13.2
     7:     hooks: [{ id: isort }]
     8:   - repo: https://github.com/astral-sh/ruff-pre-commit
     9:     rev: v0.5.7
    10:     hooks: [{ id: ruff }]
--------------------------------------------------------------------------------
END FILE    .pre-commit-config.yaml
================================================================================
================================================================================
BEGIN FILE  .ruff.toml  (494 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: line-length = 120
     2: target-version = "py310"
     3: 
     4: [lint]
     5: select = ["E","F","I","UP"]
     6: ignore = ["E501"]  # 先不擋行寬
     7: exclude = [
     8:   ".venv/**",
     9:   ".archive/**",
    10:   ".portfolio_hidden/**",
    11:   "audit_bundle*/**",
    12:   "reports/**",
    13:   "src_lowcov/**",
    14:   "tests/**",
    15:   "src/torch/**",
    16:   "src/transformers/**",
    17:   "tools/**",
    18:   "src/smart_mail_agent/**",  # ← 新增，避免 internal 樹影響 lint 綠燈
    19: ]
    20: 
    21: [lint.per-file-ignores]
    22: "src/modules/__init__.py" = ["F403"]
    23: "src/spam/__init__.py" = ["F403"]
--------------------------------------------------------------------------------
END FILE    .ruff.toml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/.github/workflows/tests.yml  (723 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: name: tests (main, showcase & hardening)
     2: on:
     3:   push:
     4:     branches:
     5:       - "main"
     6:       - "showcase/portfolio-clean-*"
     7:       - "hardening/*"
     8:   pull_request:
     9:     branches: ["main"]
    10: jobs:
    11:   test:
    12:     runs-on: ubuntu-22.04
    13:     steps:
    14:       - uses: actions/checkout@v4
    15:       - uses: actions/setup-python@v5
    16:         with: { python-version: "3.10" }
    17:       - name: Install (editable)
    18:         run: |
    19:           python -m pip install -U pip
    20:           pip install -e . || pip install -r requirements.txt
    21:       - name: Offline tests
    22:         env:
    23:           OFFLINE: "1"
    24:           PYTHONPATH: ".:src"
    25:           PRE_COMMIT_ALLOW_NO_CONFIG: "1"
    26:         run: |
    27:           pytest -q tests -k "not online" --timeout=60 --timeout-method=thread
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/.github/workflows/tests.yml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/config/.gitignore  (206 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # venv / caches
     2: .venv/
     3: __pycache__/
     4: *.pyc
     5: .pytest_cache/
     6: # build artifacts
     7: build/
     8: dist/
     9: *.egg-info/
    10: # editor
    11: *.swp
    12: .DS_Store
    13: # data outputs (保留版本但可視需要忽略)
    14: data/output/
    15: # local env
    16: .env
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/config/.gitignore
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/config/.pre-commit-config.yaml  (152 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: repos:
     2:   - repo: https://github.com/astral-sh/ruff-pre-commit
     3:     rev: v0.6.2
     4:     hooks:
     5:       - id: ruff
     6:         args: [--fix]
     7:       - id: ruff-format
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/config/.pre-commit-config.yaml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/config/pyproject.toml  (1181 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [build-system]
     2: requires = ["setuptools>=69", "wheel"]
     3: build-backend = "setuptools.build_meta"
     4: 
     5: [project]
     6: name = "smart-mail-agent"
     7: version = "0.4.6"
     8: description = "AI + RPA smart mail processing with CLI entrypoints and packaging"
     9: readme = "README.md"
    10: requires-python = ">=3.10"
    11: license = "MIT"
    12: authors = [{name="YOU-JIE"}]
    13: dependencies = [  "pydantic>=1.10,<3"
    14: ]
    15: 
    16: [project.urls]
    17: Homepage = "https://github.com/YOU-JIE-hub/smart-mail-agent"
    18: 
    19: [tool.setuptools]
    20: package-dir = {"" = "src"}
    21: include-package-data = true
    22: 
    23: [tool.setuptools.packages.find]
    24: where = ["src"]
    25: include = ["smart_mail_agent*"]
    26: 
    27: [tool.black]
    28: line-length = 200
    29: target-version = ["py310"]
    30: 
    31: [tool.ruff]
    32: line-length = 200
    33: target-version = "py310"
    34: 
    35: [tool.ruff.lint]
    36: select = ["E","F","I","B","UP","ISC","C90"]
    37: ignore = ["E402","E501","C901","B007","UP038","F401","F403","ISC001","B034"]
    38: [project.optional-dependencies]
    39: dev = [
    40:   "pytest>=7",
    41:   "pytest-cov>=4",
    42:   "pytest-timeout>=2.3",
    43:   "ruff>=0.5",
    44:   "pre-commit>=3.5",
    45:   "mkdocs>=1.6",
    46:   "mkdocs-material>=9.5"
    47: ]
    48: 
    49: [project.scripts]
    50: sma = "smart_mail_agent.__main__:main"
    51: sma-run = "src.run_action_handler:main"
    52: sma-spamcheck = "smart_mail_agent.cli_spamcheck:main"
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/config/pyproject.toml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/config/README.md  (1388 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [![tests](https://github.com/YOU-JIE-hub/smart-mail-agent/actions/workflows/tests.yml/badge.svg?branch=main)](https://github.com/YOU-JIE-hub/smart-mail-agent/actions/workflows/tests.yml) [![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
     2: 
     3: # Smart Mail Agent
     4: 
     5: 最小可演示的郵件自動化專案（離線可驗證）。已整理結構、提供 CLI 與離線測試，適合面試展示。
     6: 
     7: ## 結構
     8: - `src/smart_mail_agent/`：核心與功能模組（routing / features / observability / spam）
     9: - `src/`：向後相容 shims
    10: - `tests/`：單元與離線測試
    11: - `.github/workflows/tests.yml`：CI（main / showcase / hardening）
    12: 
    13: ## 安裝與測試（離線）
    14: 1. 建立虛擬環境並安裝：
    15:    - `python -m venv .venv && . .venv/bin/activate`
    16:    - `python -m pip install -U pip`
    17:    - `pip install -e . || pip install -r requirements.txt`
    18: 2. 執行離線測試：
    19:    - `OFFLINE=1 PYTHONPATH=".:src" pytest -q tests -k "not online" --timeout=60 --timeout-method=thread`
    20: 
    21: ## CLI
    22: - 初始化統計資料庫（stdout: 資料庫初始化完成）  
    23:   `python src/stats_collector.py --init`
    24: - 新增統計（stdout: 已新增統計紀錄）  
    25:   `python src/stats_collector.py --label 投訴 --elapsed 0.56`
    26: 
    27: ## PDF 中文字型
    28: - 將 `NotoSansTC-Regular.ttf` 放在 `assets/fonts/`  
    29: - 或在 `.env` 設：`FONT_TTC_PATH=assets/fonts/NotoSansTC-Regular.ttf`
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/config/README.md
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/reports/tests-collect-20250816-125637.txt  (8674 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: tests/e2e/test_actions_matrix_ext.py::test_happy_paths
     2: tests/e2e/test_actions_matrix_ext.py::test_edge_cases
     3: tests/e2e/test_cli_flags.py::test_dry_run_flag
     4: tests/e2e/test_cli_flags.py::test_simulate_pdf_failure
     5: tests/e2e/test_cli_scripts.py::test_cli_run_main_help
     6: tests/e2e/test_cli_scripts.py::test_cli_run_classifier_help
     7: tests/e2e/test_cli_scripts.py::test_cli_run_orchestrator_help
     8: tests/e2e/test_complaint_policy.py::test_complaint_high_triggers_p1_and_cc
     9: tests/e2e/test_label_routing_offline.py::test_label_send_quote
    10: tests/e2e/test_label_routing_offline.py::test_label_reply_faq
    11: tests/e2e/test_label_routing_offline.py::test_label_other_to_reply_general
    12: tests/e2e/test_new_intents.py::test_sales_inquiry
    13: tests/e2e/test_new_intents.py::test_complaint
    14: tests/e2e/test_offline_suite.py::test_generate_quote_pdf
    15: tests/e2e/test_offline_suite.py::test_cli_smoke
    16: tests/e2e/test_policy_expansion.py::test_attachments_over_limit_requires_review
    17: tests/e2e/test_policy_expansion.py::test_sender_domain_whitelist_flag
    18: tests/e2e/test_runner.py::test_runner_outputs
    19: tests/e2e/test_sales_and_complaint.py::test_e2e_sales_inquiry
    20: tests/e2e/test_sales_and_complaint.py::test_e2e_complaint_high
    21: tests/e2e/test_sales_inquiry_needs_summary.py::test_sales_inquiry_generates_md_and_next_step
    22: tests/e2e/test_send_quote_degrade.py::test_send_quote_degrade
    23: tests/test_action_handler.py::test_support
    24: tests/test_action_handler.py::test_info_change
    25: tests/test_action_handler.py::test_faq
    26: tests/test_action_handler.py::test_apology
    27: tests/test_action_handler.py::test_quote_with_attachment
    28: tests/test_action_handler.py::test_other_fallback
    29: tests/test_action_handler.py::test_unknown_label_as_general
    30: tests/test_apply_diff.py::test_update_with_changes
    31: tests/test_apply_diff.py::test_update_with_no_change
    32: tests/test_apply_diff.py::test_update_partial_change
    33: tests/test_apply_diff.py::test_empty_content
    34: tests/test_apply_diff.py::test_user_not_found
    35: tests/test_classifier.py::test_classifier_inference_with_high_confidence
    36: tests/test_classifier.py::test_classifier_inference_with_low_confidence_trigger_fallback
    37: tests/test_classifier.py::test_output_file_format
    38: tests/test_init_db.py::test_users_table_schema
    39: tests/test_init_db.py::test_diff_log_table_schema
    40: tests/test_init_db.py::test_repeat_init_users_db_does_not_fail
    41: tests/test_init_emails_log_db.py::test_emails_log_table_created
    42: tests/test_init_emails_log_db.py::test_repeat_init_emails_log_db_does_not_fail
    43: tests/test_init_processed_mails_db.py::test_processed_mails_table_created
    44: tests/test_init_processed_mails_db.py::test_repeat_init_processed_mails_db_does_not_fail
    45: tests/test_init_tickets_db.py::test_support_tickets_table_created
    46: tests/test_init_tickets_db.py::test_repeat_init_tickets_db_does_not_fail
    47: tests/test_mailer.py::test_validate_smtp_config_missing_env
    48: tests/test_mailer.py::test_send_email_with_attachment_success
    49: tests/test_mailer.py::test_send_email_attachment_not_found
    50: tests/test_mailer_online.py::test_smtp_live_send_ok
    51: tests/test_quotation.py::test_choose_package[\u5831\u50f9\u9700\u6c42-\u6211\u60f3\u77e5\u9053\u5831\u50f9\u3001\u50f9\u683c\u8cc7\u8a0a-\u57fa\u790e]
    52: tests/test_quotation.py::test_choose_package[\u81ea\u52d5\u5206\u985e\u529f\u80fd-\u662f\u5426\u652f\u63f4\u81ea\u52d5\u5316\u8207\u6392\u7a0b\uff1f-\u5c08\u696d]
    53: tests/test_quotation.py::test_choose_package[\u6574\u5408 API-\u60f3\u8207 ERP \u6216 LINE \u6574\u5408-\u4f01\u696d]
    54: tests/test_quotation.py::test_choose_package[\u5176\u4ed6\u8a62\u554f-\u4f60\u5011\u80fd\u63d0\u4f9b\u4ec0\u9ebc\u529f\u80fd\uff1f-\u4f01\u696d]
    55: tests/test_quotation.py::test_generate_pdf_quote
    56: tests/test_quote_logger.py::test_log_quote_to_db
    57: tests/test_sales_notifier.py::test_notify_sales_success[test_client-\u57fa\u790e]
    58: tests/test_sales_notifier.py::test_notify_sales_success[test_corp-\u4f01\u696d]
    59: tests/test_send_with_attachment.py::test_send_with_attachment_cli_success
    60: tests/test_spam_filter.py::test_spam_filter_logic[email_json0-False]
    61: tests/test_spam_filter.py::test_spam_filter_logic[email_json1-False]
    62: tests/test_spam_filter.py::test_spam_filter_logic[email_json2-False]
    63: tests/test_spam_filter.py::test_spam_filter_logic[email_json3-False]
    64: tests/test_spam_filter.py::test_spam_filter_logic[email_json4-False]
    65: tests/test_spam_filter.py::test_spam_filter_logic[email_json5-False]
    66: tests/test_spam_filter.py::test_spam_filter_logic[email_json6-False]
    67: tests/test_spam_filter.py::test_spam_filter_logic[email_json7-True]
    68: tests/test_spam_filter.py::test_spam_filter_logic[email_json8-True]
    69: tests/test_stats_collector.py::test_init_stats_db
    70: tests/test_stats_collector.py::test_increment_counter
    71: tests/test_stats_collector.py::test_cli_init_and_insert
    72: tests/unit/test_policy_minimal.py::test_policy_require_review_on_low_conf
    73: tests/unit/test_spam_stack.py::test_spam_stack_allow_and_block
    74: tests/unit/test_tasks_minimal.py::test_tasks_minimal_contract
    75: 
    76: ==================================== ERRORS ====================================
    77: _______ ERROR collecting tests/contracts/test_action_result_contracts.py _______
    78: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/contracts/test_action_result_contracts.py'.
    79: Hint: make sure your test modules/packages have valid Python names.
    80: Traceback:
    81: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
    82:     return _bootstrap._gcd_import(name[level:], package, level)
    83: tests/contracts/test_action_result_contracts.py:6: in <module>
    84:     from src.sma_types import ActionResult, AttachmentMeta
    85: E   ModuleNotFoundError: No module named 'src'
    86: _______________ ERROR collecting tests/e2e/test_spam_pipeline.py _______________
    87: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/e2e/test_spam_pipeline.py'.
    88: Hint: make sure your test modules/packages have valid Python names.
    89: Traceback:
    90: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
    91:     return _bootstrap._gcd_import(name[level:], package, level)
    92: tests/e2e/test_spam_pipeline.py:3: in <module>
    93:     from src.spam.pipeline import analyze
    94: E   ModuleNotFoundError: No module named 'src'
    95: ________________ ERROR collecting tests/unit/test_contracts.py _________________
    96: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/unit/test_contracts.py'.
    97: Hint: make sure your test modules/packages have valid Python names.
    98: Traceback:
    99: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
   100:     return _bootstrap._gcd_import(name[level:], package, level)
   101: tests/unit/test_contracts.py:4: in <module>
   102:     from src.sma_types import normalize_request, normalize_result
   103: E   ModuleNotFoundError: No module named 'src'
   104: ______________ ERROR collecting tests/unit/test_policy_engine.py _______________
   105: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/unit/test_policy_engine.py'.
   106: Hint: make sure your test modules/packages have valid Python names.
   107: Traceback:
   108: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
   109:     return _bootstrap._gcd_import(name[level:], package, level)
   110: tests/unit/test_policy_engine.py:4: in <module>
   111:     from src.policy_engine import apply_policies, apply_policy
   112: E   ModuleNotFoundError: No module named 'src'
   113: =============================== warnings summary ===============================
   114: tests/conftest.py:25
   115:   /home/youjie/smart-mail-agent/tests/conftest.py:25: PytestRemovedIn9Warning: The (path: py.path.local) argument is deprecated, please use (collection_path: pathlib.Path)
   116:   see https://docs.pytest.org/en/latest/deprecations.html#py-path-local-arguments-for-hooks-replaced-with-pathlib-path
   117:     def pytest_ignore_collect(path, config):
   118: 
   119: tests/test_mailer_online.py:13
   120:   /home/youjie/smart-mail-agent/tests/test_mailer_online.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.online - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
   121:     pytestmark = pytest.mark.online
   122: 
   123: tests/e2e/conftest.py:12
   124:   /home/youjie/smart-mail-agent/tests/e2e/conftest.py:12: PytestUnknownMarkWarning: Unknown pytest.mark.online - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
   125:     item.add_marker(pytest.mark.online)
   126: 
   127: -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
   128: =========================== short test summary info ============================
   129: ERROR tests/contracts/test_action_result_contracts.py
   130: ERROR tests/e2e/test_spam_pipeline.py
   131: ERROR tests/unit/test_contracts.py
   132: ERROR tests/unit/test_policy_engine.py
   133: !!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!
   134: 74 tests collected, 4 errors in 5.73s
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/reports/tests-collect-20250816-125637.txt
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-125935/reports/tree-20250816-125637.txt  (11938 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .
     2:   .env
     3:   .env.example
     4:   .pre-commit-config.yaml
     5:   LICENSE
     6:   README.md
     7:   pyproject.toml
     8:   .portfolio_hidden/
     9:     .dockerignore
    10:     .editorconfig
    11:     .env.example
    12:     .envrc
    13:     .flake8
    14:     .pre-commit-config.yaml
    15:     .pre-commit-config.yaml.bak.before-black-removal
    16:     CHANGELOG.md
    17:     CODE_OF_CONDUCT.md
    18:     CONTRIBUTING.md
    19:     Dockerfile
    20:     MANIFEST.in
    21:     Makefile
    22:     SECURITY.md
    23:     bootstrap_project.py
    24:     mkdocs.yml
    25:     pyproject.toml.bak.pre-fix-20250816-003526
    26:     pytest.ini
    27:     .dev/
    28:       __init__.py
    29:       apply_classifier_fallback_fix_v1.py
    30:       apply_docker_ci_v1.py
    31:       apply_fix_log_writer_v1.py
    32:       apply_fix_round9.py
    33:       apply_imap_debug_v2.py
    34:       apply_mailer_online_tests_v1.py
    35:       bootstrap_gh_ci.sh
    36:       check_env.py
    37:       ci.mk
    38:       cleanup_repo.py
    39:       db_migrate_emails_log.py
    40:       dedup_cleanup.sh
    41:       dedupe_requirements.py
    42:       dev_runner.py
    43:       finalize_and_push.sh
    44:       fix_from_pretrained_order.py
    45:       fix_from_pretrained_order_v2.py
    46:       fix_from_pretrained_order_v3.py
    47:       generate_offline_report.py
    48:       generate_spam_report.py
    49:       gh_device_login.sh
    50:       git_setup_and_tag.py
    51:       imap_pass_sanitize.py
    52:       make_share_bundle.sh
    53:       metrics_daily.py
    54:       offline_verify.py
    55:       one_paste_ship.py
    56:       one_shot_patch_and_run.sh
    57:       project_catalog.py
    58:       push_secrets_from_env.sh
    59:       repo_tidy.py
    60:       run_actions_matrix.py
    61:       run_spam_demo.py
    62:       set_imap_pass.py
    63:       set_smtp_pass.py
    64:       show_summary.sh
    65:       verify_pdf_degrade.py
    66:     docs/
    67:       architecture.md
    68:       cli.md
    69:       index.md
    70:       usage.md
    71:     assets/
    72:       fonts/
    73:         .keep
    74:         README.txt
    75:     .github/
    76:       workflows/
    77:         ci.yml
    78:         coverage.yml
    79:         docs.yml
    80:         release.yml
    81:     templates/
    82:       complaint_high.j2
    83:       complaint_low.j2
    84:       complaint_med.j2
    85:       needs_summary.md.j2
    86:       sales_inquiry_reply.j2
    87:     .archive/
    88:   scripts/
    89:     run_pipeline.sh
    90:     setup_env.sh
    91:     bin/
    92:       smarun
    93:   spam/
    94:   reports/
    95:     tree-20250816-124354.txt
    96:     tree-20250816-124547.txt
    97:     tree-20250816-125335.txt
    98:   .backup/
    99:     20250815-003726/
   100:     20250815-002819/
   101:     20250814-234536/
   102:       configs.tgz
   103:       utils.tgz
   104:   assets/
   105:     badges/
   106:     fonts/
   107:   src/
   108:     __init__.py
   109:     action_handler.py
   110:     classifier.py
   111:     email_processor.py
   112:     inference_classifier.py
   113:     init_db.py
   114:     log_writer.py
   115:     policy_engine.py
   116:     requirements.txt
   117:     run_action_handler.py
   118:     send_with_attachment.py
   119:     sitecustomize.py
   120:     sma_types.py
   121:     stats_collector.py
   122:     support_ticket.py
   123:     train_classifier.py
   124:     spam/
   125:       __init__.py
   126:       feature_extractor.py
   127:       ml_spam_classifier.py
   128:       pipeline.py
   129:       rule_filter.py
   130:       rules.py
   131:       spam_filter_orchestrator.py
   132:     smart_mail_agent/
   133:       __init__.py
   134:       __main__.py
   135:       __version__.py
   136:       cli_spamcheck.py
   137:       policy_engine.py
   138:       sma_types.py
   139:       spam/
   140:         .keep
   141:         __init__.py
   142:         feature_extractor.py
   143:         ml_spam_classifier.py
   144:         pipeline.py
   145:         rule_filter.py
   146:         rules.py
   147:         spam_filter_orchestrator.py
   148:         spam_llm_filter.py
   149:       cli/
   150:         sma.py
   151:         sma_run.py
   152:         sma_spamcheck.py
   153:       actions/
   154:         __init__.py
   155:         complaint.py
   156:         sales_inquiry.py
   157:       utils/
   158:         __init__.py
   159:         config.py
   160:         db_tools.py
   161:         env.py
   162:         errors.py
   163:         font_check.py
   164:         fonts.py
   165:         imap_folder_detector.py
   166:         imap_login.py
   167:         jsonlog.py
   168:         log_writer.py
   169:         logger.py
   170:         logging_setup.py
   171:         mailer.py
   172:         pdf_generator.py
   173:         pdf_safe.py
   174:         priority_evaluator.py
   175:         rag_reply.py
   176:         templater.py
   177:         tracing.py
   178:         validators.py
   179:     actions/
   180:       __init__.py
   181:     utils/
   182:       .keep
   183:       __init__.py
   184:       jsonlog.py
   185:       logger.py
   186:       mailer.py
   187:     modules/
   188:       __init__.py
   189:       apply_diff.py
   190:       leads_logger.py
   191:       quotation.py
   192:       quote_logger.py
   193:       sales_notifier.py
   194:     smart_mail_agent.egg-info/
   195:       PKG-INFO
   196:       SOURCES.txt
   197:       dependency_links.txt
   198:       entry_points.txt
   199:       requires.txt
   200:       top_level.txt
   201:     observability/
   202:       tracing.py
   203:     trainers/
   204:       train_bert_spam_classifier.py
   205:     patches/
   206:       __init__.py
   207:       handle_router_patch.py
   208:       handle_safe_patch.py
   209:   configs/
   210:     default.yml
   211:     samples/
   212:       policy.yaml
   213:       spam_rules.yaml
   214:   dist/
   215:     smart_mail_agent-0.3.1-py3-none-any.whl
   216:     smart_mail_agent-0.3.1.tar.gz
   217:     smart_mail_agent-0.4.0-py3-none-any.whl
   218:     smart_mail_agent-0.4.0.tar.gz
   219:     smart_mail_agent-0.4.1-py3-none-any.whl
   220:     smart_mail_agent-0.4.1.tar.gz
   221:   .github/
   222:     PULL_REQUEST_TEMPLATE.md
   223:     dependabot.yml
   224:     workflows-archive/
   225:       ci-offline.yml
   226:       ci.yaml
   227:       docker-ghcr.yml
   228:       interview-addon.yml
   229:       interview.yml
   230:       nightly.yml
   231:       offline-ci.yml
   232:       release.yml
   233:       security.yml
   234:     workflows/
   235:       tests.yml
   236:     ISSUE_TEMPLATE/
   237:       bug_report.md
   238:   tools/
   239:     run_actions_matrix.py
   240:   data/
   241:     output/
   242:       attachment_20250814_122932.pdf
   243:       attachment_20250814_122945.pdf
   244:       attachment_20250814_122945.txt
   245:       attachment_20250814_123118.pdf
   246:       attachment_20250814_123131.pdf
   247:       attachment_20250814_123131.txt
   248:       attachment_20250814_123612.pdf
   249:       attachment_20250814_123623.pdf
   250:       attachment_20250814_123623.txt
   251:       attachment_20250814_124022.pdf
   252:       attachment_20250814_124034.pdf
   253:       attachment_20250814_124034.txt
   254:       attachment_20250814_124317.pdf
   255:       attachment_20250814_124330.pdf
   256:       attachment_20250814_124330.txt
   257:       attachment_20250814_124816.pdf
   258:       attachment_20250814_124829.pdf
   259:       attachment_20250814_124829.txt
   260:       attachment_20250814_125034.pdf
   261:       attachment_20250814_125049.pdf
   262:       attachment_20250814_125049.txt
   263:       attachment_20250814_130456.pdf
   264:       attachment_20250814_130511.pdf
   265:       attachment_20250814_130511.txt
   266:       attachment_20250814_130750.pdf
   267:       attachment_20250814_130805.pdf
   268:       attachment_20250814_130805.txt
   269:       attachment_20250815_023626.pdf
   270:       attachment_20250815_023627.pdf
   271:       attachment_20250815_023627.txt
   272:       attachment_20250816_122138.pdf
   273:       attachment_20250816_122148.pdf
   274:       attachment_20250816_122148.txt
   275:       attachment_20250816_125341.pdf
   276:       in_c.json
   277:       in_complaint.json
   278:       in_overlimit.json
   279:       in_sales.json
   280:       in_whitelist.json
   281:       out_c.json
   282:       out_complaint.json
   283:       out_overlimit.json
   284:       out_sales.json
   285:       out_whitelist.json
   286:       quote-基礎-20250814-122945.pdf
   287:       quote-基礎-20250814-123131.pdf
   288:       quote-基礎-20250814-123623.pdf
   289:       quote-基礎-20250814-124034.pdf
   290:       quote-基礎-20250814-124331.pdf
   291:       quote-基礎-20250814-124829.pdf
   292:       quote-基礎-20250814-125050.pdf
   293:       quote-基礎-20250814-130511.pdf
   294:       quote-基礎-20250814-130805.pdf
   295:       quote-基礎-20250815-023628.pdf
   296:       quote-基礎-20250816-122149.pdf
   297:       quote-基礎-20250816-125341.pdf
   298:       matrix/
   299:         edge_apply_no_diff.json
   300:         edge_empty_content.json
   301:         edge_empty_subject.json
   302:         edge_missing_sender.json
   303:         edge_unknown_label.json
   304:         matrix_summary.json
   305:         ok_apply_info.json
   306:         ok_reply_apology.json
   307:         ok_reply_faq.json
   308:         ok_reply_general.json
   309:         ok_reply_support.json
   310:         ok_send_quote.json
   311:     db/
   312:   .archive/
   313:     README.md.bak
   314:     pyproject.toml.bak
   315:     spam/
   316:       __init__.py
   317:       spam_filter_orchestrator.py
   318:     src/
   319:       cli/
   320:         __init__.py
   321:         sma.py
   322:       run_action_handler/
   323:         run_action_handler.py.bak.20250813-070746
   324:         run_action_handler.py.bak.20250813-081617
   325:         run_action_handler.py.bak.20250813-082258
   326:         run_action_handler.py.bak.20250813-083058
   327:         run_action_handler.py.bak.20250813-083230
   328:     cli/
   329:       run_classifier.py
   330:       run_generate_spam_testcases.py
   331:       run_llm_filter.py
   332:       run_main.py
   333:       run_orchestrator.py
   334:       run_rule_filter.py
   335:       run_spam_classifier.py
   336:       run_spam_filter.py
   337:     requirements/
   338:       requirements-dev.txt
   339:       requirements.txt
   340:     pipeline/
   341:       main.py
   342:       main1.py
   343:   .ruff_cache/
   344:     CACHEDIR.TAG
   345:     0.6.4/
   346:       10062691244152800297
   347:       10306445364552597575
   348:       10680823777146405479
   349:       10812975857774073136
   350:       10950020293331278908
   351:       11629886359630782689
   352:       12385548883717954955
   353:       12498655967259065337
   354:       12702323564727830366
   355:       129679571992669784
   356:       13482788831581788137
   357:       13726502579557856101
   358:       14510712170810810657
   359:       15084304008063436229
   360:       15211200385077616335
   361:       15801763888873579732
   362:       1628501678814995583
   363:       17429919253324346205
   364:       2380154359136515749
   365:       2567141616818888957
   366:       2885186335578831815
   367:       2930441936635789786
   368:       4524820271277778433
   369:       4638705800631848043
   370:       5193258509139492149
   371:       549511584802541438
   372:       5499184923316114254
   373:       6365037549610868957
   374:       7266236077337872609
   375:       7647450564625326899
   376:       7683510200818204332
   377:       8557885756071988162
   378:       8653225744940179924
   379:       9457546042828935485
   380:       9726470074215005135
   381:       9770693555042658987
   382:       9844702373653911736
   383:     0.6.2/
   384:       10306445364552597575
   385:       12117295808811510466
   386:       12199880939473388178
   387:       129679571992669784
   388:       13726502579557856101
   389:       16663937280500598577
   390:       2515981392420021228
   391:       3628367531841029378
   392:       4483119881832052049
   393:       4638705800631848043
   394:       7647450564625326899
   395:       8557885756071988162
   396:       9457546042828935485
   397:       9726470074215005135
   398:       9844702373653911736
   399:     0.12.9/
   400:       10123319129519659814
   401:       10497774252821708614
   402:       10706303106005769668
   403:       11251246965399226841
   404:       11520299587876701398
   405:       11922992146247323396
   406:       12439571598668468361
   407:       12505135006244482249
   408:       12712530352959455405
   409:       13779819890143230032
   410:       1429585026383353897
   411:       14474475985295799513
   412:       15105271467175372917
   413:       15424749669617451995
   414:       16104360331318901687
   415:       16376564017216308696
   416:       16797682789654596473
   417:       16862833753195440483
   418:       1867240831693799038
   419:       2086748894283419605
   420:       2352683957038820025
   421:       2815496270748541451
   422:       3196592208956207790
   423:       3585450064167336015
   424:       4064961918422823463
   425:       4339733879250257637
   426:       4587358578975028445
   427:       5073119430358208104
   428:       5095055150412158012
   429:       5376732432713081731
   430:       5612816493014956843
   431:       6701527992668914489
   432:       6834261517195298460
   433:       7052626565417396590
   434:       8238708856032378181
   435:       8574104569007726545
   436:       9008616584236440574
   437:       9425187067655346617
   438:       9480861006045943140
   439:   tests/
   440:     .keep
   441:     conftest.py
   442:     test_action_handler.py
   443:     test_apply_diff.py
   444:     test_classifier.py
   445:     test_init_db.py
   446:     test_init_emails_log_db.py
   447:     test_init_processed_mails_db.py
   448:     test_init_tickets_db.py
   449:     test_mailer.py
   450:     test_mailer_online.py
   451:     test_quotation.py
   452:     test_quote_logger.py
   453:     test_sales_notifier.py
   454:     test_send_with_attachment.py
   455:     test_spam_filter.py
   456:     test_stats_collector.py
   457:     contracts/
   458:       conftest.py
   459:       test_action_result_contracts.py
   460:     e2e/
   461:       conftest.py
   462:       test_actions_matrix_ext.py
   463:       test_cli_flags.py
   464:       test_cli_scripts.py
   465:       test_cli_scripts.py.bak.20250813-081617
   466:       test_complaint_policy.py
   467:       test_label_routing_offline.py
   468:       test_label_routing_offline.py.bak.20250813-081617
   469:       test_new_intents.py
   470:       test_offline_suite.py
   471:       test_policy_expansion.py
   472:       test_runner.py
   473:       test_sales_and_complaint.py
   474:       test_sales_inquiry_needs_summary.py
   475:       test_send_quote_degrade.py
   476:       test_spam_pipeline.py
   477:     unit/
   478:       test_contracts.py
   479:       test_policy_engine.py
   480:       test_policy_minimal.py
   481:       test_spam_stack.py
   482:       test_spam_stack.py.bak.20250813-081730
   483:       test_tasks_minimal.py
   484:       test_tasks_minimal.py.bak.20250813-081730
   485:   .pytest_cache/
   486:     CACHEDIR.TAG
   487:     README.md
   488:     v/
   489:       cache/
   490:         nodeids
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-125935/reports/tree-20250816-125637.txt
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/.github/workflows/tests.yml  (723 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: name: tests (main, showcase & hardening)
     2: on:
     3:   push:
     4:     branches:
     5:       - "main"
     6:       - "showcase/portfolio-clean-*"
     7:       - "hardening/*"
     8:   pull_request:
     9:     branches: ["main"]
    10: jobs:
    11:   test:
    12:     runs-on: ubuntu-22.04
    13:     steps:
    14:       - uses: actions/checkout@v4
    15:       - uses: actions/setup-python@v5
    16:         with: { python-version: "3.10" }
    17:       - name: Install (editable)
    18:         run: |
    19:           python -m pip install -U pip
    20:           pip install -e . || pip install -r requirements.txt
    21:       - name: Offline tests
    22:         env:
    23:           OFFLINE: "1"
    24:           PYTHONPATH: ".:src"
    25:           PRE_COMMIT_ALLOW_NO_CONFIG: "1"
    26:         run: |
    27:           pytest -q tests -k "not online" --timeout=60 --timeout-method=thread
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/.github/workflows/tests.yml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/config/.gitignore  (206 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: # venv / caches
     2: .venv/
     3: __pycache__/
     4: *.pyc
     5: .pytest_cache/
     6: # build artifacts
     7: build/
     8: dist/
     9: *.egg-info/
    10: # editor
    11: *.swp
    12: .DS_Store
    13: # data outputs (保留版本但可視需要忽略)
    14: data/output/
    15: # local env
    16: .env
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/config/.gitignore
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/config/.pre-commit-config.yaml  (152 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: repos:
     2:   - repo: https://github.com/astral-sh/ruff-pre-commit
     3:     rev: v0.6.2
     4:     hooks:
     5:       - id: ruff
     6:         args: [--fix]
     7:       - id: ruff-format
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/config/.pre-commit-config.yaml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/config/pyproject.toml  (1181 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [build-system]
     2: requires = ["setuptools>=69", "wheel"]
     3: build-backend = "setuptools.build_meta"
     4: 
     5: [project]
     6: name = "smart-mail-agent"
     7: version = "0.4.6"
     8: description = "AI + RPA smart mail processing with CLI entrypoints and packaging"
     9: readme = "README.md"
    10: requires-python = ">=3.10"
    11: license = "MIT"
    12: authors = [{name="YOU-JIE"}]
    13: dependencies = [  "pydantic>=1.10,<3"
    14: ]
    15: 
    16: [project.urls]
    17: Homepage = "https://github.com/YOU-JIE-hub/smart-mail-agent"
    18: 
    19: [tool.setuptools]
    20: package-dir = {"" = "src"}
    21: include-package-data = true
    22: 
    23: [tool.setuptools.packages.find]
    24: where = ["src"]
    25: include = ["smart_mail_agent*"]
    26: 
    27: [tool.black]
    28: line-length = 200
    29: target-version = ["py310"]
    30: 
    31: [tool.ruff]
    32: line-length = 200
    33: target-version = "py310"
    34: 
    35: [tool.ruff.lint]
    36: select = ["E","F","I","B","UP","ISC","C90"]
    37: ignore = ["E402","E501","C901","B007","UP038","F401","F403","ISC001","B034"]
    38: [project.optional-dependencies]
    39: dev = [
    40:   "pytest>=7",
    41:   "pytest-cov>=4",
    42:   "pytest-timeout>=2.3",
    43:   "ruff>=0.5",
    44:   "pre-commit>=3.5",
    45:   "mkdocs>=1.6",
    46:   "mkdocs-material>=9.5"
    47: ]
    48: 
    49: [project.scripts]
    50: sma = "smart_mail_agent.__main__:main"
    51: sma-run = "src.run_action_handler:main"
    52: sma-spamcheck = "smart_mail_agent.cli_spamcheck:main"
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/config/pyproject.toml
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/config/README.md  (1388 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [![tests](https://github.com/YOU-JIE-hub/smart-mail-agent/actions/workflows/tests.yml/badge.svg?branch=main)](https://github.com/YOU-JIE-hub/smart-mail-agent/actions/workflows/tests.yml) [![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](LICENSE)
     2: 
     3: # Smart Mail Agent
     4: 
     5: 最小可演示的郵件自動化專案（離線可驗證）。已整理結構、提供 CLI 與離線測試，適合面試展示。
     6: 
     7: ## 結構
     8: - `src/smart_mail_agent/`：核心與功能模組（routing / features / observability / spam）
     9: - `src/`：向後相容 shims
    10: - `tests/`：單元與離線測試
    11: - `.github/workflows/tests.yml`：CI（main / showcase / hardening）
    12: 
    13: ## 安裝與測試（離線）
    14: 1. 建立虛擬環境並安裝：
    15:    - `python -m venv .venv && . .venv/bin/activate`
    16:    - `python -m pip install -U pip`
    17:    - `pip install -e . || pip install -r requirements.txt`
    18: 2. 執行離線測試：
    19:    - `OFFLINE=1 PYTHONPATH=".:src" pytest -q tests -k "not online" --timeout=60 --timeout-method=thread`
    20: 
    21: ## CLI
    22: - 初始化統計資料庫（stdout: 資料庫初始化完成）  
    23:   `python src/stats_collector.py --init`
    24: - 新增統計（stdout: 已新增統計紀錄）  
    25:   `python src/stats_collector.py --label 投訴 --elapsed 0.56`
    26: 
    27: ## PDF 中文字型
    28: - 將 `NotoSansTC-Regular.ttf` 放在 `assets/fonts/`  
    29: - 或在 `.env` 設：`FONT_TTC_PATH=assets/fonts/NotoSansTC-Regular.ttf`
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/config/README.md
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/LOW_COVERAGE_FILES.txt  (1731 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: 000.0%  actions/__init__.py
     2: 000.0%  email_processor.py
     3: 000.0%  inference_classifier.py
     4: 000.0%  log_writer.py
     5: 000.0%  modules/leads_logger.py
     6: 000.0%  patches/handle_router_patch.py
     7: 000.0%  run_action_handler.py
     8: 000.0%  smart_mail_agent/__main__.py
     9: 000.0%  smart_mail_agent/actions/complaint.py
    10: 000.0%  smart_mail_agent/actions/sales_inquiry.py
    11: 000.0%  smart_mail_agent/cli_spamcheck.py
    12: 000.0%  smart_mail_agent/spam/feature_extractor.py
    13: 000.0%  smart_mail_agent/spam/ml_spam_classifier.py
    14: 000.0%  smart_mail_agent/spam/rule_filter.py
    15: 000.0%  smart_mail_agent/spam/spam_llm_filter.py
    16: 000.0%  smart_mail_agent/utils/config.py
    17: 000.0%  smart_mail_agent/utils/db_tools.py
    18: 000.0%  smart_mail_agent/utils/env.py
    19: 000.0%  smart_mail_agent/utils/errors.py
    20: 000.0%  smart_mail_agent/utils/font_check.py
    21: 000.0%  smart_mail_agent/utils/fonts.py
    22: 000.0%  smart_mail_agent/utils/imap_folder_detector.py
    23: 000.0%  smart_mail_agent/utils/imap_login.py
    24: 000.0%  smart_mail_agent/utils/jsonlog.py
    25: 000.0%  smart_mail_agent/utils/log_writer.py
    26: 000.0%  smart_mail_agent/utils/logging_setup.py
    27: 000.0%  smart_mail_agent/utils/pdf_generator.py
    28: 000.0%  smart_mail_agent/utils/pdf_safe.py
    29: 000.0%  smart_mail_agent/utils/priority_evaluator.py
    30: 000.0%  smart_mail_agent/utils/rag_reply.py
    31: 000.0%  smart_mail_agent/utils/templater.py
    32: 000.0%  smart_mail_agent/utils/tracing.py
    33: 000.0%  smart_mail_agent/utils/validators.py
    34: 000.0%  spam/feature_extractor.py
    35: 000.0%  spam/ml_spam_classifier.py
    36: 000.0%  spam/rule_filter.py
    37: 000.0%  spam/rules.py
    38: 000.0%  support_ticket.py
    39: 000.0%  train_classifier.py
    40: 000.0%  utils/jsonlog.py
    41: 019.5%  smart_mail_agent/spam/rules.py
    42: 037.5%  patches/handle_safe_patch.py
    43: 037.6%  send_with_attachment.py
    44: 040.0%  smart_mail_agent/spam/pipeline.py
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/LOW_COVERAGE_FILES.txt
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/README_AUDIT_BUNDLE.txt  (603 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: This bundle is for final review:
     2: - reports/tree-*.txt               : repository tree
     3: - reports/tests-collect-*.txt      : pytest collection
     4: - reports/coverage-offline.xml     : coverage xml (offline suite)
     5: - reports/html-offline/            : coverage html report
     6: - assets/badges/coverage.svg       : local coverage badge
     7: - config/                          : README, pyproject, requirements, pre-commit, gitignore/gitattributes, pytest.ini, workflows
     8: - src_lowcov/                      : source files with line-rate < 60% (from coverage)
     9: - LOW_COVERAGE_FILES.txt           : list of low-coverage files
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/README_AUDIT_BUNDLE.txt
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/reports/tests-collect-20250816-125637.txt  (8674 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: tests/e2e/test_actions_matrix_ext.py::test_happy_paths
     2: tests/e2e/test_actions_matrix_ext.py::test_edge_cases
     3: tests/e2e/test_cli_flags.py::test_dry_run_flag
     4: tests/e2e/test_cli_flags.py::test_simulate_pdf_failure
     5: tests/e2e/test_cli_scripts.py::test_cli_run_main_help
     6: tests/e2e/test_cli_scripts.py::test_cli_run_classifier_help
     7: tests/e2e/test_cli_scripts.py::test_cli_run_orchestrator_help
     8: tests/e2e/test_complaint_policy.py::test_complaint_high_triggers_p1_and_cc
     9: tests/e2e/test_label_routing_offline.py::test_label_send_quote
    10: tests/e2e/test_label_routing_offline.py::test_label_reply_faq
    11: tests/e2e/test_label_routing_offline.py::test_label_other_to_reply_general
    12: tests/e2e/test_new_intents.py::test_sales_inquiry
    13: tests/e2e/test_new_intents.py::test_complaint
    14: tests/e2e/test_offline_suite.py::test_generate_quote_pdf
    15: tests/e2e/test_offline_suite.py::test_cli_smoke
    16: tests/e2e/test_policy_expansion.py::test_attachments_over_limit_requires_review
    17: tests/e2e/test_policy_expansion.py::test_sender_domain_whitelist_flag
    18: tests/e2e/test_runner.py::test_runner_outputs
    19: tests/e2e/test_sales_and_complaint.py::test_e2e_sales_inquiry
    20: tests/e2e/test_sales_and_complaint.py::test_e2e_complaint_high
    21: tests/e2e/test_sales_inquiry_needs_summary.py::test_sales_inquiry_generates_md_and_next_step
    22: tests/e2e/test_send_quote_degrade.py::test_send_quote_degrade
    23: tests/test_action_handler.py::test_support
    24: tests/test_action_handler.py::test_info_change
    25: tests/test_action_handler.py::test_faq
    26: tests/test_action_handler.py::test_apology
    27: tests/test_action_handler.py::test_quote_with_attachment
    28: tests/test_action_handler.py::test_other_fallback
    29: tests/test_action_handler.py::test_unknown_label_as_general
    30: tests/test_apply_diff.py::test_update_with_changes
    31: tests/test_apply_diff.py::test_update_with_no_change
    32: tests/test_apply_diff.py::test_update_partial_change
    33: tests/test_apply_diff.py::test_empty_content
    34: tests/test_apply_diff.py::test_user_not_found
    35: tests/test_classifier.py::test_classifier_inference_with_high_confidence
    36: tests/test_classifier.py::test_classifier_inference_with_low_confidence_trigger_fallback
    37: tests/test_classifier.py::test_output_file_format
    38: tests/test_init_db.py::test_users_table_schema
    39: tests/test_init_db.py::test_diff_log_table_schema
    40: tests/test_init_db.py::test_repeat_init_users_db_does_not_fail
    41: tests/test_init_emails_log_db.py::test_emails_log_table_created
    42: tests/test_init_emails_log_db.py::test_repeat_init_emails_log_db_does_not_fail
    43: tests/test_init_processed_mails_db.py::test_processed_mails_table_created
    44: tests/test_init_processed_mails_db.py::test_repeat_init_processed_mails_db_does_not_fail
    45: tests/test_init_tickets_db.py::test_support_tickets_table_created
    46: tests/test_init_tickets_db.py::test_repeat_init_tickets_db_does_not_fail
    47: tests/test_mailer.py::test_validate_smtp_config_missing_env
    48: tests/test_mailer.py::test_send_email_with_attachment_success
    49: tests/test_mailer.py::test_send_email_attachment_not_found
    50: tests/test_mailer_online.py::test_smtp_live_send_ok
    51: tests/test_quotation.py::test_choose_package[\u5831\u50f9\u9700\u6c42-\u6211\u60f3\u77e5\u9053\u5831\u50f9\u3001\u50f9\u683c\u8cc7\u8a0a-\u57fa\u790e]
    52: tests/test_quotation.py::test_choose_package[\u81ea\u52d5\u5206\u985e\u529f\u80fd-\u662f\u5426\u652f\u63f4\u81ea\u52d5\u5316\u8207\u6392\u7a0b\uff1f-\u5c08\u696d]
    53: tests/test_quotation.py::test_choose_package[\u6574\u5408 API-\u60f3\u8207 ERP \u6216 LINE \u6574\u5408-\u4f01\u696d]
    54: tests/test_quotation.py::test_choose_package[\u5176\u4ed6\u8a62\u554f-\u4f60\u5011\u80fd\u63d0\u4f9b\u4ec0\u9ebc\u529f\u80fd\uff1f-\u4f01\u696d]
    55: tests/test_quotation.py::test_generate_pdf_quote
    56: tests/test_quote_logger.py::test_log_quote_to_db
    57: tests/test_sales_notifier.py::test_notify_sales_success[test_client-\u57fa\u790e]
    58: tests/test_sales_notifier.py::test_notify_sales_success[test_corp-\u4f01\u696d]
    59: tests/test_send_with_attachment.py::test_send_with_attachment_cli_success
    60: tests/test_spam_filter.py::test_spam_filter_logic[email_json0-False]
    61: tests/test_spam_filter.py::test_spam_filter_logic[email_json1-False]
    62: tests/test_spam_filter.py::test_spam_filter_logic[email_json2-False]
    63: tests/test_spam_filter.py::test_spam_filter_logic[email_json3-False]
    64: tests/test_spam_filter.py::test_spam_filter_logic[email_json4-False]
    65: tests/test_spam_filter.py::test_spam_filter_logic[email_json5-False]
    66: tests/test_spam_filter.py::test_spam_filter_logic[email_json6-False]
    67: tests/test_spam_filter.py::test_spam_filter_logic[email_json7-True]
    68: tests/test_spam_filter.py::test_spam_filter_logic[email_json8-True]
    69: tests/test_stats_collector.py::test_init_stats_db
    70: tests/test_stats_collector.py::test_increment_counter
    71: tests/test_stats_collector.py::test_cli_init_and_insert
    72: tests/unit/test_policy_minimal.py::test_policy_require_review_on_low_conf
    73: tests/unit/test_spam_stack.py::test_spam_stack_allow_and_block
    74: tests/unit/test_tasks_minimal.py::test_tasks_minimal_contract
    75: 
    76: ==================================== ERRORS ====================================
    77: _______ ERROR collecting tests/contracts/test_action_result_contracts.py _______
    78: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/contracts/test_action_result_contracts.py'.
    79: Hint: make sure your test modules/packages have valid Python names.
    80: Traceback:
    81: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
    82:     return _bootstrap._gcd_import(name[level:], package, level)
    83: tests/contracts/test_action_result_contracts.py:6: in <module>
    84:     from src.sma_types import ActionResult, AttachmentMeta
    85: E   ModuleNotFoundError: No module named 'src'
    86: _______________ ERROR collecting tests/e2e/test_spam_pipeline.py _______________
    87: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/e2e/test_spam_pipeline.py'.
    88: Hint: make sure your test modules/packages have valid Python names.
    89: Traceback:
    90: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
    91:     return _bootstrap._gcd_import(name[level:], package, level)
    92: tests/e2e/test_spam_pipeline.py:3: in <module>
    93:     from src.spam.pipeline import analyze
    94: E   ModuleNotFoundError: No module named 'src'
    95: ________________ ERROR collecting tests/unit/test_contracts.py _________________
    96: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/unit/test_contracts.py'.
    97: Hint: make sure your test modules/packages have valid Python names.
    98: Traceback:
    99: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
   100:     return _bootstrap._gcd_import(name[level:], package, level)
   101: tests/unit/test_contracts.py:4: in <module>
   102:     from src.sma_types import normalize_request, normalize_result
   103: E   ModuleNotFoundError: No module named 'src'
   104: ______________ ERROR collecting tests/unit/test_policy_engine.py _______________
   105: ImportError while importing test module '/home/youjie/smart-mail-agent/tests/unit/test_policy_engine.py'.
   106: Hint: make sure your test modules/packages have valid Python names.
   107: Traceback:
   108: /usr/lib/python3.10/importlib/__init__.py:126: in import_module
   109:     return _bootstrap._gcd_import(name[level:], package, level)
   110: tests/unit/test_policy_engine.py:4: in <module>
   111:     from src.policy_engine import apply_policies, apply_policy
   112: E   ModuleNotFoundError: No module named 'src'
   113: =============================== warnings summary ===============================
   114: tests/conftest.py:25
   115:   /home/youjie/smart-mail-agent/tests/conftest.py:25: PytestRemovedIn9Warning: The (path: py.path.local) argument is deprecated, please use (collection_path: pathlib.Path)
   116:   see https://docs.pytest.org/en/latest/deprecations.html#py-path-local-arguments-for-hooks-replaced-with-pathlib-path
   117:     def pytest_ignore_collect(path, config):
   118: 
   119: tests/test_mailer_online.py:13
   120:   /home/youjie/smart-mail-agent/tests/test_mailer_online.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.online - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
   121:     pytestmark = pytest.mark.online
   122: 
   123: tests/e2e/conftest.py:12
   124:   /home/youjie/smart-mail-agent/tests/e2e/conftest.py:12: PytestUnknownMarkWarning: Unknown pytest.mark.online - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
   125:     item.add_marker(pytest.mark.online)
   126: 
   127: -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
   128: =========================== short test summary info ============================
   129: ERROR tests/contracts/test_action_result_contracts.py
   130: ERROR tests/e2e/test_spam_pipeline.py
   131: ERROR tests/unit/test_contracts.py
   132: ERROR tests/unit/test_policy_engine.py
   133: !!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!
   134: 74 tests collected, 4 errors in 5.73s
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/reports/tests-collect-20250816-125637.txt
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/reports/tree-20250816-125637.txt  (11938 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: .
     2:   .env
     3:   .env.example
     4:   .pre-commit-config.yaml
     5:   LICENSE
     6:   README.md
     7:   pyproject.toml
     8:   .portfolio_hidden/
     9:     .dockerignore
    10:     .editorconfig
    11:     .env.example
    12:     .envrc
    13:     .flake8
    14:     .pre-commit-config.yaml
    15:     .pre-commit-config.yaml.bak.before-black-removal
    16:     CHANGELOG.md
    17:     CODE_OF_CONDUCT.md
    18:     CONTRIBUTING.md
    19:     Dockerfile
    20:     MANIFEST.in
    21:     Makefile
    22:     SECURITY.md
    23:     bootstrap_project.py
    24:     mkdocs.yml
    25:     pyproject.toml.bak.pre-fix-20250816-003526
    26:     pytest.ini
    27:     .dev/
    28:       __init__.py
    29:       apply_classifier_fallback_fix_v1.py
    30:       apply_docker_ci_v1.py
    31:       apply_fix_log_writer_v1.py
    32:       apply_fix_round9.py
    33:       apply_imap_debug_v2.py
    34:       apply_mailer_online_tests_v1.py
    35:       bootstrap_gh_ci.sh
    36:       check_env.py
    37:       ci.mk
    38:       cleanup_repo.py
    39:       db_migrate_emails_log.py
    40:       dedup_cleanup.sh
    41:       dedupe_requirements.py
    42:       dev_runner.py
    43:       finalize_and_push.sh
    44:       fix_from_pretrained_order.py
    45:       fix_from_pretrained_order_v2.py
    46:       fix_from_pretrained_order_v3.py
    47:       generate_offline_report.py
    48:       generate_spam_report.py
    49:       gh_device_login.sh
    50:       git_setup_and_tag.py
    51:       imap_pass_sanitize.py
    52:       make_share_bundle.sh
    53:       metrics_daily.py
    54:       offline_verify.py
    55:       one_paste_ship.py
    56:       one_shot_patch_and_run.sh
    57:       project_catalog.py
    58:       push_secrets_from_env.sh
    59:       repo_tidy.py
    60:       run_actions_matrix.py
    61:       run_spam_demo.py
    62:       set_imap_pass.py
    63:       set_smtp_pass.py
    64:       show_summary.sh
    65:       verify_pdf_degrade.py
    66:     docs/
    67:       architecture.md
    68:       cli.md
    69:       index.md
    70:       usage.md
    71:     assets/
    72:       fonts/
    73:         .keep
    74:         README.txt
    75:     .github/
    76:       workflows/
    77:         ci.yml
    78:         coverage.yml
    79:         docs.yml
    80:         release.yml
    81:     templates/
    82:       complaint_high.j2
    83:       complaint_low.j2
    84:       complaint_med.j2
    85:       needs_summary.md.j2
    86:       sales_inquiry_reply.j2
    87:     .archive/
    88:   scripts/
    89:     run_pipeline.sh
    90:     setup_env.sh
    91:     bin/
    92:       smarun
    93:   spam/
    94:   reports/
    95:     tree-20250816-124354.txt
    96:     tree-20250816-124547.txt
    97:     tree-20250816-125335.txt
    98:   .backup/
    99:     20250815-003726/
   100:     20250815-002819/
   101:     20250814-234536/
   102:       configs.tgz
   103:       utils.tgz
   104:   assets/
   105:     badges/
   106:     fonts/
   107:   src/
   108:     __init__.py
   109:     action_handler.py
   110:     classifier.py
   111:     email_processor.py
   112:     inference_classifier.py
   113:     init_db.py
   114:     log_writer.py
   115:     policy_engine.py
   116:     requirements.txt
   117:     run_action_handler.py
   118:     send_with_attachment.py
   119:     sitecustomize.py
   120:     sma_types.py
   121:     stats_collector.py
   122:     support_ticket.py
   123:     train_classifier.py
   124:     spam/
   125:       __init__.py
   126:       feature_extractor.py
   127:       ml_spam_classifier.py
   128:       pipeline.py
   129:       rule_filter.py
   130:       rules.py
   131:       spam_filter_orchestrator.py
   132:     smart_mail_agent/
   133:       __init__.py
   134:       __main__.py
   135:       __version__.py
   136:       cli_spamcheck.py
   137:       policy_engine.py
   138:       sma_types.py
   139:       spam/
   140:         .keep
   141:         __init__.py
   142:         feature_extractor.py
   143:         ml_spam_classifier.py
   144:         pipeline.py
   145:         rule_filter.py
   146:         rules.py
   147:         spam_filter_orchestrator.py
   148:         spam_llm_filter.py
   149:       cli/
   150:         sma.py
   151:         sma_run.py
   152:         sma_spamcheck.py
   153:       actions/
   154:         __init__.py
   155:         complaint.py
   156:         sales_inquiry.py
   157:       utils/
   158:         __init__.py
   159:         config.py
   160:         db_tools.py
   161:         env.py
   162:         errors.py
   163:         font_check.py
   164:         fonts.py
   165:         imap_folder_detector.py
   166:         imap_login.py
   167:         jsonlog.py
   168:         log_writer.py
   169:         logger.py
   170:         logging_setup.py
   171:         mailer.py
   172:         pdf_generator.py
   173:         pdf_safe.py
   174:         priority_evaluator.py
   175:         rag_reply.py
   176:         templater.py
   177:         tracing.py
   178:         validators.py
   179:     actions/
   180:       __init__.py
   181:     utils/
   182:       .keep
   183:       __init__.py
   184:       jsonlog.py
   185:       logger.py
   186:       mailer.py
   187:     modules/
   188:       __init__.py
   189:       apply_diff.py
   190:       leads_logger.py
   191:       quotation.py
   192:       quote_logger.py
   193:       sales_notifier.py
   194:     smart_mail_agent.egg-info/
   195:       PKG-INFO
   196:       SOURCES.txt
   197:       dependency_links.txt
   198:       entry_points.txt
   199:       requires.txt
   200:       top_level.txt
   201:     observability/
   202:       tracing.py
   203:     trainers/
   204:       train_bert_spam_classifier.py
   205:     patches/
   206:       __init__.py
   207:       handle_router_patch.py
   208:       handle_safe_patch.py
   209:   configs/
   210:     default.yml
   211:     samples/
   212:       policy.yaml
   213:       spam_rules.yaml
   214:   dist/
   215:     smart_mail_agent-0.3.1-py3-none-any.whl
   216:     smart_mail_agent-0.3.1.tar.gz
   217:     smart_mail_agent-0.4.0-py3-none-any.whl
   218:     smart_mail_agent-0.4.0.tar.gz
   219:     smart_mail_agent-0.4.1-py3-none-any.whl
   220:     smart_mail_agent-0.4.1.tar.gz
   221:   .github/
   222:     PULL_REQUEST_TEMPLATE.md
   223:     dependabot.yml
   224:     workflows-archive/
   225:       ci-offline.yml
   226:       ci.yaml
   227:       docker-ghcr.yml
   228:       interview-addon.yml
   229:       interview.yml
   230:       nightly.yml
   231:       offline-ci.yml
   232:       release.yml
   233:       security.yml
   234:     workflows/
   235:       tests.yml
   236:     ISSUE_TEMPLATE/
   237:       bug_report.md
   238:   tools/
   239:     run_actions_matrix.py
   240:   data/
   241:     output/
   242:       attachment_20250814_122932.pdf
   243:       attachment_20250814_122945.pdf
   244:       attachment_20250814_122945.txt
   245:       attachment_20250814_123118.pdf
   246:       attachment_20250814_123131.pdf
   247:       attachment_20250814_123131.txt
   248:       attachment_20250814_123612.pdf
   249:       attachment_20250814_123623.pdf
   250:       attachment_20250814_123623.txt
   251:       attachment_20250814_124022.pdf
   252:       attachment_20250814_124034.pdf
   253:       attachment_20250814_124034.txt
   254:       attachment_20250814_124317.pdf
   255:       attachment_20250814_124330.pdf
   256:       attachment_20250814_124330.txt
   257:       attachment_20250814_124816.pdf
   258:       attachment_20250814_124829.pdf
   259:       attachment_20250814_124829.txt
   260:       attachment_20250814_125034.pdf
   261:       attachment_20250814_125049.pdf
   262:       attachment_20250814_125049.txt
   263:       attachment_20250814_130456.pdf
   264:       attachment_20250814_130511.pdf
   265:       attachment_20250814_130511.txt
   266:       attachment_20250814_130750.pdf
   267:       attachment_20250814_130805.pdf
   268:       attachment_20250814_130805.txt
   269:       attachment_20250815_023626.pdf
   270:       attachment_20250815_023627.pdf
   271:       attachment_20250815_023627.txt
   272:       attachment_20250816_122138.pdf
   273:       attachment_20250816_122148.pdf
   274:       attachment_20250816_122148.txt
   275:       attachment_20250816_125341.pdf
   276:       in_c.json
   277:       in_complaint.json
   278:       in_overlimit.json
   279:       in_sales.json
   280:       in_whitelist.json
   281:       out_c.json
   282:       out_complaint.json
   283:       out_overlimit.json
   284:       out_sales.json
   285:       out_whitelist.json
   286:       quote-基礎-20250814-122945.pdf
   287:       quote-基礎-20250814-123131.pdf
   288:       quote-基礎-20250814-123623.pdf
   289:       quote-基礎-20250814-124034.pdf
   290:       quote-基礎-20250814-124331.pdf
   291:       quote-基礎-20250814-124829.pdf
   292:       quote-基礎-20250814-125050.pdf
   293:       quote-基礎-20250814-130511.pdf
   294:       quote-基礎-20250814-130805.pdf
   295:       quote-基礎-20250815-023628.pdf
   296:       quote-基礎-20250816-122149.pdf
   297:       quote-基礎-20250816-125341.pdf
   298:       matrix/
   299:         edge_apply_no_diff.json
   300:         edge_empty_content.json
   301:         edge_empty_subject.json
   302:         edge_missing_sender.json
   303:         edge_unknown_label.json
   304:         matrix_summary.json
   305:         ok_apply_info.json
   306:         ok_reply_apology.json
   307:         ok_reply_faq.json
   308:         ok_reply_general.json
   309:         ok_reply_support.json
   310:         ok_send_quote.json
   311:     db/
   312:   .archive/
   313:     README.md.bak
   314:     pyproject.toml.bak
   315:     spam/
   316:       __init__.py
   317:       spam_filter_orchestrator.py
   318:     src/
   319:       cli/
   320:         __init__.py
   321:         sma.py
   322:       run_action_handler/
   323:         run_action_handler.py.bak.20250813-070746
   324:         run_action_handler.py.bak.20250813-081617
   325:         run_action_handler.py.bak.20250813-082258
   326:         run_action_handler.py.bak.20250813-083058
   327:         run_action_handler.py.bak.20250813-083230
   328:     cli/
   329:       run_classifier.py
   330:       run_generate_spam_testcases.py
   331:       run_llm_filter.py
   332:       run_main.py
   333:       run_orchestrator.py
   334:       run_rule_filter.py
   335:       run_spam_classifier.py
   336:       run_spam_filter.py
   337:     requirements/
   338:       requirements-dev.txt
   339:       requirements.txt
   340:     pipeline/
   341:       main.py
   342:       main1.py
   343:   .ruff_cache/
   344:     CACHEDIR.TAG
   345:     0.6.4/
   346:       10062691244152800297
   347:       10306445364552597575
   348:       10680823777146405479
   349:       10812975857774073136
   350:       10950020293331278908
   351:       11629886359630782689
   352:       12385548883717954955
   353:       12498655967259065337
   354:       12702323564727830366
   355:       129679571992669784
   356:       13482788831581788137
   357:       13726502579557856101
   358:       14510712170810810657
   359:       15084304008063436229
   360:       15211200385077616335
   361:       15801763888873579732
   362:       1628501678814995583
   363:       17429919253324346205
   364:       2380154359136515749
   365:       2567141616818888957
   366:       2885186335578831815
   367:       2930441936635789786
   368:       4524820271277778433
   369:       4638705800631848043
   370:       5193258509139492149
   371:       549511584802541438
   372:       5499184923316114254
   373:       6365037549610868957
   374:       7266236077337872609
   375:       7647450564625326899
   376:       7683510200818204332
   377:       8557885756071988162
   378:       8653225744940179924
   379:       9457546042828935485
   380:       9726470074215005135
   381:       9770693555042658987
   382:       9844702373653911736
   383:     0.6.2/
   384:       10306445364552597575
   385:       12117295808811510466
   386:       12199880939473388178
   387:       129679571992669784
   388:       13726502579557856101
   389:       16663937280500598577
   390:       2515981392420021228
   391:       3628367531841029378
   392:       4483119881832052049
   393:       4638705800631848043
   394:       7647450564625326899
   395:       8557885756071988162
   396:       9457546042828935485
   397:       9726470074215005135
   398:       9844702373653911736
   399:     0.12.9/
   400:       10123319129519659814
   401:       10497774252821708614
   402:       10706303106005769668
   403:       11251246965399226841
   404:       11520299587876701398
   405:       11922992146247323396
   406:       12439571598668468361
   407:       12505135006244482249
   408:       12712530352959455405
   409:       13779819890143230032
   410:       1429585026383353897
   411:       14474475985295799513
   412:       15105271467175372917
   413:       15424749669617451995
   414:       16104360331318901687
   415:       16376564017216308696
   416:       16797682789654596473
   417:       16862833753195440483
   418:       1867240831693799038
   419:       2086748894283419605
   420:       2352683957038820025
   421:       2815496270748541451
   422:       3196592208956207790
   423:       3585450064167336015
   424:       4064961918422823463
   425:       4339733879250257637
   426:       4587358578975028445
   427:       5073119430358208104
   428:       5095055150412158012
   429:       5376732432713081731
   430:       5612816493014956843
   431:       6701527992668914489
   432:       6834261517195298460
   433:       7052626565417396590
   434:       8238708856032378181
   435:       8574104569007726545
   436:       9008616584236440574
   437:       9425187067655346617
   438:       9480861006045943140
   439:   tests/
   440:     .keep
   441:     conftest.py
   442:     test_action_handler.py
   443:     test_apply_diff.py
   444:     test_classifier.py
   445:     test_init_db.py
   446:     test_init_emails_log_db.py
   447:     test_init_processed_mails_db.py
   448:     test_init_tickets_db.py
   449:     test_mailer.py
   450:     test_mailer_online.py
   451:     test_quotation.py
   452:     test_quote_logger.py
   453:     test_sales_notifier.py
   454:     test_send_with_attachment.py
   455:     test_spam_filter.py
   456:     test_stats_collector.py
   457:     contracts/
   458:       conftest.py
   459:       test_action_result_contracts.py
   460:     e2e/
   461:       conftest.py
   462:       test_actions_matrix_ext.py
   463:       test_cli_flags.py
   464:       test_cli_scripts.py
   465:       test_cli_scripts.py.bak.20250813-081617
   466:       test_complaint_policy.py
   467:       test_label_routing_offline.py
   468:       test_label_routing_offline.py.bak.20250813-081617
   469:       test_new_intents.py
   470:       test_offline_suite.py
   471:       test_policy_expansion.py
   472:       test_runner.py
   473:       test_sales_and_complaint.py
   474:       test_sales_inquiry_needs_summary.py
   475:       test_send_quote_degrade.py
   476:       test_spam_pipeline.py
   477:     unit/
   478:       test_contracts.py
   479:       test_policy_engine.py
   480:       test_policy_minimal.py
   481:       test_spam_stack.py
   482:       test_spam_stack.py.bak.20250813-081730
   483:       test_tasks_minimal.py
   484:       test_tasks_minimal.py.bak.20250813-081730
   485:   .pytest_cache/
   486:     CACHEDIR.TAG
   487:     README.md
   488:     v/
   489:       cache/
   490:         nodeids
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/reports/tree-20250816-125637.txt
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/actions/__init__.py  (131 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: import datetime as dt
     2: import json
     3: import os
     4: import sys
     5: import traceback
     6: 
     7: from smart_mail_agent.actions import *  # noqa: F401,F403
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/actions/__init__.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/email_processor.py  (4388 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/email_processor.py
     3: # 模組用途：主流程入口，整合垃圾信過濾 → 意圖分類 → 執行對應行動模組
     4: import argparse
     5: import json
     6: import os
     7: 
     8: from dotenv import load_dotenv
     9: 
    10: from action_handler import route_action
    11: from inference_classifier import classify_intent
    12: from spam.spam_filter_orchestrator import SpamFilterOrchestrator
    13: from utils.log_writer import write_log
    14: from utils.logger import logger
    15: 
    16: load_dotenv()
    17: 
    18: 
    19: def extract_fields(data: dict) -> tuple:
    20:     """
    21:     從 JSON 結構中抽取主旨、內容、寄件人欄位，並標準化欄位名稱
    22: 
    23:     :param data: dict 輸入信件資料
    24:     :return: tuple(subject, body, sender)
    25:     """
    26:     subject = data.get("subject", "") or data.get("title", "")
    27:     body = data.get("content", "") or data.get("body", "")
    28:     sender = data.get("sender", "") or data.get("from", "")
    29:     return subject.strip(), body.strip(), sender.strip()
    30: 
    31: 
    32: def write_classification_result(data: dict, path: str) -> None:
    33:     """
    34:     將分類結果寫回原始 JSON 檔案
    35: 
    36:     :param data: dict 欲寫入內容
    37:     :param path: str 檔案路徑
    38:     """
    39:     with open(path, "w", encoding="utf-8") as f:
    40:         json.dump(data, f, ensure_ascii=False, indent=2)
    41: 
    42: 
    43: def main():
    44:     parser = argparse.ArgumentParser(description="處理單一信件 JSON，進行 spam 過濾與意圖分類")
    45:     parser.add_argument("--input", required=True, help="輸入 JSON 信件檔案路徑")
    46:     args = parser.parse_args()
    47:     input_path = args.input
    48: 
    49:     if not os.path.exists(input_path):
    50:         logger.error(f"[Pipeline] 找不到輸入檔案：{input_path}")
    51:         return
    52: 
    53:     try:
    54:         with open(input_path, encoding="utf-8") as f:
    55:             data = json.load(f)
    56:     except Exception as e:
    57:         logger.error(f"[Pipeline] 無法讀取 JSON：{e}")
    58:         return
    59: 
    60:     subject, body, sender = extract_fields(data)
    61:     logger.info(f"[Pipeline] 處理信件：{subject} / 寄件人：{sender}")
    62: 
    63:     try:
    64:         spam_filter = SpamFilterOrchestrator()
    65:         result = spam_filter.is_legit(subject, body, sender)
    66: 
    67:         if not result["allow"]:
    68:             logger.warning(f"[Spam] 被過濾：階段 {result.get('stage') or result.get('engine', 'blocked')}")
    69:             data.update({"label": "spam", "predicted_label": "spam", "confidence": 0.0, "summary": ""})
    70:             write_classification_result(data, input_path)
    71:             write_log(
    72:                 subject,
    73:                 body,
    74:                 sender,
    75:                 "Spam",
    76:                 result.get("stage") or result.get("engine", "blocked"),
    77:                 confidence=0.0,
    78:             )
    79:             return
    80: 
    81:         classification = classify_intent(subject, body)
    82:         label = classification.get("label", "其他")
    83:         confidence = classification.get("confidence", 0.0)
    84: 
    85:         try:
    86:             confidence_val = float(confidence)
    87:         except Exception:
    88:             confidence_val = 0.0
    89:             logger.warning(f"[Classifier] 信心值轉換失敗：{confidence}")
    90: 
    91:         logger.info(f"[Classifier] 分類為：{label}（信心值：{confidence_val:.4f}）")
    92: 
    93:         data.update({"label": label, "predicted_label": label, "confidence": round(confidence_val, 4)})
    94:         write_classification_result(data, input_path)
    95: 
    96:         try:
    97:             route_action(
    98:                 label,
    99:                 {
   100:                     "subject": subject,
   101:                     "body": body,
   102:                     "sender": sender,
   103:                     "summary": data.get("summary", ""),
   104:                     "predicted_label": label,
   105:                     "confidence": confidence_val,
   106:                 },
   107:             )
   108:             logger.info(f"[Action] 任務執行完成：{label}")
   109:             write_log(subject, body, sender, label, "success", confidence=confidence_val)
   110:         except Exception as action_err:
   111:             logger.error(f"[Action] 任務執行失敗：{action_err}")
   112:             write_log(
   113:                 subject,
   114:                 body,
   115:                 sender,
   116:                 label,
   117:                 f"action_error: {action_err}",
   118:                 confidence=confidence_val,
   119:             )
   120: 
   121:     except Exception as e:
   122:         logger.error(f"[Pipeline] 處理流程發生例外錯誤：{e}")
   123:         write_log(subject, body, sender, "Error", f"exception: {str(e)}", confidence=0.0)
   124: 
   125: 
   126: if __name__ == "__main__":
   127:     main()
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/email_processor.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/inference_classifier.py  (5649 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/inference_classifier.py
     3: # 模組用途：繁體郵件意圖分類與內容摘要推論（支援本地訓練模型與中文 summarizer）
     4: import argparse
     5: import json
     6: import os
     7: 
     8: import torch
     9: from dotenv import load_dotenv
    10: from transformers import (
    11:     AutoModelForSeq2SeqLM,
    12:     AutoModelForSequenceClassification,
    13:     AutoTokenizer,
    14:     pipeline,
    15: )
    16: 
    17: from utils.logger import logger
    18: 
    19: load_dotenv()
    20: 
    21: # 預設模型設定
    22: DEFAULT_CLASSIFIER_PATH = os.getenv("CLASSIFIER_PATH", "model/roberta-zh-checkpoint")
    23: DEFAULT_SUMMARIZER = os.getenv("SUMMARIZER_MODEL", "uer/pegasus-base-chinese-cluecorpussmall")
    24: 
    25: 
    26: def load_model(model_path: str):
    27:     """載入意圖分類模型（分類器）"""
    28:     if not os.path.exists(model_path):
    29:         raise FileNotFoundError(f"找不到分類模型路徑：{model_path}")
    30:     tokenizer = AutoTokenizer.from_pretrained(model_path, local_files_only=True)
    31:     model = AutoModelForSequenceClassification.from_pretrained(model_path, local_files_only=True)
    32: 
    33:     if not hasattr(model.config, "id2label") or not isinstance(model.config.id2label, dict):
    34:         logger.warning("模型缺少 id2label，預設為 0~N")
    35:         model.config.id2label = {i: str(i) for i in range(model.config.num_labels)}
    36:         model.config.label2id = {v: k for k, v in model.config.id2label.items()}
    37: 
    38:     return tokenizer, model
    39: 
    40: 
    41: def load_summarizer(name: str = DEFAULT_SUMMARIZER):
    42:     """載入摘要模型（Summarizer）"""
    43:     try:
    44:         tokenizer = AutoTokenizer.from_pretrained(name)
    45:         model = AutoModelForSeq2SeqLM.from_pretrained(name)
    46:         return pipeline("summarization", model=model, tokenizer=tokenizer)
    47:     except Exception as e:
    48:         logger.warning(f"[Summarizer] 載入失敗：{e}")
    49:         return None
    50: 
    51: 
    52: def smart_truncate(text: str, max_chars: int = 1000) -> str:
    53:     """智慧截斷長文本，避免超過模型長度限制"""
    54:     if len(text) <= max_chars:
    55:         return text
    56:     head = text[: int(max_chars * 0.4)]
    57:     mid_start = int(len(text) / 2 - max_chars * 0.15)
    58:     mid_end = int(len(text) / 2 + max_chars * 0.15)
    59:     middle = text[mid_start:mid_end]
    60:     tail = text[-int(max_chars * 0.3) :]
    61:     return head + "\n...\n" + middle + "\n...\n" + tail
    62: 
    63: 
    64: def classify(text: str, tokenizer, model) -> tuple:
    65:     """執行分類推論，回傳 (label, confidence)"""
    66:     text = smart_truncate(text)
    67:     inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=512)
    68:     inputs = {k: v.to(model.device) for k, v in inputs.items()}
    69:     with torch.no_grad():
    70:         outputs = model(**inputs)
    71:         logits = outputs.logits
    72:         probs = torch.nn.functional.softmax(logits, dim=1)[0]
    73:         confidence, pred_idx = torch.max(probs, dim=0)
    74:         label = model.config.id2label.get(pred_idx.item(), "unknown")
    75:         return label, float(confidence)
    76: 
    77: 
    78: def summarize(text: str, summarizer) -> str:
    79:     """使用摘要模型產生總結內容"""
    80:     try:
    81:         result = summarizer(text, max_length=48, min_length=8, do_sample=False)
    82:         return result[0]["summary_text"]
    83:     except Exception as e:
    84:         logger.warning(f"[Summarize] 摘要失敗：{e}")
    85:         return ""
    86: 
    87: 
    88: def classify_intent(subject: str, content: str) -> dict:
    89:     """
    90:     給定主旨與內文，執行意圖分類推論
    91: 
    92:     回傳:
    93:         {
    94:             "label": 分類標籤,
    95:             "confidence": 預測信心值 (0~1)
    96:         }
    97:     """
    98:     try:
    99:         text = f"{subject.strip()}\n{content.strip()}"
   100:         tokenizer, model = load_model(DEFAULT_CLASSIFIER_PATH)
   101:         device = "cuda" if torch.cuda.is_available() else "cpu"
   102:         model.to(device)
   103:         label, confidence = classify(text, tokenizer, model)
   104:         return {"label": label, "confidence": round(confidence, 4)}
   105:     except Exception as e:
   106:         logger.error(f"[IntentClassifier] 推論失敗：{e}")
   107:         return {"label": "unknown", "confidence": 0.0}
   108: 
   109: 
   110: def main():
   111:     parser = argparse.ArgumentParser(description="繁體郵件分類與摘要工具")
   112:     parser.add_argument("--input", required=True, help="輸入 JSON 信件檔案")
   113:     parser.add_argument("--output", required=True, help="輸出分類結果 JSON 檔案")
   114:     args = parser.parse_args()
   115: 
   116:     input_path = args.input
   117:     output_path = args.output
   118: 
   119:     if not os.path.exists(input_path):
   120:         logger.error(f"[Input] 找不到輸入檔案：{input_path}")
   121:         return
   122: 
   123:     with open(input_path, encoding="utf-8") as f:
   124:         data = json.load(f)
   125: 
   126:     subject = data.get("subject", "").strip()
   127:     content = data.get("content", "").strip()
   128:     text = f"{subject}\n{content}"
   129: 
   130:     try:
   131:         tokenizer, model = load_model(DEFAULT_CLASSIFIER_PATH)
   132:         model.to("cuda" if torch.cuda.is_available() else "cpu")
   133:         label, score = classify(text, tokenizer, model)
   134:     except Exception as e:
   135:         logger.error(f"[Classifier] 分類錯誤：{e}")
   136:         label, score = "unknown", 0.0
   137: 
   138:     try:
   139:         summarizer = load_summarizer()
   140:         summary = summarize(text, summarizer) if summarizer else ""
   141:     except Exception as e:
   142:         logger.warning(f"[Summarizer] 摘要跳過：{e}")
   143:         summary = ""
   144: 
   145:     result = {
   146:         "subject": subject,
   147:         "content": content,
   148:         "label": label,
   149:         "confidence": round(score, 4),
   150:         "summary": summary,
   151:     }
   152: 
   153:     os.makedirs(os.path.dirname(output_path), exist_ok=True)
   154:     with open(output_path, "w", encoding="utf-8") as f:
   155:         json.dump(result, f, ensure_ascii=False, indent=2)
   156: 
   157:     logger.info(f"[Output] 分類完成：{label}（信心值：{score:.4f}） ➜ {output_path}")
   158: 
   159: 
   160: if __name__ == "__main__":
   161:     main()
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/inference_classifier.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/log_writer.py  (3851 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: #!/usr/bin/env python3
     4: # 檔案位置：src/log_writer.py
     5: # 模組用途：統一寫入 emails_log.db 的工具（企業級欄位與穩定介面）
     6: import logging
     7: import sqlite3
     8: from datetime import datetime, timezone
     9: from pathlib import Path
    10: 
    11: # 統一日誌格式
    12: logger = logging.getLogger("log_writer")
    13: if not logger.handlers:
    14:     logging.basicConfig(
    15:         level=logging.INFO,
    16:         format="%(asctime)s [%(levelname)s] [log_writer] %(message)s",
    17:     )
    18: 
    19: ROOT = Path(__file__).resolve().parents[1]
    20: DB_PATH = ROOT / "data" / "emails_log.db"
    21: 
    22: 
    23: def _ensure_schema(conn: sqlite3.Connection) -> None:
    24:     """建立 emails_log 資料表（若不存在）。"""
    25:     conn.execute(
    26:         """
    27:         CREATE TABLE IF NOT EXISTS emails_log (
    28:             id INTEGER PRIMARY KEY AUTOINCREMENT,
    29:             subject TEXT,
    30:             content TEXT,
    31:             summary TEXT,
    32:             predicted_label TEXT,
    33:             confidence REAL,
    34:             action TEXT,
    35:             error TEXT,
    36:             created_at TEXT
    37:         )
    38:         """
    39:     )
    40:     conn.commit()
    41: 
    42: 
    43: def log_to_db(
    44:     subject: str,
    45:     content: str = "",
    46:     summary: str = "",
    47:     predicted_label: str | None = None,
    48:     confidence: float | None = None,
    49:     action: str = "",
    50:     error: str = "",
    51:     db_path: Path | None = None,
    52: ) -> int:
    53:     """寫入一筆處理紀錄到 emails_log.db。
    54: 
    55:     參數：
    56:         subject: 題目/主旨
    57:         content: 內文（可省略）
    58:         summary: 摘要（可省略）
    59:         predicted_label: 預測分類（可省略）
    60:         confidence: 信心值（可省略）
    61:         action: 採取動作（可省略）
    62:         error: 錯誤訊息（可省略）
    63:         db_path: 自訂 DB 路徑（測試用）
    64: 
    65:     回傳：
    66:         新增記錄的 rowid（int）
    67:     """
    68:     path = Path(db_path) if db_path else DB_PATH
    69:     path.parent.mkdir(parents=True, exist_ok=True)
    70: 
    71:     conn = sqlite3.connect(str(path))
    72:     try:
    73:         _ensure_schema(conn)
    74:         cur = conn.execute(
    75:             """
    76:             INSERT INTO emails_log (
    77:                 subject, content, summary, predicted_label,
    78:                 confidence, action, error, created_at
    79:             ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    80:             """,
    81:             (
    82:                 subject,
    83:                 content,
    84:                 summary,
    85:                 predicted_label,
    86:                 float(confidence) if confidence is not None else None,
    87:                 action,
    88:                 error,
    89:                 datetime.now(timezone.utc).isoformat(),
    90:             ),
    91:         )
    92:         conn.commit()
    93:         rowid = int(cur.lastrowid or 0)
    94:         logger.info(
    95:             "已記錄：%s / %s / 信心 %s",
    96:             predicted_label or "-",
    97:             action or "-",
    98:             f"{confidence:.4f}" if confidence is not None else "-",
    99:         )
   100:         return rowid
   101:     finally:
   102:         conn.close()
   103: 
   104: 
   105: if __name__ == "__main__":
   106:     # 提供簡易 CLI：python -m src.log_writer "主旨" --label "分類"
   107:     import argparse
   108: 
   109:     parser = argparse.ArgumentParser()
   110:     parser.add_argument("subject", help="主旨")
   111:     parser.add_argument("--content", default="", help="內文")
   112:     parser.add_argument("--summary", default="", help="摘要")
   113:     parser.add_argument("--label", dest="predicted_label", default=None, help="分類")
   114:     parser.add_argument("--confidence", type=float, default=None, help="信心值")
   115:     parser.add_argument("--action", default="", help="動作")
   116:     parser.add_argument("--error", default="", help="錯誤訊息")
   117:     args = parser.parse_args()
   118: 
   119:     log_to_db(
   120:         subject=args.subject,
   121:         content=args.content,
   122:         summary=args.summary,
   123:         predicted_label=args.predicted_label,
   124:         confidence=args.confidence,
   125:         action=args.action,
   126:         error=args.error,
   127:     )
   128:     print("[OK] 已寫入 emails_log")
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/log_writer.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/modules/leads_logger.py  (2525 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/modules/leads_logger.py
     3: # 模組用途：記錄潛在客戶 leads 資訊至 leads.db，供日後分析與轉換率追蹤
     4: 
     5: import sqlite3
     6: from datetime import datetime
     7: from pathlib import Path
     8: 
     9: from utils.logger import logger
    10: 
    11: DB_PATH = Path("data/leads.db")
    12: TABLE_NAME = "leads"
    13: 
    14: 
    15: def ensure_db() -> None:
    16:     """
    17:     確保 leads 資料表存在，如無則自動建立。
    18: 
    19:     表格欄位：
    20:         - id: 自動編號主鍵
    21:         - email: 客戶信箱（必填）
    22:         - company: 公司名稱（選填）
    23:         - package: 詢問的方案名稱
    24:         - created_at: UTC 時間戳記
    25:         - source: 資料來源（如 email / web）
    26:         - pdf_path: 報價單 PDF 檔案路徑
    27:     """
    28:     try:
    29:         DB_PATH.parent.mkdir(parents=True, exist_ok=True)
    30:         with sqlite3.connect(DB_PATH) as conn:
    31:             cursor = conn.cursor()
    32:             cursor.execute(
    33:                 f"""
    34:                 CREATE TABLE IF NOT EXISTS {TABLE_NAME} (
    35:                     id INTEGER PRIMARY KEY AUTOINCREMENT,
    36:                     email TEXT NOT NULL,
    37:                     company TEXT,
    38:                     package TEXT,
    39:                     created_at TEXT,
    40:                     source TEXT,
    41:                     pdf_path TEXT
    42:                 )
    43:             """
    44:             )
    45:             conn.commit()
    46:     except Exception as e:
    47:         logger.warning(f"[leads_logger] 建立資料表失敗：{e}")
    48: 
    49: 
    50: def log_lead(email: str, package: str, pdf_path: str = "", company: str = "", source: str = "email") -> None:
    51:     """
    52:     寫入一筆 leads 記錄至 SQLite。
    53: 
    54:     參數:
    55:         email (str): 客戶信箱（必填）
    56:         package (str): 詢問的方案名稱
    57:         pdf_path (str): 附檔報價單 PDF 路徑（可選）
    58:         company (str): 公司名稱（可選）
    59:         source (str): 資料來源（預設為 'email'）
    60:     """
    61:     try:
    62:         ensure_db()
    63:         now = datetime.utcnow().isoformat()
    64:         with sqlite3.connect(DB_PATH) as conn:
    65:             cursor = conn.cursor()
    66:             cursor.execute(
    67:                 f"""
    68:                 INSERT INTO {TABLE_NAME} (email, company, package, created_at, source, pdf_path)
    69:                 VALUES (?, ?, ?, ?, ?, ?)
    70:             """,
    71:                 (email, company, package, now, source, pdf_path),
    72:             )
    73:             conn.commit()
    74:         logger.info(f"[leads_logger] 已記錄 leads：{email} / {package}")
    75:     except Exception as e:
    76:         logger.warning(f"[leads_logger] 寫入 leads 失敗：{e}")
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/modules/leads_logger.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/patches/handle_router_patch.py  (965 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: # -*- coding: utf-8 -*-
     4: import importlib
     5: from typing import Any
     6: 
     7: _ALIASES = {
     8:     "business_inquiry": "sales_inquiry",
     9:     "sales": "sales_inquiry",
    10:     "complain": "complaint",
    11: }
    12: 
    13: 
    14: def _normalize(label: str) -> str:
    15:     return _ALIASES.get(label, label)
    16: 
    17: 
    18: def _get_orig():
    19:     mod = importlib.import_module("action_handler")
    20:     return getattr(mod, "_orig_handle", None)
    21: 
    22: 
    23: def handle(req: dict[str, Any]) -> dict[str, Any]:
    24:     label = (req.get("predicted_label") or "").strip().lower()
    25:     label = _normalize(label)
    26:     req["predicted_label"] = label
    27: 
    28:     if label == "sales_inquiry":
    29:         return importlib.import_module("actions.sales_inquiry").handle(req)
    30:     if label == "complaint":
    31:         return importlib.import_module("actions.complaint").handle(req)
    32: 
    33:     orig = _get_orig()
    34:     if callable(orig):
    35:         return orig(req)
    36:     return {"ok": True, "action": "reply_general", "subject": "[自動回覆] 一般諮詢"}
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/patches/handle_router_patch.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/patches/handle_safe_patch.py  (1513 bytes)
TAGS: legacy_candidate=no | sys_path_hack=yes | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import os
     4: import sys
     5: 
     6: # -*- coding: utf-8 -*-
     7: from pathlib import Path
     8: from typing import Any
     9: 
    10: BASE = Path(__file__).resolve().parents[1]
    11: for p in (BASE, BASE.parent):
    12:     sp = str(p)
    13:     if sp not in sys.path:
    14:         sys.path.insert(0, sp)
    15: 
    16: try:
    17:     from action_handler import handle as _orig_handle  # type: ignore
    18: except Exception:
    19:     from src.action_handler import handle as _orig_handle  # type: ignore
    20: 
    21: try:
    22:     from utils.pdf_safe import write_pdf_or_txt
    23: except Exception:
    24:     from utils.pdf_safe import write_pdf_or_txt  # type: ignore
    25: 
    26: 
    27: def _attachments_ok(att_list: list[str] | None) -> bool:
    28:     if not att_list:
    29:         return False
    30:     for a in att_list:
    31:         p = Path(a)
    32:         if not (p.exists() and p.stat().st_size > 0):
    33:             return False
    34:     return True
    35: 
    36: 
    37: def handle(payload: dict[str, Any]) -> dict[str, Any]:
    38:     os.environ.setdefault("OFFLINE", "1")
    39:     res = _orig_handle(payload)
    40:     if (res or {}).get("action") == "send_quote":
    41:         atts = res.get("attachments") or []
    42:         if not _attachments_ok(atts):
    43:             subject = res.get("subject") or payload.get("subject", "報價")
    44:             content = payload.get("content", "")
    45:             lines = [f"主旨: {subject}", f"內容: {content}"]
    46:             p = write_pdf_or_txt(lines, basename="attachment")
    47:             res["attachments"] = [str(p)]
    48:             if isinstance(res.get("mailer"), dict):
    49:                 res["mailer"]["attachments"] = res["attachments"]
    50:     return res
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/patches/handle_safe_patch.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/run_action_handler.py  (6368 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: #!/usr/bin/env python3
     4: import argparse
     5: import json
     6: import re
     7: import sys
     8: import time
     9: import uuid
    10: from pathlib import Path
    11: from typing import Any
    12: 
    13: 
    14: def _read_json(p: str | Path) -> dict[str, Any]:
    15:     with open(p, encoding="utf-8") as f:
    16:         return json.load(f)
    17: 
    18: 
    19: def _write_json(p: str | Path, obj: dict[str, Any]) -> None:
    20:     with open(p, "w", encoding="utf-8") as f:
    21:         json.dump(obj, f, ensure_ascii=False, indent=2)
    22: 
    23: 
    24: def _req_id() -> str:
    25:     return uuid.uuid4().hex[:12]
    26: 
    27: 
    28: def _domain(addr: str) -> str:
    29:     m = re.search(r"@([^>]+)$", addr or "")
    30:     return (m.group(1).strip().lower() if m else "").strip()
    31: 
    32: 
    33: def decide_action(pred: str | None) -> str:
    34:     mapping = {
    35:         "reply_faq": "reply_faq",
    36:         "send_quote": "send_quote",
    37:         "sales_inquiry": "sales_inquiry",
    38:         "complaint": "complaint",
    39:         "other": "reply_general",
    40:     }
    41:     return mapping.get((pred or "").strip().lower(), "reply_general")
    42: 
    43: 
    44: def build_response(obj: dict[str, Any], simulate_failure: str | None, dry_run: bool) -> dict[str, Any]:
    45:     rid = _req_id()
    46:     pred = obj.get("predicted_label")
    47:     action = decide_action(pred)
    48:     attachments: list[dict[str, Any]] = []
    49:     subject = "[自動回覆] 通知"
    50:     body = "處理完成。"
    51:     meta: dict[str, Any] = {"request_id": rid, "dry_run": dry_run, "duration_ms": 0}
    52: 
    53:     # 策略：附件超限 -> require_review + CC support
    54:     max_bytes = 5 * 1024 * 1024
    55:     atts = obj.get("attachments") or []
    56:     if any((a or {}).get("size", 0) > max_bytes for a in atts):
    57:         meta["require_review"] = True
    58:         meta["cc"] = ["support@company.example"]
    59: 
    60:     # 白名單網域
    61:     if _domain(obj.get("from", "")) == "trusted.example":
    62:         meta["whitelisted"] = True
    63: 
    64:     # 各 action 輸出
    65:     if action == "reply_faq":
    66:         subject = "[自動回覆] FAQ 回覆"
    67:         body = "以下為常見問題回覆與說明。"
    68:     elif action == "send_quote":
    69:         subject = "[自動回覆] 報價說明"
    70:         body = "您好，這是報價附件與說明。"
    71:         if simulate_failure:  # 只要帶了 simulate-failure 就走文字備援
    72:             meta["simulate_failure"] = simulate_failure
    73:             content = "PDF 生成失敗，附上文字版報價說明。"
    74:             attachments.append({"filename": "quote_fallback.txt", "size": len(content.encode("utf-8"))})
    75:     elif action == "sales_inquiry":
    76:         subject = "[自動回覆] 商務詢問回覆"
    77:         body = "我們已收到您的商務詢問，附件為需求摘要，稍後由業務與您聯繫。"
    78:         meta["next_step"] = "安排需求澄清會議並由業務跟進"
    79:         md = f"# 商務詢問摘要（{rid}）\n\n- 來信主旨：{obj.get('subject', '')}\n- 來信者：{obj.get('from', '')}\n- 內文：\n{obj.get('body', '')}\n"
    80:         attachments.append({"filename": f"needs_summary_{rid}.md", "size": len(md.encode("utf-8"))})
    81:     elif action == "complaint":
    82:         subject = "[自動回覆] 投訴受理通知"
    83:         body = "我們已受理您的意見，內部將儘速處理。"
    84:         text = (obj.get("body") or "") + " " + (obj.get("subject") or "")
    85:         if re.search(r"down|宕機|無法使用|嚴重|故障", text, flags=re.I):
    86:             meta["priority"] = "P1"
    87:             meta["SLA_eta"] = "4h"
    88:             meta["cc"] = sorted(set((meta.get("cc") or []) + ["ops@company.example", "qa@company.example"]))
    89: 
    90:     out = {
    91:         "action_name": action,
    92:         "subject": subject,
    93:         "body": body,
    94:         "attachments": attachments,
    95:         "meta": meta,
    96:     }
    97:     return out
    98: 
    99: 
   100: def main() -> int:
   101:     ap = argparse.ArgumentParser()
   102:     ap.add_argument("--input", required=True)
   103:     ap.add_argument("--output", required=True)
   104:     ap.add_argument("--dry-run", dest="dry_run", action="store_true")
   105:     # 舊版不帶值、新版可帶值；兩者皆收，預設 const="pdf"
   106:     ap.add_argument("--simulate-failure", nargs="?", const="pdf", default=None)
   107:     args = ap.parse_args()
   108: 
   109:     obj = _read_json(args.input)
   110:     t0 = time.time()
   111:     out = build_response(obj, args.simulate_failure, args.dry_run)
   112:     out["meta"]["duration_ms"] = int((time.time() - t0) * 1000)
   113: 
   114:     _write_json(args.output, out)
   115:     print("CLI_output_written", file=sys.stderr)
   116:     print(f"已輸出：{args.output}")
   117:     return 0
   118: 
   119: 
   120: # [PATCH] top-level dry_run atexit
   121: try:
   122:     import argparse as _arg
   123:     import atexit
   124:     import json
   125:     from pathlib import Path as _P
   126: 
   127:     _p = _arg.ArgumentParser(add_help=False)
   128:     _p.add_argument("--output")
   129:     _p.add_argument("--dry-run", action="store_true")
   130:     _args, _ = _p.parse_known_args()
   131: 
   132:     def _enforce_top_level_dry_run():
   133:         try:
   134:             if _args and _args.output:
   135:                 _out = _P(_args.output)
   136:                 if _out.exists():
   137:                     _d = json.loads(_out.read_text(encoding="utf-8"))
   138:                     if _args.dry_run and not _d.get("dry_run", False):
   139:                         _d["dry_run"] = True
   140:                         _out.write_text(json.dumps(_d, ensure_ascii=False), encoding="utf-8")
   141:         except Exception:
   142:             pass  # 後處理失敗不影響主流程
   143: 
   144:     atexit.register(_enforce_top_level_dry_run)
   145: except Exception:
   146:     pass
   147: 
   148: # [PATCH] ensure complaint P1 next_step atexit
   149: try:
   150:     import argparse as _arg2
   151:     import atexit as _ax2
   152:     import json as _j2
   153:     from pathlib import Path as _P2
   154: 
   155:     _p2 = _arg2.ArgumentParser(add_help=False)
   156:     _p2.add_argument("--output")
   157:     _a2, _ = _p2.parse_known_args()
   158: 
   159:     def _ensure_p1_next_step():
   160:         try:
   161:             if _a2 and _a2.output:
   162:                 _out = _P2(_a2.output)
   163:                 if _out.exists():
   164:                     _d = _j2.loads(_out.read_text(encoding="utf-8"))
   165:                     _meta = _d.get("meta") or {}
   166:                     if _d.get("action_name") == "complaint" and isinstance(_meta, dict) and _meta.get("priority") == "P1" and not _meta.get("next_step"):
   167:                         _meta["next_step"] = "啟動P1流程：建立 incident/bridge，通知 OPS/QA，SLA 4h 內回覆客戶"
   168:                         _d["meta"] = _meta
   169:                         _out.write_text(_j2.dumps(_d, ensure_ascii=False, indent=2), encoding="utf-8")
   170:         except Exception:
   171:             pass
   172: 
   173:     _ax2.register(_ensure_p1_next_step)
   174: except Exception:
   175:     pass
   176: 
   177: 
   178: if __name__ == "__main__":
   179:     sys.exit(main())
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/run_action_handler.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/send_with_attachment.py  (4189 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置：src/send_with_attachment.py
     3: # 模組用途：寄送 Email（支援 HTML 內文、附件、錯誤處理、環境參數與 log 紀錄）
     4: import argparse
     5: import os
     6: import smtplib
     7: import traceback
     8: from email.mime.application import MIMEApplication
     9: from email.mime.multipart import MIMEMultipart
    10: from email.mime.text import MIMEText
    11: from pathlib import Path
    12: 
    13: from dotenv import load_dotenv
    14: from reportlab.pdfgen import canvas
    15: 
    16: from utils.logger import logger
    17: 
    18: # 強制指定 .env 位置
    19: load_dotenv(dotenv_path=Path(__file__).resolve().parents[1] / ".env")
    20: 
    21: # === SMTP 設定參數（需於 .env 中設定）===
    22: SMTP_USER = os.getenv("SMTP_USER")
    23: SMTP_PASS = os.getenv("SMTP_PASS")
    24: SMTP_HOST = os.getenv("SMTP_HOST", "smtp.gmail.com")
    25: SMTP_PORT = int(os.getenv("SMTP_PORT", 465))
    26: SMTP_FROM = os.getenv("SMTP_FROM", f"Smart-Mail-Agent <{SMTP_USER}>")
    27: REPLY_TO = os.getenv("REPLY_TO", SMTP_USER)
    28: 
    29: 
    30: # === 驗證 SMTP 參數 ===
    31: def validate_smtp_config():
    32:     missing = []
    33:     for key in ["SMTP_USER", "SMTP_PASS", "SMTP_HOST", "SMTP_PORT"]:
    34:         if not os.getenv(key):
    35:             missing.append(key)
    36:     if missing:
    37:         raise ValueError(f"[SMTP] 設定錯誤，缺少欄位：{', '.join(missing)}")
    38: 
    39: 
    40: # === 自動產 PDF（若不存在）===
    41: def generate_sample_pdf(filepath: str):
    42:     try:
    43:         c = canvas.Canvas(filepath)
    44:         c.drawString(100, 750, "這是一封測試郵件的附件 PDF")
    45:         c.save()
    46:         logger.info("[SMTP] 已產生測試 PDF：%s", filepath)
    47:     except Exception as e:
    48:         logger.error("[SMTP] PDF 建立失敗：%s", e)
    49: 
    50: 
    51: # === 主寄信函式 ===
    52: def send_email_with_attachment(
    53:     recipient: str,
    54:     subject: str,
    55:     body_html: str = None,
    56:     body_text: str = None,
    57:     attachment_path: str = None,
    58: ) -> bool:
    59:     try:
    60:         validate_smtp_config()
    61:     except Exception as e:
    62:         logger.error("[SMTP] 設定錯誤：%s", e)
    63:         return False
    64: 
    65:     msg = MIMEMultipart()
    66:     msg["From"] = SMTP_FROM
    67:     msg["To"] = recipient
    68:     msg["Subject"] = subject or "(No Subject)"
    69:     msg["Reply-To"] = REPLY_TO
    70: 
    71:     if body_text:
    72:         msg.attach(MIMEText(body_text, "plain", "utf-8"))
    73:     if body_html:
    74:         msg.attach(MIMEText(body_html, "html", "utf-8"))
    75: 
    76:     if attachment_path:
    77:         if not os.path.exists(attachment_path) and "sample.pdf" in attachment_path:
    78:             generate_sample_pdf(attachment_path)
    79:         if os.path.exists(attachment_path):
    80:             try:
    81:                 with open(attachment_path, "rb") as f:
    82:                     part = MIMEApplication(f.read(), Name=os.path.basename(attachment_path))
    83:                     part["Content-Disposition"] = f'attachment; filename="{os.path.basename(attachment_path)}"'
    84:                     msg.attach(part)
    85:                 logger.debug("[SMTP] 附件已加入：%s", attachment_path)
    86:             except Exception as e:
    87:                 logger.warning("[SMTP] 附件載入失敗：%s", e)
    88:         else:
    89:             logger.error("[SMTP] 找不到附件：%s", attachment_path)
    90:             return False
    91: 
    92:     try:
    93:         with smtplib.SMTP_SSL(SMTP_HOST, SMTP_PORT) as server:
    94:             server.login(SMTP_USER, SMTP_PASS)
    95:             server.send_message(msg)
    96:         logger.info("[SMTP] 信件已寄出：%s → %s", subject, recipient)
    97:         return True
    98: 
    99:     except Exception as e:
   100:         logger.error("[SMTP] 寄信失敗：%s", e)
   101:         logger.debug(traceback.format_exc())
   102:         return False
   103: 
   104: 
   105: # === CLI 執行介面 ===
   106: def main():
   107:     parser = argparse.ArgumentParser(description="寄送 Email，支援 HTML 內文與附件")
   108:     parser.add_argument("--to", required=True, help="收件者 Email")
   109:     parser.add_argument("--subject", required=True, help="郵件主旨")
   110:     parser.add_argument("--body", required=True, help="HTML 內文")
   111:     parser.add_argument("--file", required=True, help="附件檔案路徑")
   112: 
   113:     args = parser.parse_args()
   114: 
   115:     result = send_email_with_attachment(recipient=args.to, subject=args.subject, body_html=args.body, attachment_path=args.file)
   116: 
   117:     if result:
   118:         print("郵件已成功寄出")
   119:     else:
   120:         print("郵件寄出失敗")
   121: 
   122: 
   123: if __name__ == "__main__":
   124:     main()
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/send_with_attachment.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/__main__.py  (434 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: # 檔案位置: src/smart_mail_agent/__main__.py
     3: """
     4: 主進入點：轉呼叫現有專案的 src.run_action_handler 以維持相容。
     5: """
     6: 
     7: import subprocess
     8: import sys
     9: 
    10: 
    11: def main(argv=None) -> int:
    12:     argv = list(sys.argv[1:] if argv is None else argv)
    13:     cmd = [sys.executable, "-m", "src.run_action_handler", *argv]
    14:     return subprocess.call(cmd)
    15: 
    16: 
    17: if __name__ == "__main__":
    18:     raise SystemExit(main())
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/__main__.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/actions/complaint.py  (2183 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: import sys
     5: 
     6: #!/usr/bin/env python3
     7: # 檔案位置：src/actions/complaint.py
     8: # 模組用途：處理投訴；計算嚴重度並輸出 SLA_eta / priority / next_step
     9: import uuid
    10: from typing import Any
    11: 
    12: ACTION_NAME = "complaint"
    13: 
    14: HIGH_KW = [
    15:     "無法使用",
    16:     "系統當機",
    17:     "down",
    18:     "資料外洩",
    19:     "資安",
    20:     "違法",
    21:     "詐騙",
    22:     "嚴重",
    23:     "停機",
    24:     "崩潰",
    25:     "災難",
    26:     "退款失敗",
    27:     "威脅",
    28:     "主管機關",
    29: ]
    30: MED_KW = ["錯誤", "bug", "延遲", "慢", "異常", "問題", "不穩", "失敗"]
    31: LOW_KW = ["建議", "希望", "改善", "回饋", "詢問"]
    32: 
    33: 
    34: def _severity(text: str) -> str:
    35:     t = text.lower()
    36:     if any(k.lower() in t for k in HIGH_KW):
    37:         return "high"
    38:     if any(k.lower() in t for k in MED_KW):
    39:         return "med"
    40:     return "low"
    41: 
    42: 
    43: def _sla_priority(severity: str) -> tuple[str, str]:
    44:     if severity == "high":
    45:         return ("4h", "P1")
    46:     if severity == "med":
    47:         return ("1d", "P2")
    48:     return ("3d", "P3")
    49: 
    50: 
    51: def execute(request: dict[str, Any], context: dict[str, Any] | None = None) -> dict[str, Any]:
    52:     subject = str(request.get("subject") or "")
    53:     body = str(request.get("body") or "")
    54:     sev = _severity(subject + "\n" + body)
    55:     sla, pri = _sla_priority(sev)
    56:     req_id = (request.get("meta") or {}).get("request_id") or uuid.uuid4().hex[:12]
    57: 
    58:     meta = dict(request.get("meta") or {})
    59:     meta.update(
    60:         {
    61:             "severity": sev,
    62:             "SLA_eta": sla,
    63:             "priority": pri,
    64:             "request_id": req_id,
    65:             "next_step": "建立工單並通知負責窗口",
    66:         }
    67:     )
    68: 
    69:     return {
    70:         "action_name": ACTION_NAME,
    71:         "subject": "[自動回覆] 客訴已受理",
    72:         "body": f"我們已收到您的反映並建立處理流程。嚴重度：{sev}，優先級：{pri}，SLA：{sla}",
    73:         "attachments": request.get("attachments") or [],
    74:         "meta": meta,
    75:     }
    76: 
    77: 
    78: handle = execute
    79: run = execute
    80: 
    81: if __name__ == "__main__":
    82:     import json
    83:     import sys
    84: 
    85:     payload = json.loads(sys.stdin.read() or "{}")
    86:     print(json.dumps(execute(payload), ensure_ascii=False))
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/actions/complaint.py
================================================================================
================================================================================
BEGIN FILE  audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/actions/sales_inquiry.py  (6377 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: from __future__ import annotations
     2: 
     3: import json
     4: 
     5: #!/usr/bin/env python3
     6: # 檔案位置：src/actions/sales_inquiry.py
     7: # 模組用途：處理商務詢問；抽取關鍵欄位並以模板產出需求彙整 .md 附件；補充 meta.next_step
     8: import re
     9: import sys
    10: import uuid
    11: from datetime import datetime
    12: from pathlib import Path
    13: from typing import Any
    14: 
    15: try:
    16:     from jinja2 import Environment, FileSystemLoader, select_autoescape
    17: except Exception:
    18:     Environment = None  # type: ignore
    19: 
    20: ACTION_NAME = "sales_inquiry"
    21: 
    22: 
    23: def _ensure_dir(p: Path) -> None:
    24:     p.parent.mkdir(parents=True, exist_ok=True)
    25: 
    26: 
    27: def _load_template_env() -> Environment | None:
    28:     """
    29:     嘗試從 templates/ 與 src/templates/ 建立 Jinja2 環境
    30:     """
    31:     if Environment is None:
    32:         return None
    33:     search_paths: list[str] = []
    34:     for d in ("templates", "src/templates"):
    35:         if Path(d).is_dir():
    36:             search_paths.append(d)
    37:     if not search_paths:
    38:         return None
    39:     return Environment(
    40:         loader=FileSystemLoader(search_paths),
    41:         autoescape=select_autoescape(enabled_extensions=("j2", "html", "md")),
    42:         enable_async=False,
    43:     )
    44: 
    45: 
    46: # 規則式抽取：公司、數量、截止、預算、關鍵詞
    47: RE_COMPANY = re.compile(r"([A-Za-z\u4e00-\u9fa5][\w\u4e00-\u9fa5＆&\.-]{1,30})(?:股份有限公司|有限公司|公司)", re.I)
    48: RE_QUANTITY = re.compile(r"(\d{1,6})\s*(台|件|個|套|pcs?)", re.I)
    49: RE_BUDGET = re.compile(r"(?:NTD?|新台幣|\$)\s*([0-9][0-9,]{0,12})(?:\s*(萬|千|元|dollars?))?", re.I)
    50: RE_DATE1 = re.compile(r"(\d{4})[-/](\d{1,2})[-/](\d{1,2})")  # YYYY-MM-DD
    51: RE_DATE2 = re.compile(r"(\d{1,2})[月/](\d{1,2})[日]?", re.I)  # M月D日 or M/D
    52: RE_KEYWORDS = re.compile(r"[A-Za-z\u4e00-\u9fa5]{2,15}")
    53: 
    54: COMMON_STOP = {
    55:     "我們",
    56:     "你好",
    57:     "您好",
    58:     "謝謝",
    59:     "請問",
    60:     "協助",
    61:     "需要",
    62:     "希望",
    63:     "聯繫",
    64:     "安排",
    65:     "報價",
    66:     "需求",
    67:     "規格",
    68:     "提供",
    69: }
    70: 
    71: 
    72: def _extract_fields(subject: str, body: str, sender: str | None) -> dict[str, Any]:
    73:     text = f"{subject}\n{body}"
    74:     company = None
    75:     m = RE_COMPANY.search(text)
    76:     if m:
    77:         company = m.group(0)
    78: 
    79:     quantity = None
    80:     m = RE_QUANTITY.search(text)
    81:     if m:
    82:         quantity = f"{m.group(1)}{m.group(2)}"
    83: 
    84:     budget = None
    85:     m = RE_BUDGET.search(text)
    86:     if m:
    87:         money = m.group(1).replace(",", "")
    88:         unit = m.group(2) or "元"
    89:         budget = f"{money}{unit}"
    90: 
    91:     deadline = None
    92:     m = RE_DATE1.search(text)
    93:     if m:
    94:         yyyy, mm, dd = m.groups()
    95:         deadline = f"{yyyy}-{int(mm):02d}-{int(dd):02d}"
    96:     else:
    97:         m = RE_DATE2.search(text)
    98:         if m:
    99:             # 以當年補齊
   100:             year = datetime.now().year
   101:             mm, dd = m.groups()
   102:             deadline = f"{year}-{int(mm):02d}-{int(dd):02d}"
   103: 
   104:     kw_raw = [w for w in RE_KEYWORDS.findall(text) if w not in COMMON_STOP]
   105:     keywords = []
   106:     seen = set()
   107:     for w in kw_raw:
   108:         if w.lower() in seen:
   109:             continue
   110:         seen.add(w.lower())
   111:         keywords.append(w)
   112:         if len(keywords) >= 8:
   113:             break
   114: 
   115:     contact = None
   116:     if sender and "@" in sender:
   117:         contact = sender.split("@", 1)[0]
   118: 
   119:     summary = subject.strip()[:120]
   120: 
   121:     return {
   122:         "company": company,
   123:         "quantity": quantity,
   124:         "deadline": deadline,
   125:         "budget": budget,
   126:         "keywords": keywords,
   127:         "contact": contact,
   128:         "summary": summary,
   129:     }
   130: 
   131: 
   132: def _render_needs_md(context: dict[str, Any]) -> str:
   133:     env = _load_template_env()
   134:     if env:
   135:         try:
   136:             tpl = env.get_template("needs_summary.md.j2")
   137:             return tpl.render(**context)
   138:         except Exception:
   139:             pass
   140:     # 簡單回退
   141:     ks = ", ".join(context.get("keywords") or [])
   142:     return (
   143:         "# 商務需求彙整\n\n"
   144:         f"- 公司：{context.get('company') or '未明'}\n"
   145:         f"- 聯絡人：{context.get('contact') or '未明'}\n"
   146:         f"- 需求摘要：{context.get('summary') or '未提供'}\n\n"
   147:         "## 關鍵欄位\n"
   148:         f"- 數量：{context.get('quantity') or '未明'}\n"
   149:         f"- 截止：{context.get('deadline') or '未明'}\n"
   150:         f"- 預算：{context.get('budget') or '未明'}\n"
   151:         f"- 關鍵字：{ks or '無'}\n\n"
   152:         "## 建議下一步\n"
   153:         "1. 由業務與對方確認功能範圍與驗收標準\n"
   154:         "2. 安排需求澄清會議並產出會議紀要\n"
   155:         "3. 依會議結論繪製最小可行方案並給出時程與成本\n"
   156:     )
   157: 
   158: 
   159: def execute(request: dict[str, Any], context: dict[str, Any] | None = None) -> dict[str, Any]:
   160:     """
   161:     參數:
   162:         request: 輸入 JSON（subject/from/body/predicted_label/confidence/attachments）
   163:         context: 可選上下文
   164:     回傳:
   165:         ActionResult dict：含 .md 附件與 meta.next_step
   166:     """
   167:     subject = str(request.get("subject") or "").strip()
   168:     body = str(request.get("body") or "").strip()
   169:     sender = request.get("from")
   170: 
   171:     req_id = (request.get("meta") or {}).get("request_id") or uuid.uuid4().hex[:12]
   172:     fields = _extract_fields(subject, body, sender)
   173:     md_text = _render_needs_md(fields)
   174: 
   175:     out_dir = Path("data/output")
   176:     _ensure_dir(out_dir)
   177:     md_name = f"needs_summary_{req_id}.md"
   178:     md_path = out_dir / md_name
   179:     md_path.write_text(md_text, encoding="utf-8")
   180: 
   181:     attachments = request.get("attachments") or []
   182:     attachments = list(attachments)
   183:     try:
   184:         size = md_path.stat().st_size
   185:     except Exception:
   186:         size = len(md_text.encode("utf-8"))
   187: 
   188:     attachments.append({"filename": md_name, "size": size})
   189: 
   190:     meta = dict(request.get("meta") or {})
   191:     meta.update(
   192:         {
   193:             "next_step": "安排需求澄清會議並由業務跟進",
   194:             "confidence": request.get("confidence"),
   195:             "request_id": req_id,
   196:         }
   197:     )
   198: 
   199:     return {
   200:         "action_name": ACTION_NAME,
   201:         "subject": "[自動回覆] 商務詢問回覆",
   202:         "body": "您好，已收到您的商務需求，附件為彙整內容，將由業務與您聯繫確認細節。",
   203:         "attachments": attachments,
   204:         "meta": meta,
   205:     }
   206: 
   207: 
   208: # 兼容不同呼叫名稱
   209: handle = execute
   210: run = execute
   211: 
   212: if __name__ == "__main__":
   213:     import json
   214:     import sys
   215: 
   216:     payload = json.loads(sys.stdin.read() or "{}")
   217:     print(json.dumps(execute(payload), ensure_ascii=False))
--------------------------------------------------------------------------------
END FILE    audit_bundle_20250816-130133/src_lowcov/src_lowcov/src/smart_mail_agent/actions/sales_inquiry.py
================================================================================
