================================================================================
BEGIN FILE  tmp/spam_snapshot_20250817_011451.txt  (12911 bytes)
TAGS: legacy_candidate=yes | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: === PYTHON & PYTEST ===
     2: 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
     3: pytest 8.4.1
     4: 
     5: === TREE (depth<=3) ===
     6: ./src/__init__.py
     7: ./src/action_handler.py
     8: ./src/classifier.py
     9: ./src/email_processor.py
    10: ./src/inference_classifier.py
    11: ./src/init_db.py
    12: ./src/log_writer.py
    13: ./src/modules/__init__.py
    14: ./src/modules/apply_diff.py
    15: ./src/modules/leads_logger.py
    16: ./src/modules/quotation.py
    17: ./src/modules/quote_logger.py
    18: ./src/modules/sales_notifier.py
    19: ./src/patches/handle_router_patch.py
    20: ./src/patches/handle_safe_patch.py
    21: ./src/policy_engine.py
    22: ./src/requirements.txt
    23: ./src/run_action_handler.py
    24: ./src/send_with_attachment.py
    25: ./src/sma_types.py
    26: ./src/smart_mail_agent/__init__.py
    27: ./src/smart_mail_agent/__main__.py
    28: ./src/smart_mail_agent/__version__.py
    29: ./src/smart_mail_agent/actions/__init__.py
    30: ./src/smart_mail_agent/actions/complaint.py
    31: ./src/smart_mail_agent/actions/sales_inquiry.py
    32: ./src/smart_mail_agent/cli/sma.py
    33: ./src/smart_mail_agent/cli/sma_run.py
    34: ./src/smart_mail_agent/cli/sma_spamcheck.py
    35: ./src/smart_mail_agent/cli_spamcheck.py
    36: ./src/smart_mail_agent/core/classifier.py
    37: ./src/smart_mail_agent/core/policy_engine.py
    38: ./src/smart_mail_agent/core/sma_types.py
    39: ./src/smart_mail_agent/features/__init__.py
    40: ./src/smart_mail_agent/features/apply_diff.py
    41: ./src/smart_mail_agent/features/leads_logger.py
    42: ./src/smart_mail_agent/features/quote_logger.py
    43: ./src/smart_mail_agent/features/sales_notifier.py
    44: ./src/smart_mail_agent/ingestion/email_processor.py
    45: ./src/smart_mail_agent/ingestion/init_db.py
    46: ./src/smart_mail_agent/observability/log_writer.py
    47: ./src/smart_mail_agent/observability/sitecustomize.py
    48: ./src/smart_mail_agent/observability/stats_collector.py
    49: ./src/smart_mail_agent/observability/tracing.py
    50: ./src/smart_mail_agent/patches/__init__.py
    51: ./src/smart_mail_agent/patches/handle_router_patch.py
    52: ./src/smart_mail_agent/patches/handle_safe_patch.py
    53: ./src/smart_mail_agent/policy_engine.py
    54: ./src/smart_mail_agent/routing/__init__.py
    55: ./src/smart_mail_agent/routing/action_handler.py
    56: ./src/smart_mail_agent/routing/run_action_handler.py
    57: ./src/smart_mail_agent/sma_types.py
    58: ./src/smart_mail_agent/spam/.keep
    59: ./src/smart_mail_agent/spam/__init__.py
    60: ./src/smart_mail_agent/spam/feature_extractor.py
    61: ./src/smart_mail_agent/spam/ml_spam_classifier.py
    62: ./src/smart_mail_agent/spam/orchestrator_offline.py
    63: ./src/smart_mail_agent/spam/pipeline.py
    64: ./src/smart_mail_agent/spam/rule_filter.py
    65: ./src/smart_mail_agent/spam/rules.py
    66: ./src/smart_mail_agent/spam/spam_filter_orchestrator.py
    67: ./src/smart_mail_agent/spam/spam_llm_filter.py
    68: ./src/smart_mail_agent/trainers/train_bert_spam_classifier.py
    69: ./src/smart_mail_agent/trainers/train_classifier.py
    70: ./src/smart_mail_agent/utils/__init__.py
    71: ./src/smart_mail_agent/utils/config.py
    72: ./src/smart_mail_agent/utils/db_tools.py
    73: ./src/smart_mail_agent/utils/env.py
    74: ./src/smart_mail_agent/utils/errors.py
    75: ./src/smart_mail_agent/utils/font_check.py
    76: ./src/smart_mail_agent/utils/fonts.py
    77: ./src/smart_mail_agent/utils/imap_folder_detector.py
    78: ./src/smart_mail_agent/utils/imap_login.py
    79: ./src/smart_mail_agent/utils/jsonlog.py
    80: ./src/smart_mail_agent/utils/log_writer.py
    81: ./src/smart_mail_agent/utils/logger.py
    82: ./src/smart_mail_agent/utils/logging_setup.py
    83: ./src/smart_mail_agent/utils/mailer.py
    84: ./src/smart_mail_agent/utils/pdf_generator.py
    85: ./src/smart_mail_agent/utils/pdf_safe.py
    86: ./src/smart_mail_agent/utils/priority_evaluator.py
    87: ./src/smart_mail_agent/utils/rag_reply.py
    88: ./src/smart_mail_agent/utils/templater.py
    89: ./src/smart_mail_agent/utils/tracing.py
    90: ./src/smart_mail_agent/utils/validators.py
    91: ./src/spam/__init__.py
    92: ./src/spam/feature_extractor.py
    93: ./src/spam/ml_spam_classifier.py
    94: ./src/spam/pipeline.py
    95: ./src/spam/rule_filter.py
    96: ./src/spam/rules.py
    97: ./src/spam/spam_filter_orchestrator.py
    98: ./src/stats_collector.py
    99: ./src/support_ticket.py
   100: ./src/torch/__init__.py
   101: ./src/torch/distributed/__init__.py
   102: ./src/transformers/__init__.py
   103: ./src/utils/__init__.py
   104: ./src/utils/jsonlog.py
   105: ./src/utils/log_writer.py
   106: ./src/utils/logger.py
   107: ./src/utils/mailer.py
   108: ./src/utils/pdf_safe.py
   109: 
   110: === HEAD of spam modules ===
   111: --- src/smart_mail_agent/spam/rules.py (head -n 80) ---
   112: #!/usr/bin/env python3
   113: # 檔案位置: src/smart_mail_agent/spam/rules.py
   114: # 模組用途: 提供離線可測的垃圾信規則函式（純標準庫），供 orchestrator/pipeline 使用
   115: 
   116: from __future__ import annotations
   117: 
   118: import html
   119: import re
   120: from typing import Iterable, Mapping, MutableMapping, Sequence, Tuple, Dict, Any
   121: 
   122: __all__ = ["contains_keywords", "link_ratio", "label_email", "_normalize_text"]
   123: 
   124: 
   125: def _normalize_text(s: str) -> str:
   126:     """
   127:     將輸入文字做基本正規化：
   128:     1) HTML unescape
   129:     2) 去除多餘空白
   130:     3) 全形空白統一為半形空白
   131:     """
   132:     if not isinstance(s, str):
   133:         return ""
   134:     s = html.unescape(s)
   135:     s = s.replace("\u3000", " ")
   136:     s = re.sub(r"\s+", " ", s).strip()
   137:     return s
   138: 
   139: 
   140: def contains_keywords(
   141:     text: str,
   142:     keywords: Sequence[str],
   143:     *,
   144:     case_insensitive: bool = True,
   145:     match_word_boundary: bool = False,
   146: ) -> bool:
   147:     """
   148:     檢測文字是否包含任一關鍵字。
   149:     """
   150:     s = _normalize_text(text)
   151:     if not s or not keywords:
   152:         return False
   153: 
   154:     flags = re.IGNORECASE if case_insensitive else 0
   155:     for kw in keywords:
   156:         if not kw:
   157:             continue
   158:         if match_word_boundary:
   159:             # 多語字邊界：用非 \w 當分隔
   160:             pattern = rf"(?:(?<=^)|(?<=[^\w])){re.escape(kw)}(?:(?=$)|(?=[^\w]))"
   161:         else:
   162:             pattern = re.escape(kw)
   163:         if re.search(pattern, s, flags=flags):
   164:             return True
   165:     return False
   166: 
   167: 
   168: def link_ratio(html_text: str) -> float:
   169:     """
   170:     計算 HTML 中錨文字佔可見文字長度的比例，範圍 [0,1]。
   171:     """
   172:     if not isinstance(html_text, str) or not html_text.strip():
   173:         return 0.0
   174: 
   175:     s = html_text
   176:     link_inners = re.findall(
   177:         r"<\s*a\b[^>]*>(.*?)<\s*/\s*a\s*>", s, flags=re.IGNORECASE | re.DOTALL
   178:     )
   179:     link_text = " ".join(
   180:         _normalize_text(re.sub(r"<[^>]+>", " ", inner)) for inner in link_inners
   181:     )
   182:     link_text_len = len(link_text.strip())
   183: 
   184:     visible_text = re.sub(r"<[^>]+>", " ", s)
   185:     visible_text = _normalize_text(visible_text)
   186:     visible_text_len = max(len(visible_text), 1)
   187: 
   188:     ratio = link_text_len / float(visible_text_len)
   189:     if ratio < 0.0:
   190:         return 0.0
   191:     if ratio > 1.0:
   192: --- src/smart_mail_agent/spam/orchestrator_offline.py (head -n 80) ---
   193: #!/usr/bin/env python3
   194: # 檔案位置: src/smart_mail_agent/spam/orchestrator_offline.py
   195: # 模組用途: 垃圾信離線 Orchestrator（規則/模型的依賴注入），輸出動作決策 drop/review/route
   196: 
   197: from __future__ import annotations
   198: 
   199: import argparse
   200: import json
   201: import logging
   202: from dataclasses import dataclass
   203: from typing import Callable, Dict, List, Optional, Sequence, Tuple, Any, Mapping
   204: 
   205: from .rules import contains_keywords, link_ratio, DEFAULT_KEYWORDS
   206: 
   207: LOG = logging.getLogger("smart_mail_agent.spam.orchestrator_offline")
   208: if not LOG.handlers:
   209:     handler = logging.StreamHandler()
   210:     fmt = logging.Formatter("[SPAM] %(asctime)s %(levelname)s %(message)s")
   211:     handler.setFormatter(fmt)
   212:     LOG.addHandler(handler)
   213: LOG.setLevel(logging.INFO)
   214: 
   215: 
   216: @dataclass(frozen=True)
   217: class Thresholds:
   218:     link_ratio_drop: float = 0.60
   219:     link_ratio_review: float = 0.40
   220:     model_drop: float = 0.90
   221:     model_review: float = 0.70
   222: 
   223: 
   224: class SpamFilterOrchestratorOffline:
   225:     """
   226:     垃圾信決策 Orchestrator（離線版）
   227:     """
   228: 
   229:     def __init__(
   230:         self,
   231:         *,
   232:         spam_keywords: Optional[Sequence[str]] = None,
   233:         rule_contains: Callable[[str, Sequence[str]], bool] = contains_keywords,
   234:         rule_link_ratio: Callable[[str], float] = link_ratio,
   235:         model_predict: Optional[Callable[..., Tuple[str, float]]] = None,
   236:         thresholds: Optional[Thresholds] = None,
   237:     ) -> None:
   238:         self.spam_keywords = list(spam_keywords or DEFAULT_KEYWORDS)
   239:         self.rule_contains = rule_contains
   240:         self.rule_link_ratio = rule_link_ratio
   241:         self.model_predict = model_predict
   242:         self.th = thresholds or Thresholds()
   243: 
   244:     def decide(self, subject: str, content: str) -> Dict[str, Any]:
   245:         """
   246:         回傳:
   247:             {
   248:               "action": "drop" | "review" | "route",
   249:               "reasons": [ ... ],
   250:               "scores": { "link_ratio": float, "model": float }
   251:             }
   252:         """
   253:         reasons: List[str] = []
   254:         scores: Dict[str, float] = {"link_ratio": 0.0, "model": 0.0}
   255: 
   256:         subject = subject or ""
   257:         content = content or ""
   258:         merged = f"{subject}\n{content}"
   259: 
   260:         # 規則：關鍵字
   261:         try:
   262:             if self.rule_contains(merged, self.spam_keywords):
   263:                 reasons.append("rule:keyword")
   264:         except Exception as e:
   265:             LOG.warning("contains_keywords failed: %s", e)
   266: 
   267:         # 規則：連結密度
   268:         try:
   269:             lr = float(self.rule_link_ratio(content))
   270:             scores["link_ratio"] = lr
   271:             if lr >= self.th.link_ratio_drop:
   272:                 reasons.append(f"rule:link_ratio>={self.th.link_ratio_drop:.2f}")
   273: --- src/smart_mail_agent/spam/pipeline.py (head -n 80) ---
   274: #!/usr/bin/env python3
   275: # 檔案位置: src/smart_mail_agent/spam/pipeline.py
   276: # 模組用途: 提供 analyze(...)，向後相容 analyze(dict) 的舊測試
   277: 
   278: from __future__ import annotations
   279: 
   280: import argparse
   281: import json
   282: from typing import Any, Dict, Mapping, Sequence, Tuple
   283: 
   284: from .orchestrator_offline import SpamFilterOrchestratorOffline, Thresholds
   285: from .rules import contains_keywords, link_ratio, label_email, DEFAULT_KEYWORDS
   286: 
   287: 
   288: def analyze(email_or_subject: Mapping[str, Any] | str, content: str | None = None) -> Dict[str, Any]:
   289:     """
   290:     相容兩種呼叫：
   291:       1) analyze({"subject": "...", "content": "...", "attachments": [...]})
   292:       2) analyze(subject: str, content: str)
   293:     回傳:
   294:       {
   295:         "label": "spam|ham",
   296:         "action": "drop|review|route",
   297:         "scores": {"keyword": 0/1, "link_ratio": float},
   298:         "decision": {...}
   299:       }
   300:     """
   301:     if isinstance(email_or_subject, dict):
   302:         email = email_or_subject
   303:         subject = str(email.get("subject", "") or "")
   304:         body = str(email.get("content", "") or "")
   305:     else:
   306:         subject = str(email_or_subject or "")
   307:         body = str(content or "")
   308:         email = {"subject": subject, "content": body}
   309: 
   310:     rule_res = label_email(email, keywords=DEFAULT_KEYWORDS, lr_drop=Thresholds().link_ratio_drop)
   311:     orch = SpamFilterOrchestratorOffline()
   312:     decision = orch.decide(subject, body)
   313: 
   314:     return {"label": rule_res["label"], "action": decision["action"], "scores": rule_res["scores"], "decision": decision}
   315: 
   316: 
   317: def _build_cli() -> argparse.ArgumentParser:
   318:     p = argparse.ArgumentParser(description="Spam analyze pipeline (offline)")
   319:     p.add_argument("--subject", default="")
   320:     p.add_argument("--content", default="")
   321:     p.add_argument("--json", action="store_true")
   322:     return p
   323: 
   324: 
   325: def _main() -> int:
   326:     args = _build_cli().parse_args()
   327:     out = analyze(args.subject, args.content)
   328:     if args.json:
   329:         print(json.dumps(out, ensure_ascii=False, indent=2))
   330:     else:
   331:         print(out)
   332:     return 0
   333: 
   334: 
   335: if __name__ == "__main__":
   336:     raise SystemExit(_main())
   337: --- src/spam/pipeline.py (head -n 80) ---
   338: #!/usr/bin/env python3
   339: # 檔案位置: src/spam/pipeline.py
   340: # 模組用途: 轉接至 smart_mail_agent.spam.pipeline 的 analyze
   341: 
   342: from __future__ import annotations
   343: from smart_mail_agent.spam.pipeline import analyze  # re-export
   344: __all__ = ["analyze"]
   345: 
   346: === TEST calls to analyze/orchestrate (context) ===
   347: tests/spam/test_offline_orchestrator_contracts.py:12:    res = orchestrate("x", rule_dict_true, model_weird, model_threshold=0.6)
   348: tests/spam/test_offline_orchestrator_contracts.py:16:    res = orchestrate("x", rule_dict_false, model_tuple, model_threshold=0.6)
   349: tests/spam/test_offline_orchestrator_contracts.py:20:    res = orchestrate("x", rule_dict_false, model_list_of_dict, model_threshold=0.6)
   350: tests/spam/test_offline_orchestrator_paths.py:15:    res = orchestrate("x", r_true, m_ham, model_threshold=0.6)
   351: tests/spam/test_offline_orchestrator_paths.py:19:    res = orchestrate("x", r_false, m_spam_high, model_threshold=0.6)
   352: tests/spam/test_offline_orchestrator_paths.py:23:    res = orchestrate("x", r_false, m_spam_eq_thr, model_threshold=0.6)
   353: tests/spam/test_offline_orchestrator_paths.py:27:    res = orchestrate("x", r_false, m_spam_low, model_threshold=0.6)
   354: tests/spam/test_offline_orchestrator_paths.py:31:    res = orchestrate("x", r_false, m_ham, model_threshold=0.6)
   355: tests/spam/test_offline_orchestrator_paths.py:35:    res = orchestrate("x", r_false, m_broken, model_threshold=0.6)
   356: tests/e2e/test_spam_pipeline.py:7:    r = analyze(
   357: tests/e2e/test_spam_pipeline.py:20:    r = analyze(
   358: tests/e2e/test_spam_pipeline.py:33:    r = analyze(
   359: tests/unit/test_spam_pipeline_smoke.py:14:    res = orchestrate(["你中獎了！點此領獎"], rules_only=True)
--------------------------------------------------------------------------------
END FILE    tmp/spam_snapshot_20250817_011451.txt
================================================================================
================================================================================
BEGIN FILE  tools/run_actions_matrix.py  (106 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: #!/usr/bin/env python3
     2: if __name__ == "__main__":
     3:     print("run_actions_matrix: noop for offline tests")
--------------------------------------------------------------------------------
END FILE    tools/run_actions_matrix.py
================================================================================
================================================================================
BEGIN FILE  tox.ini  (137 bytes)
TAGS: legacy_candidate=no | sys_path_hack=no | duplicate_basename=no
--------------------------------------------------------------------------------
     1: [tox]
     2: envlist = py310
     3: skipsdist = true
     4: 
     5: [testenv]
     6: deps =
     7:     pytest
     8:     pytest-cov
     9: commands =
    10:     OFFLINE=1 PYTHONPATH=".:src" pytest -q
--------------------------------------------------------------------------------
END FILE    tox.ini
================================================================================
