#!/usr/bin/env bash
set -Eeuo pipefail
trap 'ec=$?; echo "❌ smarun failed at line $LINENO (exit $ec)"; exit $ec' ERR

ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")"/.. && pwd)"
cd "$ROOT"

# 先進專案，再開 venv
if [[ -f .venv/bin/activate ]]; then
  . .venv/bin/activate
elif [[ -x bin/smaenv ]]; then
  bin/smaenv
else
  python3 -m venv .venv
  . .venv/bin/activate
  python -m pip -q install -U pip
  [[ -f requirements.txt ]] && pip -q install -r requirements.txt || true
fi

export PYTHONFAULTHANDLER=1
export PYTHONWARNINGS="${PYTHONWARNINGS:-default}"
export SMA_LOG_DIR="${SMA_LOG_DIR:-$ROOT/logs}"
mkdir -p "$SMA_LOG_DIR" data/output

# 匯入檢查（不再用 heredoc）
if ! PYTHONPATH=src python -c "import importlib; importlib.import_module('src.run_action_handler')" >/dev/null 2>&1; then
  echo "❌ 無法 import src.run_action_handler（檢查 PYTHONPATH=src 與程式檔）" >&2
  exit 3
fi

# 沒參數就自動跑 sample（--dry-run）
if [[ $# -eq 0 ]]; then
  [[ -f data/output/in_sales.json ]] || cat > data/output/in_sales.json <<'JSON'
{"subject":"詢價與合作","from":"alice@partner.co","body":"想了解報價與合作方案。"}
JSON
  set -- --input data/output/in_sales.json --output data/output/out_sales.json --dry-run
fi

PYTHONPATH=src python -X dev -m src.run_action_handler "$@"

# 摘要輸出 & log 尾巴
out=""; prev=""
for a in "$@"; do [[ "$prev" == "--output" ]] && out="$a"; prev="$a"; done
if [[ -n "$out" && -f "$out" ]]; then
  echo "✅ 輸出：$out"
  PYTHONPATH=src python - "$out" <<'PY' || true
import json, sys
d = json.load(open(sys.argv[1], "r", encoding="utf-8"))
print("logged_path =", d.get("logged_path"))
print("warnings    =", d.get("warnings"))
PY
fi
LOG="$SMA_LOG_DIR/sma-$(date +%Y%m%d).jsonl"
[[ -f "$LOG" ]] && { echo "📝 Log tail:"; tail -n 5 "$LOG" || true; } || echo "⚠️ 沒有當日 JSONL：$LOG"
