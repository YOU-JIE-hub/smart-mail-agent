

===== ENV =====
Python 3.10.12
pip 25.2 from /home/youjie/.local/lib/python3.10/site-packages/pip (python 3.10)
ruff 0.12.9


===== GIT - branch, head, status, remotes =====
chore/final-canonicalize-and-shims-20250822T030252
be22814 ci(online): add online/integration workflow (manual trigger; non-blocking)
## chore/final-canonicalize-and-shims-20250822T030252...origin/chore/final-canonicalize-and-shims-20250822T030252
 M _audit/all_sources.txt
 M _audit/git_files.txt
 M _audit/python_files.txt
 M repo_counts.txt
 M repo_tree.txt
?? _audit/restored_from_base.txt
?? _audit/support_bundle.txt
?? refactor_plan.json
?? tools/safe_refactor.py
origin	git@github.com:YOU-JIE-hub/smart-mail-agent.git (fetch)
origin	git@github.com:YOU-JIE-hub/smart-mail-agent.git (push)


===== TREE (src, depth<=3) =====
src/
  scripts/
  spam/
  smart_mail_agent/
  smart_mail_agent/spam/
  smart_mail_agent/spam/__pycache__/
  smart_mail_agent/ingestion/
  smart_mail_agent/ingestion/integrations/
  smart_mail_agent/ingestion/__pycache__/
  smart_mail_agent/smart_mail_agent/
  smart_mail_agent/smart_mail_agent/spam/
  smart_mail_agent/smart_mail_agent/__pycache__/
  smart_mail_agent/smart_mail_agent/utils/
  smart_mail_agent/__pycache__/
  smart_mail_agent/cli/
  smart_mail_agent/cli/__pycache__/
  smart_mail_agent/actions/
  smart_mail_agent/actions/__pycache__/
  smart_mail_agent/utils/
  smart_mail_agent/utils/__pycache__/
  smart_mail_agent/routing/
  smart_mail_agent/routing/__pycache__/
  smart_mail_agent/core/
  smart_mail_agent/core/utils/
  smart_mail_agent/observability/
  smart_mail_agent/observability/__pycache__/
  smart_mail_agent/trainers/
  smart_mail_agent/patches/
  smart_mail_agent/patches/__pycache__/
  smart_mail_agent/features/
  smart_mail_agent/features/support/
  smart_mail_agent/features/sales/
  smart_mail_agent/features/spam/
  smart_mail_agent/features/__pycache__/
  smart_mail_agent/features/modules_legacy/
  ai_rpa/
  ai_rpa/__pycache__/
  ai_rpa/utils/
  ai_rpa/utils/__pycache__/
  utils/
  patches/
  stats_collector.py
  send_with_attachment.py
  inference_classifier.py
  scripts/__init__.py
  scripts/online_check.py
  spam/__init__.py
  spam/spam_filter_orchestrator.py
  __init__.py
  smart_mail_agent/inference_classifier.py
  smart_mail_agent/spam/pipeline.py
  smart_mail_agent/spam/rule_filter.py
  smart_mail_agent/spam/inference_classifier.py
  smart_mail_agent/spam/__init__.py
  smart_mail_agent/spam/spam_filter_orchestrator.py
  smart_mail_agent/spam/ml_spam_classifier.py
  smart_mail_agent/spam/spam_llm_filter.py
  smart_mail_agent/spam/rules.py
  smart_mail_agent/spam/offline_orchestrator.py
  smart_mail_agent/spam/orchestrator_offline.py
  smart_mail_agent/spam/feature_extractor.py
  smart_mail_agent/ingestion/email_processor.py
  smart_mail_agent/ingestion/init_db.py
  smart_mail_agent/__init__.py
  smart_mail_agent/smart_mail_agent/__init__.py
  smart_mail_agent/__version__.py
  smart_mail_agent/cli/sma_run.py
  smart_mail_agent/cli/sma.py
  smart_mail_agent/cli/sma_spamcheck.py
  smart_mail_agent/email_processor.py
  smart_mail_agent/actions/__init__.py
  smart_mail_agent/actions/complaint.py
  smart_mail_agent/actions/sales_inquiry.py
  smart_mail_agent/utils/font_check.py
  smart_mail_agent/utils/errors.py
  smart_mail_agent/utils/pdf_generator.py
  smart_mail_agent/utils/env.py
  smart_mail_agent/utils/__init__.py
  smart_mail_agent/utils/config.py
  smart_mail_agent/utils/jsonlog.py
  smart_mail_agent/utils/imap_login.py
  smart_mail_agent/utils/logging_setup.py
  smart_mail_agent/utils/db_tools.py
  smart_mail_agent/utils/priority_evaluator.py
  smart_mail_agent/utils/log_writer.py
  smart_mail_agent/utils/imap_folder_detector.py
  smart_mail_agent/utils/fonts.py
  smart_mail_agent/utils/validators.py
  smart_mail_agent/utils/rag_reply.py
  smart_mail_agent/utils/mailer.py
  smart_mail_agent/utils/tracing.py
  smart_mail_agent/utils/logger.py
  smart_mail_agent/utils/templater.py
  smart_mail_agent/utils/pdf_safe.py
  smart_mail_agent/sma_types.py
  smart_mail_agent/routing/__init__.py
  smart_mail_agent/routing/run_action_handler.py
  smart_mail_agent/routing/action_handler.py
  smart_mail_agent/core/classifier.py
  smart_mail_agent/core/sma_types.py
  smart_mail_agent/core/policy_engine.py
  smart_mail_agent/observability/stats_collector.py
  smart_mail_agent/observability/sitecustomize.py
  smart_mail_agent/observability/log_writer.py
  smart_mail_agent/observability/tracing.py
  smart_mail_agent/__main__.py
  smart_mail_agent/trainers/train_bert_spam_classifier.py
  smart_mail_agent/trainers/train_classifier.py
  smart_mail_agent/patches/__init__.py
  smart_mail_agent/patches/handle_router_patch.py
  smart_mail_agent/patches/handle_safe_patch.py
  smart_mail_agent/cli_spamcheck.py
  smart_mail_agent/policy_engine.py
  smart_mail_agent/features/leads_logger.py
  smart_mail_agent/features/quote_logger.py
  smart_mail_agent/features/sales_notifier.py
  smart_mail_agent/features/__init__.py
  smart_mail_agent/features/apply_diff.py
  email_processor.py
  ai_rpa/ocr.py
  ai_rpa/file_classifier.py
  ai_rpa/nlp.py
  ai_rpa/utils/config_loader.py
  ai_rpa/utils/logger.py
  ai_rpa/scraper.py
  ai_rpa/main.py
  ai_rpa/actions.py
  classifier.py
  utils/__init__.py
  utils/log_writer.py
  utils/mailer.py
  utils/logger.py
  utils/pdf_safe.py
  run_action_handler.py
  patches/__init__.py
  patches/handle_safe_patch.py
  action_handler.py


===== COUNTS =====
ai_rpa                  8 .py files
smart_mail_agent       80 .py files
src                     107 .py files


===== WORKFLOWS (first 120 lines each if present) =====

--- .github/workflows/lint.yml ---
name: lint
on:
  push:
    branches: ['**']
  pull_request:

jobs:
  ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install ruff
        run: python -m pip install --upgrade ruff

      - name: Ruff (src, strict)
        run: ruff check --force-exclude src

      - name: Ruff (tests, non-blocking)
        if: ${{ always() }}
        run: ruff check --force-exclude tests || true

--- .github/workflows/typecheck.yml ---
name: type
on:
  push:
    branches: ['**']
  pull_request:
jobs:
  mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install mypy + stubs
        run: |
          python -m pip install --upgrade pip
          pip install mypy types-PyYAML types-requests types-Pillow
      - name: Run mypy (non-blocking)
        continue-on-error: true
        run: mypy --config-file mypy.ini

--- .github/workflows/tests.yml ---
name: unit-and-coverage
on:
  push:
    branches: ['**']
  pull_request:
jobs:
  unit:
    runs-on: ubuntu-latest
    continue-on-error: true  # 先保證流程不中斷
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Setup venv & install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest pytest-timeout pytest-cov genbadge[coverage]
      - name: Run tests (offline-friendly)
        env:
          PYTHONPATH: .:src
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: "1"
        run: |
          . .venv/bin/activate
          pytest -q -k 'not online' -p pytest_cov --maxfail=1 \
            --cov=src --cov-branch \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing:skip-covered || true
      - name: Generate coverage badge
        run: |
          . .venv/bin/activate
          mkdir -p badges
          if [ -f coverage.xml ]; then
            genbadge coverage -i coverage.xml -o badges/coverage.svg
          else
            echo '<svg xmlns="http://www.w3.org/2000/svg"/>' > badges/coverage.svg
          fi
      - name: Commit coverage badge back
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add badges/coverage.svg || true
          git commit -m "chore(badge): update coverage.svg [skip ci]" || echo "no changes"
          git push || true

--- .github/workflows/online.yml ---
name: online-tests
on:
  workflow_dispatch:
  push: { branches: ['**'] }
jobs:
  online:
    if: ${{ github.event_name == 'workflow_dispatch' || (secrets.SMTP_USER != '' && secrets.SMTP_PASS != '') }}
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.10' }
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          pip install pytest
      - name: Run online/integration tests
        env:
          PYTHONPATH: .:src
        run: |
          if [ -d tests/online ] || [ -d tests/integration ]; then
            pytest -q tests/online tests/integration || true
          else
            echo "no online/integration tests present"
          fi

--- .github/workflows/codeql.yml ---
name: "CodeQL"
on:
  push:
    branches: [main]

jobs:
  analyze:
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - uses: github/codeql-action/analyze@v3


===== CONFIG (ruff / mypy / README badges block) =====
--- .ruff.toml ---
target-version = "py310"
line-length = 100
force-exclude = true
extend-exclude = [
  "examples/**",
  "modules/**",
  "scripts/**",
  "src/scripts/**",
  "tools/**",
  "bin/**",
  "assets/**",
  "site/**",
  "data/**",
  "out/**",
  "sitecustomize.py",
  "init_db.py",
]

[lint]
select = ["E", "F"]
ignore = ["E501"]
--- mypy.ini ---
[ mypy ]
python_version = 3.10
files = src
ignore_missing_imports = True
explicit_package_bases = True
namespace_packages = True
show_error_codes = True
--- README.md (badges block附近) ---
<p align="left">
  <a href="https://github.com/YOU-JIE-hub/smart-mail-agent/actions"><img alt="CI" src="https://img.shields.io/github/actions/workflow/status/YOU-JIE-hub/smart-mail-agent/tests.yml?branch=hardening/pro-release-20250821-060514&label=CI"></a>
  <a href="https://github.com/YOU-JIE-hub/smart-mail-agent/actions"><img alt="Lint" src="https://img.shields.io/github/actions/workflow/status/YOU-JIE-hub/smart-mail-agent/lint.yml?branch=hardening/pro-release-20250821-060514&label=lint"></a>
  <a href="https://github.com/YOU-JIE-hub/smart-mail-agent/actions"><img alt="Type Check" src="https://img.shields.io/github/actions/workflow/status/YOU-JIE-hub/smart-mail-agent/typecheck.yml?branch=hardening/pro-release-20250821-060514&label=type"></a>
  <a href="badges/coverage.svg"><img alt="Coverage" src="badges/coverage.svg"></a>
  <a href="https://github.com/YOU-JIE-hub/smart-mail-agent/releases"><img alt="Release" src="https://img.shields.io/github/v/tag/YOU-JIE-hub/smart-mail-agent"></a>
</p>


===== SCAN for direct top-level imports: utils|spam|modules|patches =====
(none)


===== SMOKE - rules =====
rules_ok: True


===== SMOKE - CLI =====
{"is_spam": false, "score": 0.7, "explain": ["spam_words", "shortlink", "kw:hit"]}


===== RUFF isolated (select E,F; ignore E501) =====
All checks passed!

(exit code: 0)


===== SUMMARY =====
bundle file: _audit/support_bundle.txt
tree      : repo_tree.txt
counts    : repo_counts.txt
